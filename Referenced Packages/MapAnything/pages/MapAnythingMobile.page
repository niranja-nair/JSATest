<apex:page showHeader="false" sidebar="false" controller="sma.MapAnythingMobile" docType="html-5.0">
    <!-- <apex:includeScript value="{!URLFOR($Resource.MapAnything, 'jstree/_lib/jquery.js')}"/> -->
    
    <script type="text/javascript" src="https://platform.linkedin.com/in.js">
        api_key: qi7lfx50crv5
        scope: r_basicprofile r_network w_messages
    </script>
    
    <!-- jQuery -->   
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery-1.7.1.min.js')}"/>
    
    <!-- jQuery UI -->
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jquery/jquery-ui.min.js')}"/> 
    
    <script type="text/javascript" charset="UTF-8" src="https://api.maps.nlp.nokia.com/2.2.3/jsl.js?with=all"></script>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'jquery.mobile-1.0/jquery.mobile-1.0.min.css')}"/>

    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jquery.mobile-1.0/jquery.mobile-1.0.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'notify/jquery.notify.js')}"/>
    
    <apex:includeScript value="../../soap/ajax/18.0/connection.js"/>
    <apex:includeScript value="/soap/ajax/18.0/apex.js"/>
    <apex:includeScript value="/static/013008/js/functions.js"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'notify/ui.notify.css')}"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>    
    
    
    
    <style>
        /**************** INFO BUBBLE NOKIA ****************/       
        .nm_contentBG 
        {
            background-color: #FFFFFF !important;
            border-radius: 0.4em 0.4em 0.4em 0.4em;
        }
                
        .nm_bubble_controls 
        {            
            z-index:5;
        }
        
        .nm_bubble_controls a:hover
        {
            border:0px;
            text-decoration: none;
        }
        
        .nm_bubble_controls a
        {            
            color:black;
        }
        
        .nm_bubble_content
        {
            left:1.75px;
            top:1.5px;
            position:relative; 
            color:black;
            background:white;
            min-width:400px;
            max-width:500px;
            padding:.25em;
            margin-right:1.25em;
            margin-left:.5em;
            padding-bottom:13px; !important
        }
                
        .nm_bubble_content a, .nm_bubble_content a:visited
        {
            color:#555555 !important;
        }
               
        .nm_infoBubble .nm_bubble_bg
        {
            border:2px solid black;
        }
        
        /*************************************************/
        /* Tooltip Chatter
        #tooltip-content .tabs > div.loading {
            background: transparent url('{!URLFOR($Resource.sma__MapAnything, 'images/chatterstatus-loader.gif')}') no-repeat center;
        }
        #tooltip-content .publisherpollchoiceinput {
            width: 200px;
        }
        #tooltip-content .fileFormInputElement {
            width: 250px;
        } */
        
        .contentPublisherSlideDown table.postInput td {
            text-align: left !important;
        }
        
        #mapdiv
          {
            height:800px;
          }
          
          #SideBar          
          {
              position:absolute;
              z-index: 12;
              left: 0px;
              top: 46px; 
              height:800px;
              width: 310px; 
              background-color:white;
              border: 1px solid black;
              
              padding-top: 10px;
              padding-right: 3px;
              padding-bottom: 3px;
              padding-left: 3px;
              overflow-y: scroll;
            -webkit-overflow-scrolling: touch;
          }
    
        tr.PlottedRowUnit 
        {
            display:block;
            float:left;
            width:275px;
            margin:0 0 6px 0;
            padding:0;
            font-size: 12px; 
            background:#eee; 
            border:1px solid #ddd;
            border-radius:2px;
            box-shadow:none;
        }
        
        .ui-li-icon
        {
            top:0.47em;
        }
        .ui-li-has-icon .ui-btn-inner a.ui-link-inherit, .ui-li-static.ui-li-has-icon
        {
            min-height:10px;
        }        
        
        @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:portrait) {
          /* For portrait layouts only */
          #mapdiv
          {
            height:1110px;
          }
          #SideBar 
          {
              position:absolute;
              z-index: 12;
              left: 0px;
              top: 44px; 
              height:1097px;
              width: 310px; 
              background-color: #f0f0f0;
              border: 1px solid black;
              -webkit-overflow-scrolling:touch;
              overflow:auto;
              
          }
        }
        
        @media only screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:landscape) {
          /* For landscape layouts only */
          #mapdiv
          {
            height:575px;
          }
          #SideBar 
          {
              position:absolute;
              z-index: 12;
              left: 0px;
              top: 44px; 
              height:562px;
              width: 310px; 
              background-color: #f0f0f0;
              border: 1px solid black;
              -webkit-overflow-scrolling:touch;
              overflow:auto;
          }
          
          #TreeDiv
          {
            border: 1px solid black;
            max-height:380px;
          }
          
        }
    
        .scrollable {
            -webkit-overflow-scrolling:touch;
            overflow:auto;
        }
        
        /* LinkedIn Integration */ 
        .IN-widget {
            width: 100% !important;
        }
        .linkedin-cluster-table-wrapper {
            max-height: 400px;
            overflow: auto;
        }
        .linkedin-cluster-header {
            font-weight: bold;
            font-size: 12px;
            color: #757575;
        }
        .linkedin-info {
            width: 350px;
            vertical-align: top;
        }
        .linkedin-info div {
            white-space: pre-wrap;   
            white-space: -moz-pre-wrap;    
            white-space: -pre-wrap;   
            white-space: -o-pre-wrap;    
            word-wrap: break-word;
        }
        .linkedin-info .linkedin-name {
            font-weight: bold;
            font-size: 14px;
        }
        .linkedin-info .linkedin-name a {
            text-decoration: none;
            color: #2265bb;
        }
        .linkedin-info .linkedin-name span {
            vertical-align: top;
            margin-left: 5px;
            padding: 1px;
            background-color: #ededed;
            border: 1px solid rgb(219, 219, 219);
            -moz-border        -radius: 8px;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            -moz-box-shadow: 0px 0px 2px #000000;
            -webkit-box-shadow: 0px 0px 2px rgb(0, 0, 0);
            box-shadow: 0px 0px 2px #000000;
            font-size: 9px;
        }
        .linkedin-info .linkedin-name span b {
            vertical-align: top;
        }
        .linkedin-info .linkedin-headline {
            font-weight: bold;
            font-size: 12px;
        }
        .linkedin-info .linkedin-industry {
            font-size: 10px !important;
        }
        .linkedin-actions button {
            display: block;
            margin: 3px 0;
            cursor: pointer;
        }
   
    </style>
    
    <!-- JS -->
    <c:JSHelperFunctions />
    <script>
    
        nokia.Settings.set("appId", "cL2-LKZ0bcVr0BcDu7P-"); 
        nokia.Settings.set("authenticationToken", "ygeWiBoAwmMHKgSwNCgxQw");
        (document.location.protocol == "https:") && nokia.Settings.set("secureConnection", "force");
        
        var userSettings = {};
        var customButtons = [];
        
        var IsCorporateAdmin = true;

        var BaseObjectsForSubMenu = new Array();
        
        var ZoomBar           = new nokia.maps.map.component.ZoomBar();
        //var ZoomRectangle   = new nokia.maps.map.component.ZoomRectangle();
        var ViewControl       = new nokia.maps.map.component.ViewControl();
        var InfoBubbles       = new nokia.maps.map.component.InfoBubbles();
        var ScaleBarComponent = new nokia.maps.map.component.ScaleBar();
        
        var UserId = '{!$User.Id}';
        
        var LoadingGIFUrl = '{!URLFOR($Resource.MapAnything, 'ajax-loader.gif')}';
        var MALoaddingGIFUrl = '{!$Resource.MapLoadingGif}';
        
        var VisibleQueries = new Array(); //Used to Determine Which Queries are Visible (List of Ids)
        var SavedQueriesObjectIdArray = new Array(); //Used to Store Information about Processed Saved Queries
        
        if (nokia.maps.positioning.Manager) 
        {
            var PositioningMgr    = new nokia.maps.positioning.Manager();
        }
        else
        {
            $('#ShowPositionButton').hide();
        }
        
        var ProcessedSavedQueries = new Array();
        
        var UserEmailAddress = "{!$User.Email}";
        
        var TrafficIsOn = false;
        
        var OnUserLoadEventCompletd = false;
        var map = null;
        var ProximityCircle = null;
        var DOMNode = null;
        var router = null;
        var mapRoute = null;
        
        var AllLocationMarkers = new Array();
        
        var RangeColorIndex = new Array();
        var NumberField=null;
        var MinIndex;
        var MaxIndex;
        var RangeEnabled;
        
        var VisibleLocationMarkers = new Array();
        
        var ObjectsToUpdateWithLatLong = new Array();
        
        //Proximity Search Vars
        var pc_Added    = false;
        var pc_Lat      = 0;
        var pc_Long     = 0;
        var pc_Diameter = 0;
        
        //Position Vars
        var PositionMarker
        var PositionAccuracyCircle;
        var PositionEnabled = false;
        var PositionGeoCoder = new nokia.maps.search.Manager();
        
        var DebugMode = false;
        
        var GeoCodePointsIsRunning = false; //No Longer Needed
        
        var CallBackFunction;
        
        var GeoCodeList1 = new nokia.maps.util.OList();
        var GeoCodeList2 = new nokia.maps.util.OList();
        var GeoCodeList3 = new nokia.maps.util.OList();
        var GeoCodeList4 = new nokia.maps.util.OList();
        
        var GeoCoder1 = new nokia.maps.search.Manager();
        var GeoCoder2 = new nokia.maps.search.Manager();
        var GeoCoder3 = new nokia.maps.search.Manager();
        var GeoCoder4 = new nokia.maps.search.Manager();
        
        var ProximityGeoCoder = new nokia.maps.search.Manager();
        var RoutingGeoCoder = new nokia.maps.search.Manager();
        var RoutingGeoCodeList = new nokia.maps.util.OList();
        var RoutingGeoCodeIsRunning;
        var WayPointArray = new Array();
        var HasRoutingErrors = false;
        
        
        var GeoCoder1IsRunning;
        var GeoCoder2IsRunning;
        var GeoCoder3IsRunning;
        var GeoCoder4IsRunning;
        
        
        var g1StatusElement;
        var g2StatusElement;
        var g3StatusElement;
        var g4StatusElement;
        
        var PlottedLegendSavedQryId = "";
        
        var GeocOdeListIndex = 1;
        
        var GeoCoderCounter = 0;
        
        var ObjectsToUpdateWithLatLongCleanUpIsRunning = false;
        
        var slider1;
        
        var slider2;
        
        $(document).bind("mobileinit", function(){
            $.mobile.touchOverflowEnabled = true;
        });
        
        $(document).ready(function() {
            DisplayRootFolders();    
        
        //Leave Slider in VF Page
        /*
        slider1 = $('#slider1').bxSlider({
            controls: false,
            infiniteLoop: false,
            speed: 200
        });        
        
        slider2 = $('#slider2').bxSlider({
            controls: false,
            infiniteLoop: false,
            speed: 200
        }); 
        
        
        if (LicenseType == 'bronze')
        {
            $('#ShowTrafficButton').hide();
        }
        */
        
        //Remove Copyright Link
        $("#nm_crimg a").attr('disabled','disabled');
        
        StartUpJS();
        
        //map.setCopyrightAligment('topright');        
        
        AddGeoCoderObservers();
        
        var processResults = function(observedManager, key, value) {
            if (value == "finished") 
            {
                if (observedManager.getLocations().length > 0) 
                {
                    Debug("Location Found!"); 
                    
                    var SearchResult = observedManager.getLocations()[0];
                    
                    var street = SearchResult.address.street;
                    var city = SearchResult.address.city;
                    var state = SearchResult.address.state;
                    var country = SearchResult.address.country;
                    var county = SearchResult.address.county ;
                    var district = SearchResult.address.district;
                    var postalcode = SearchResult.address.postalCode;
                    var suite = SearchResult.address.suite;
                    var floor = SearchResult.address.floor;
                    var houseNumber = SearchResult.address.houseNumber;
                                   
                    var compiledStreet = (houseNumber != null ? houseNumber+" ":"") + (floor != null?"Floor - " + floor+" " + ", ":"") + (street!=null?street+" ":"") + (suite != null ? "Suite - " + suite:""); 
                            
                    var CompiledAddress  = new Array();
                    CompiledAddress.push($.trim(compiledStreet));
                    CompiledAddress.push(city);
                    CompiledAddress.push(state);
                    CompiledAddress.push(postalcode);                
                    
                    $('#PositionAddress').html(CompiledAddress.join(', '));                   
                }
                else
                {
                    $('#PositionAddress').html("Unable to Locate Address");
                    Debug("Location Not Found!");
                }
            } 
            else if (value == "failed") 
            {
                alert("The request failed.");
            }
            else
            {
                Debug("PositionGeoCoder State: " + value);
            }
        };
        
        
        // Attach the observer function to our search manager
        PositionGeoCoder.addObserver("state", processResults);
        
        //var copy = function (obj, key, value, oldValue) { UpdateViewableArea(); };
        //map.set("observers", { center: copy, zoomLevel: copy, heading: copy });
        
        /*
        //preload images
        var images = new Array();
        var preloaders = ["{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}"];
        for (i = 0; i < preloaders.length; i++) {
            images[i] = new Image();
            images[i].src = preloaders[i];
        }
        */
        
        
        PositioningMgr.getCurrentPosition(
            function (position) {
                var coords = position.coords;
                $(WayPointLI)
                    .attr('Lat', coords.latitude)
                    .attr('Long', coords.longitude)
                    .attr('Address', 'My Position')
                    .attr('WayPointTitle', 'My Position')
                    .prependTo('#sortable')
                    .find('input').val('My Position').prop('disabled', true).addClass('DisabledWaypoint ui-input-text ui-body-c ui-corner-all ui-shadow-inset');
                
                OrderNumbersOnWapPoints();
            }
        );
    });
        
    function MapViewChanged(obj)
    {
        
        var SelectedValue = obj.value;
                  
          if (SelectedValue == 'NormalView')
          {
              map.overlays.remove(map.LABELS);
              map.set("baseMapType", map.NORMAL);
          }
          else if (SelectedValue == 'HybridView')
          {
              map.set("baseMapType", map.SATELLITE);
              map.overlays.add(map.LABELS);
          }
          else if (SelectedValue == 'SatelliteView')
          {
              map.overlays.remove(map.LABELS);
              map.set("baseMapType", map.SATELLITE);
          }
    }

// JavaScript Document

var MaxExportSize;
var MaxQuerySize = 2000;


function StartUpJS()
{
    
    //nokia.Settings.set( "authenticationToken", "b29a9c22a00246767669315caa0c462a171cbdf320a31eec");
   
    var mapContainer = document.getElementById("mapdiv");
// Create a map inside the map container DOM node
 map = new nokia.maps.map.Display(mapContainer, {
    // initial center and zoom level of the map
    center: [37.5740108, -98.4801102],
    zoomLevel: 4,
    copyrightAlignment: 'topright',
    components: [
        
        // ZoomBar provides a UI to zoom the map in & out
        //new nokia.maps.map.component.ZoomBar(), 
        // We add the behavior component to allow panning / zooming of the map
        new nokia.maps.map.component.Behavior(),
        // Creates UI to easily switch between street map satellite and terrain mapview modes
        //new nokia.maps.map.component.TypeSelector(),
        // Creates a toggle button to show/hide traffic information on the map
        //new nokia.maps.map.component.Traffic(),
        // Creates a toggle button to show/hide public transport lines on the map
        //new nokia.maps.map.component.PublicTransport(),
        // Creates a toggle button to enable the distance measurement tool
        new nokia.maps.map.component.DistanceMeasurement(),
        // Shows a min-map in the bottom right corner of the map
        new nokia.maps.map.component.Overview(),
        /* Shows a scale bar in the bottom right corner of the map depicting
         * ratio of a distance on the map to the corresponding distance in the real world
         * in either kilometers or miles
         */ 
        //new nokia.maps.map.component.ScaleBar(),
        /* Positioning will show a set "map to my GPS position" UI button
         * Note: this component will only be visible if W3C geolocation API
         * is supported by the browser and if you agree to share your location.
         * If you location can not be found the positioning button will reset
         * itself to its initial state
         */
        new nokia.maps.positioning.component.Positioning()
    ]
});
    
    //document.getElementById("mapdiv").style.height =(screen.height-320) + "px";
    //document.getElementById("sidebar").style.height =(screen.height-331) + "px";
    //document.getElementById("sidebar-content").style.height =(screen.height-331) + "px";
    //document.getElementById("left-shadow").style.height =(screen.height-320) + "px";
    //document.getElementById("right-shadow").style.height =(screen.height-320) + "px";
    //document.getElementById("bodyTable").style.height =(screen.height-285) + "px";
    //document.getElementById("Slider-PlottedSavedQueries").style.height =(screen.height-415) + "px";
    //document.getElementById("SQTree").style.height =(screen.height-416) + "px";
    //document.getElementById("tabs-nav").style.height =(screen.height-330) + "px";
    //document.getElementById("tab-queries").style.height =(screen.height-367) + "px"; 
    //document.getElementById("tab-directions").style.height =(screen.height-367) + "px"; 
    //document.getElementById("tab-legend").style.height =(screen.height-367) + "px";
    //document.getElementById("DirectionsInput").style.maxHeight =(screen.height-465) + "px";
    //document.getElementById("DirectionsOutput").style.maxHeight =(screen.height-460) + "px";
    //document.getElementById("DirectionsOutput").style.maxHeight =(screen.height-480) + "px";    
    
    //map.components.add(new nokia.maps.map.component.Overview());
    //map.components.add(new nokia.maps.map.component.Behavior());
    map.components.add(ZoomBar);
    map.components.add(ViewControl);
    //map.components.add(ZoomRectangle);
    map.components.add(ScaleBarComponent);
    map.components.add(InfoBubbles);

    nokia.maps.Config.setDefault("secureConnection", "prefer");
    
    MoveMapComponentsRight();
    
    g1StatusElement = document.getElementById("g1Status");
    g2StatusElement = document.getElementById("g2Status");
    g3StatusElement = document.getElementById("g3Status");
    g4StatusElement = document.getElementById("g4Status");
    
    g1StatusElement.innerHTML = "Idle";
    g2StatusElement.innerHTML = "Idle";
    g3StatusElement.innerHTML = "Idle";
    g4StatusElement.innerHTML = "Idle";
    
    //---- PATCH                
    //overwrite broken method with new one
    map.getBestZoomLevel = function (bBoxes) {
            var that = this,
                minZL = that.minZoomLevel,
                maxZL = that.maxZoomLevel,
                bestLevel = maxZL,
                currLevel = that.zoomLevel,
                level,
                topLeft,
                bottomRight,
                padding = that.padding,
                width = that.width,
                height = that.height,
                i = bBoxes.length,
                tmp,
                bBox,
                pixelProjection = that.baseMapType.pixelProjections[maxZL],
                util = nokia.maps.util,
                max = Math.max,
                min = Math.min,
                log = Math.log,
                ceil = Math.ceil,
                LN2 = Math.LN2;
                
            isNaN(i) && util._throwIllegalArgument();
            while (i-- && bestLevel) {
                level = currLevel;
                bBox = bBoxes[i];
                topLeft = pixelProjection.geoToPixel(bBox.topLeft);
                bottomRight = pixelProjection.geoToPixel(bBox.bottomRight);

                // Special case where the bBox size is 0 × 0 pixel
                if (topLeft.equals(bottomRight)) {
                    bottomRight.x++;
                    bottomRight.y++;
                }

                level = maxZL - ceil(max(
                    log(topLeft.x > bottomRight.x ? pixelProjection.w - topLeft.x + bottomRight.x  : bottomRight.x - topLeft.x) / LN2 -
                            log(width - padding.left - padding.right) / LN2,
                    log(bottomRight.y - topLeft.y) / LN2 -
                            log(height - padding.top - padding.bottom) / LN2
                ));
                if (level < bestLevel) {
                    bestLevel = level;
                }
            }
            return max(bestLevel, minZL);
        }
    // ------ END PATCH
    
    /*Initialize Notification Container*/
    $("#container").notify({
        speed: 200,
        expires: false
    });
           
    /*Initialize Tabs*/
    //$('#tabs-nav').tabs({remote:true}); 
    //$('#tabs-SavedQry').tabs({remote:true}); 
    
    
    $.getJSON("/apex/MAUserAJAXResources","action=get_user_prefs&id=" + UserId,function(json)
    { 
        if(json.success)
        {
            var record = removeNamespace('{!namespace}', json.record);
            
            Debug("User Query Result: " + record);
            
            IsCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            
            //extend our user settings object with these settings (will be used later)
            try {
                $.extend(userSettings, JSON.parse(record.MapAnythingSettings__c));
            }
            catch (err) { }
            
            if (record.MADefaultLatitude__c != null && record.MADefaultLongitude__c != null)
            {
                Debug("Setting Center Point");
                CenterLat = parseFloat(record.MADefaultLatitude__c);
                CenterLong = parseFloat(record.MADefaultLongitude__c);
                
                map.setCenter(new nokia.maps.geo.Coordinate(parseFloat(record.MADefaultLatitude__c),parseFloat(record.MADefaultLongitude__c)));
            }
            
            if (record.MAMaxQuerySize__c != null)
            {
                Debug("Setting Max Query Size");
                MaxQuerySize = parseInt(record.MAMaxQuerySize__c);
                
                if (MaxQuerySize > 10001)
                {
                    MaxQuerySize = 10000;    
                }
            }
            else
            {
                MaxQuerySize = 2000;
            }
            
            
            if (record.MADefaultZoomLevel__c != null)
            {
                Debug("Setting Default Zoom Level");
                DefaultZoomLevel = parseInt(record.MADefaultZoomLevel__c);
                map.setZoomLevel(parseInt(record.MADefaultZoomLevel__c));
            }
            
            if (record.AllowMapAnythingExports__c == 'false')
            {
                Debug("User Is Not Allowed to Export");
                //document.getElementById("ExportTab").className="tabs-container tabs-hide";
                $('#tabs-nav').tabs( "remove" , 2 );
                MaxExportSize = 0;
            }
            else
            {
                Debug("user is Allowed to Export");
                if (record.MAMaxExportSize__c == null)
                {
                    Debug("MAMaxExportSize__c is null");
                    MaxExportSize = 1000000;
                }
                else
                {
                    Debug("MAMaxExportSize__c is " + parseInt(record.MAMaxExportSize__c));
                    MaxExportSize = parseInt(record.MAMaxExportSize__c);
                }
                
            }
            
            if (record.DefaultProximityRadius__c == null)
            {
                document.getElementById("ProximityRadius").value = "50";
            }
            else
            {
                document.getElementById("ProximityRadius").value = record.DefaultProximityRadius__c;
            }
            
            if (record.PreferredTypeOfMeasurement__c == null)
            {
                ScaleBarComponent.set("showImperialUnits", true);
                document.getElementById("ProximityRadiusMeasurementType").value = "MILES";
            }
            else
            {
                var MesType = record.PreferredTypeOfMeasurement__c;
                
                if (MesType == "Miles" || MesType == "Feet" || MesType == "Yards")
                {
                    ScaleBarComponent.set("showImperialUnits", true);
                }
                else
                {
                    ScaleBarComponent.set("showImperialUnits", false);
                }
                
                document.getElementById("ProximityRadiusMeasurementType").value = MesType.toUpperCase();
            }
            
            //start the map at "My Position" (need to clean up the code above this that sets the position to the users "home")
            ShowHidePosition();
            
            OnUserLoadEventCompletd = true;
        }
        else
        {
            Debug("Error Querying User, " + json.error);
            DisplayPropertiesOfObject(json.error,0);
            HideLoadingDialog();
        }
    });
    
    
    
    DOMNode = nokia.maps.dom.EventTarget(map);
                
                
    CallBackFunction = function(oList ,method,element,idx )
        { 
            
            if (element["_type"] != "circle")
            {
        
                //Debug("method: " + method);
                if (method=="add")
                {
                    HideLoadingDialog();
                }
                else if (method=="remove")
                {
                    HideLoadingDialog();
                }
            }
        };
    
    map.objects.addObserver(CallBackFunction);
           
}

// JavaScript Document
function AddGeoCoderObservers()
{
   
    GeoCoder1IsRunning = false;
    GeoCoder2IsRunning = false;
    GeoCoder3IsRunning = false;
    GeoCoder4IsRunning = false;
    
    GeoCoder1.addObserver("state",
        function(observedManager, key, value) 
        {
            if(value == "finished") 
            {
                ProcessGeoCodeResults(GeoCodeList1.get(0),observedManager);
                GeoCodeList1.removeAt(0);
            }
            else if(value == "started") 
            {
                g1StatusElement.innerHTML = "Processing (" + GeoCodeList1.getLength() + ")";
            }
            else if(value == "failed") 
            {
                g1StatusElement.innerHTML = "Failed";
            }
        }
    );
       
    GeoCoder2.addObserver("state",
        function(observedManager, key, value) 
        {
            if(value == "finished") 
            {
                ProcessGeoCodeResults(GeoCodeList2.get(0),observedManager);
                GeoCodeList2.removeAt(0);
            }
            else if(value == "started") 
            {
                g2StatusElement.innerHTML = "Processing (" + GeoCodeList2.getLength() + ")";
            }
            else if(value == "failed") 
            {
                g2StatusElement.innerHTML = "Failed";
            }
        }
    );
        
    GeoCoder3.addObserver("state",
        function(observedManager, key, value) 
        {
            if(value == "finished") 
            {
                ProcessGeoCodeResults(GeoCodeList3.get(0),observedManager);
                GeoCodeList3.removeAt(0);
            }
            else if(value == "started") 
            {
                g3StatusElement.innerHTML = "Processing (" + GeoCodeList3.getLength() + ")";
            }
            else if(value == "failed") 
            {
                g3StatusElement.innerHTML = "Failed";
            }
        }
    );
       
    GeoCoder4.addObserver("state",
        function(observedManager, key, value) 
        {
            if(value == "finished") 
            {
                ProcessGeoCodeResults(GeoCodeList4.get(0),observedManager);
                GeoCodeList4.removeAt(0);
            }
            else if(value == "started") 
            {
                g4StatusElement.innerHTML = "Processing (" + GeoCodeList4.getLength() + ")";
            }
            else if(value == "failed") 
            {
                g4StatusElement.innerHTML = "Failed";
            }
        }
    );
       
       

     GeoCodeList1.addObserver(
         function(oList,method,element,idx)
         {
             if (method=="add")
             {
                 //Start GeoCoding
                 if (!GeoCoder1IsRunning)
                 {
                      GeoCoder1IsRunning = true;
                      g1StatusElement.innerHTML = "Starting";
                      GeoCoder1.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                 }
             }
             else if (method=="remove")
             {
                 GeoCoder1.clear();
                 if (oList.getLength() > 0)
                 {
                     GeoCoder1.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                 }
                 else
                 {
                     GeoCoder1IsRunning = false;
                     g1StatusElement.innerHTML = "Idle";
                     ObjectsToUpdateWithLatLongCleanUp();
                 }
             }
         }
     
     );
       
      GeoCodeList2.addObserver(
          function(oList,method,element,idx)
          {
              if (method=="add")
              {
                  if (!GeoCoder2IsRunning)
                  {
                       //Start GeoCoding
                       GeoCoder2IsRunning = true;
                       g2StatusElement.innerHTML = "Starting";
                       GeoCoder2.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                  }
              }
              else if (method=="remove")
              {
                  GeoCoder2.clear();
                  if (oList.getLength() > 0)
                  {
                      GeoCoder2.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                  }
                  else
                  {
                      GeoCoder2IsRunning = false;
                      g2StatusElement.innerHTML = "Idle";
                      ObjectsToUpdateWithLatLongCleanUp();
                  }
              }
          }
      
      );
       
      GeoCodeList3.addObserver(
          function(oList,method,element,idx)
          {
              
              if (method=="add")
              {
                  if (!GeoCoder3IsRunning)
                  {
                      GeoCoder3IsRunning = true;
                      //Start GeoCoding
                      g3StatusElement.innerHTML = "Starting";
                      GeoCoder3.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                  } 
              }
              else if (method=="remove")
              {
                  GeoCoder3.clear();
                  if (oList.getLength() > 0)
                  {
                      GeoCoder3.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                  }
                  else
                  {
                      GeoCoder3IsRunning = false;
                      g3StatusElement.innerHTML = "Idle";
                      ObjectsToUpdateWithLatLongCleanUp();
                  }
              }
          }
      
      );
      
      GeoCodeList4.addObserver(
          function(oList,method,element,idx)
          {
              if (method=="add")
              {
                   if (!GeoCoder4IsRunning)
                   {
                        //Start GeoCoding
                        GeoCoder4IsRunning = true;
                        g4StatusElement.innerHTML = "Starting";
                        GeoCoder4.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                   }
              }
              else if (method=="remove")
              {
                  GeoCoder4.clear();
                  if (oList.getLength() > 0)
                  {
                      GeoCoder4.geocode(GenerateSearchRequest(oList.get(0).MarkerAddress));
                  }
                  else
                  {
                      GeoCoder4IsRunning = false;
                      g4StatusElement.innerHTML = "Idle";
                      ObjectsToUpdateWithLatLongCleanUp();
                  }
              }
          }
         
      
    );
      
      
      

    RoutingGeoCodeIsRunning = false;
    
    RoutingGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    var WayPoint = RoutingGeoCodeList.get(0);
                    
                    Debug("Found Results - " + WayPoint.Index + " Length: " + observedManager.getLocations().length);
                    
                    
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']")
                            .find('input')
                            .addClass('GoodGeocodeForWaypoint')
                            .val(FormattedAddress);
                        
                        //Debug("Address: " + SearchResult.location.address);
    
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                
                        WayPoint.Lat = Latitude;
                        WayPoint.Long = Longitude;
                        WayPoint.WayPointTitle = FormattedAddress;
                        WayPoint.Address = FormattedAddress;
                        
                        WayPointArray[WayPoint.Index] = WayPoint;
                        //WayPointArray.push(WayPoint);
                        
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                    }
                    else
                    {
                        HasRoutingErrors = true;
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']").find('input').addClass('BadGeocodeForWaypoint');
                        NotifyError("Error GeoCoding Address","There was an error geocoding the follow address: " + WayPoint.Address);
                    }
                    
                    RoutingGeoCodeList.removeAt(0);
                }
                else if(value == "started") 
                {
                    //g1StatusElement.innerHTML = "Processing (" + GeoCodeList1.getLength() + ")";
                }
                else if(value == "failed") 
                {
                    //g1StatusElement.innerHTML = "Failed";
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
    
    
     RoutingGeoCodeList.addObserver(
         function(oList,method,element,idx)
         {
             if (method=="add")
             {
                 //Start GeoCoding
                 if (!RoutingGeoCodeIsRunning)
                 {
                    RoutingGeoCodeIsRunning = true;
                    //g1StatusElement.innerHTML = "Starting";
                    RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
             }
             else if (method=="remove")
             {
                 RoutingGeoCoder.clear();
                 if (oList.getLength() > 0)
                 {
                     RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
                 else
                 {
                    RoutingGeoCodeIsRunning = false;
                    ProcessWayPoints();
                 }
             }
         }
     
     );
     
     ProximityGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    Debug("Finished proximity GeoCode!");
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                                    
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                        
                        document.getElementById("ProximityAddress").value = FormattedAddress;
                        AddOval(Latitude,Longitude);
                    }
                    else
                    {
                        ChangeDivStatus("ProximityAddressStatus","<b>ERROR Geocoding</b>");
                    }
                }
                else if(value == "started") 
                {
                    ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
                }
                else if(value == "failed") 
                {
                    ChangeDivStatus("ProximityAddressStatus","Address Not Found!");
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
     
     
      
}
function GenerateSearchRequest(SearchText)
{
    /*
    var searchRequest = {
        searchText: PrepareAddressForGeoCode(SearchText),
        representationOptions:{
            language: ["en-US"],
            maxResults: 1,
            searchResponseAttributes: ["all"],
            addressAttributes:["all"]
        }
    };
    
    return searchRequest;
    */
    
    return PrepareAddressForGeoCode(SearchText);
}
function PrepareAddressForGeoCode(strAddress)
{
    return encodeURIComponent(strAddress);
}
function ObjectsToUpdateWithLatLongCleanUp()
{
if (GeoCodeList1.getLength() == 0 && 
        GeoCodeList2.getLength() == 0 && 
        GeoCodeList3.getLength() == 0 && 
        GeoCodeList4.getLength() == 0)
    {

        Debug("Executing ObjectsToUpdateWithLatLongCleanUp");
                
        for (var key in ObjectsToUpdateWithLatLong)
        {
            if (ObjectsToUpdateWithLatLong[key].length > 0)
            {
                //Debug("<br/>key: " + key);
                //Debug("ObjectsToUpdateWithLatLong[key].length: " + ObjectsToUpdateWithLatLong[key].length);
                //DisplayPropertiesOfObject(ObjectsToUpdateWithLatLong[key]);
                
                if(key != "remove")
                {                
                    var MyJSObject = {
                        action: 'save_lat_long', 
                        ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[key]
                    };
                                    
                    $.ajax({
                    url: 'MAGeoCodeAJAXResources?action=save_lat_long',
                    type: 'POST',
                    dataType: 'JSON',
                    data: { MyJSObject: JSON.stringify(MyJSObject) },
                    complete: function (response)
                    {
                        var obj = $.parseJSON(response.responseText);                      
                        
                        if(obj.success)
                        {
                            //Debug("Successfully saved objects.");
                            ObjectsToUpdateWithLatLong = new Array();
                        }
                        else
                        {
                            Debug("ObjectsToUpdateWithLatLongCleanUp Error " + obj.error);
                            HideLoadingDialog();
                        }
                    }
                    });
                }
            }
        }        
    }
    else
    {
        Debug("GeoCodeList1: " + GeoCodeList1.getLength());
        Debug("GeoCodeList2: " + GeoCodeList2.getLength());
        Debug("GeoCodeList3: " + GeoCodeList3.getLength());
        Debug("GeoCodeList4: " + GeoCodeList4.getLength());
    }
}
function SaveLatLong(lat,lng, data, pTp)
{
    //Check if Lat & Long Fields are Set
    if ( pTp.LongitudeField != null && pTp.LatitudeField != null && pTp.sObjectId != null && pTp.sObjectId != "")
    {  
        /*
        $.each(data.getLocations(), function(index, value) { 
            Debug("Index: " + index);
            DisplayPropertiesOfObject(value,0);
            DisplayPropertiesOfObject(value.mapView,0);
            DisplayPropertiesOfObject(value.address,0);
        });
        */     
       
        //var relevance = data.relevance;
        //var matchLevel = data.matchLevel;
        
        var LatLongJSObj = new Object();
        
        var SearchResult = data.getLocations()[0];
        LatLongJSObj.latitude = lat;
        LatLongJSObj.longitude = lng;
        LatLongJSObj.street = SearchResult.address.street;
        LatLongJSObj.city = SearchResult.address.city;
        LatLongJSObj.state = SearchResult.address.state;
        LatLongJSObj.country = SearchResult.address.country;
        LatLongJSObj.county = SearchResult.address.county ;
        LatLongJSObj.district = SearchResult.address.district;
        LatLongJSObj.postalcode = SearchResult.address.postalCode;
        LatLongJSObj.suite = SearchResult.address.suite;
        LatLongJSObj.floor = SearchResult.address.floor;
        LatLongJSObj.houseNumber = SearchResult.address.houseNumber;                       
        LatLongJSObj.compiledStreet = (LatLongJSObj.houseNumber != null ? LatLongJSObj.houseNumber + " " : "") + (LatLongJSObj.floor != null ? "Floor - " + LatLongJSObj.floor + " " + ", " : "") + (LatLongJSObj.street != null ? LatLongJSObj.street + " " : "") + (LatLongJSObj.suite != null ? "Suite - " + LatLongJSObj.suite : ""); 
        LatLongJSObj.pTp = pTp;
        
        var HasUpdates = false;
        
        if ((pTp.LatitudeField != null && pTp.LatitudeField != "") || (pTp.LongitudeField != null && pTp.LongitudeField != "") || (pTp.CleanStreet != null && pTp.CleanStreet != "") 
            || (pTp.CleanCity != null && pTp.CleanCity != "") || (pTp.CleanState != null && pTp.CleanState != "") || (pTp.CleanCounty != null && pTp.CleanCounty != "") 
            || (pTp.CleanCountry != null && pTp.CleanCountry != "") || (pTp.CleanDistrict != null && pTp.CleanDistrict != "") || (pTp.CleanPostalCode != null && pTp.CleanPostalCode != ""))
        {
            HasUpdates = true;
        }
        
        if (HasUpdates)
        {
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject] == null)
            {
                ObjectsToUpdateWithLatLong[pTp.BaseObject] = new Array();
            }
            
            ObjectsToUpdateWithLatLong[pTp.BaseObject].push(LatLongJSObj);
            
            //Debug("ObjectsToUpdateWithLatLong[" + pTp.BaseObject + "]: " + ObjectsToUpdateWithLatLong[pTp.BaseObject].length);            
            //Debug("ObjectsToUpdateWithLatLong: " + ObjectsToUpdateWithLatLong.length);
    
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject].length  >= pTp.BatchAmount)
            {
                Debug("Above Batch Size (" + ObjectsToUpdateWithLatLong[pTp.BaseObject].length + ")");
                
                var MyJSObject = {
                    action: 'save_lat_long',                
                    ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[pTp.BaseObject]
                };
                
                $.ajax({
                url: 'MAGeoCodeAJAXResources?action=save_lat_long',
                type: 'POST',
                dataType: 'JSON',
                data: { MyJSObject: JSON.stringify(MyJSObject) },
                complete: function (response)
                {
                    var obj = $.parseJSON(response.responseText);                      
                    
                    if(obj.success)
                    {
                        //Debug("Successfully saved Lat/Long.");                        
                    }
                    else
                    {
                        NotifyError("Error Saving Lat/Long",obj.error);
                        Debug("Error Saving Lat/Long " + obj.error);
                        HideLoadingDialog();
                    }
                }
                }); 
                
                ObjectsToUpdateWithLatLong[pTp.BaseObject]= new Array();
            }
            else
            {
                //Debug("Not above batch size (" + pTp.BatchAmount + ")");
            }
        }
    }
    else
    {
        Debug("Missing Lat/Long Field");
    }
}
function ReportBadGeoCode(mAddress,lat,long)
{
    try
    {
        var ToAddresses = new Array();
        ToAddresses.push('dkraun@cloudbilt.com');
        
        var sBody = "<InvalidLatLong>";        
            sBody += "<OrgId>[OrgId]</OrgId>";
            sBody += "<OrgName>[OrgName]</OrgName>";
            sBody += "<Address>" + mAddress + "</Address>";
            sBody += "<Latitude>" + lat + "</Latitude>";
            sBody += "<Longitude>" + long + "</Longitude>";
        sBody += "</InvalidLatLong>";
    
        var MyJSObject = {
                action: 'report_bad_geocode',
                replyTo: UserEmailAddress,
                subject: 'Bad GeoCode',
                htmlBody: sBody,
                toAddresses: ToAddresses
        };
        
        $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                alert("Thank You! Your email has been submitted.");
            }
            else
            {
                NotifyError("Error Reporting Bad GeoCode",obj.error);
                Debug("Error Reporting Bad GeoCode " + obj.error);
            }
        }
        });
    }
    catch(error)
    {
        alert("Error Sending Email, " + error.faultcode);
    }
}
function CreateMarkerFromGeoCodeingFunction(pTp)
{
    //Debug("CreateMarkerFromGeoCodeingFunction");
    
    if (ProcessedSavedQueries[pTp.QryId] != null)
    {

        var marker = CreateMarkerFromPointToPoint(pTp);
        
        ProcessedSavedQueries[pTp.QryId].AddMarker(marker);
        
        var IsVisible = false;
        
        if (pc_Added)
        {
            if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
            {
                IsVisible = true;
            }
        }
        else
        {
            IsVisible = true;
        }
        
        

    
        if (IsVisible)
        {
            map.objects.add(marker);
            ProcessedSavedQueries[pTp.QryId].AddVisibleMarker(marker);
            ProcessedSavedQueries[pTp.QryId].UpdateVisibleMarkersCount();
            //Debug("VisibleMarkersCount: " + ProcessedSavedQueries[pTp.QryId].VisibleMarkersCount);
            
            //$('#' +pTp.QryId + "_Count").html(ProcessedSavedQueries[pTp.QryId].VisibleMarkersCount);
        }
        
        ProcessedSavedQueries[pTp.QryId].SetProccessingStatus();
    }
    
}
function ProcessGeoCodeResults(pTp, data)
{
    if (data.getLocations().length > 0) 
    {   
        var loc = data.getLocations()[0];
        
        var Latitude = loc.displayPosition.latitude;
        var Longitude = loc.displayPosition.longitude;

        pTp.markerLatitude = pTp.Latitude = Latitude;
        pTp.markerLongitude = pTp.Longitude = Longitude;
        
        Debug("Latitude: " + Latitude);
        Debug("Longitude: " + Longitude);
        Debug("pTp.LatitudeField: " + pTp.LatitudeField);
        Debug("pTp.LongitudeField: " + pTp.LongitudeField);
        
        SaveLatLong(Latitude,Longitude, data, pTp);
        
        CreateMarkerFromGeoCodeingFunction(pTp);
    }
    else
    {
        AddToMissingAddressesTab(pTp,"Unable to Locate Address");
    }
}       

// JavaScript Document

/*

    Point to Plot (pTp)
    
    //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
    pTp.MarkerAddress   = MarkerAddress;
    ptp.FormatedMarkerAddress
    pTp.MarkerStreet    = aStreetResult;
    pTp.MarkerCity      = aCityResult;
    pTp.MarkerState     = aStateResult;
    pTp.MarkerZip       = aZipResult;
    pTp.MarkerCountry   = aCountryResult;
    

    pTp.ToolTip2L       = ToolTip2.FieldLabel;
    pTp.ToolTip3L       = ToolTip3.FieldLabel;
    pTp.ToolTip4L       = ToolTip4.FieldLabel;
    pTp.ToolTip5L       = ToolTip5.FieldLabel;
    pTp.ToolTip6L       = ToolTip6.FieldLabel;
    pTp.ToolTip7L       = ToolTip7.FieldLabel;
    
    pTp.ToolTip1V       = ToolTip1.Value;
    pTp.ToolTip2V       = ToolTip2.Value;
    pTp.ToolTip3V       = ToolTip3.Value;
    pTp.ToolTip4V       = ToolTip4.Value;
    pTp.ToolTip5V       = ToolTip5.Value;
    pTp.ToolTip6V       = ToolTip6.Value;
    pTp.ToolTip7V       = ToolTip7.Value;
    
    pTp.ImageURL        = ImageURL;
    pTp.sObjectId       = record.Id;
    pTp.Latitude        = GetAddressFieldResults(record,Latitude); //record.Latitude;
    pTp.Longitude       = GetAddressFieldResults(record,Longitude); //record.Longitude;
    pTp.LatitudeField   = Latitude;
    pTp.LongitudeField  = Longitude;
    pTp.BaseObject      = BaseObject;
    pTp.BatchAmount     = SavedQryJSObj.BatchAmount;
    pTp.queryName       = SavedQryJSObj.SavedQryName;
    pTp.QryId           = QryId;
    pTp.IconColor       = IconColor;
    
    pTp.CleanCity       = CleanCity;
    pTp.CleanStreet     = CleanStreet;
    pTp.CleanCounty     = CleanCounty;
    pTp.CleanDistrict   = CleanDistrict;
    pTp.CleanState      = CleanState;   
    pTp.CleanPostalCode = CleanPostalCode;
    pTp.CleanCountry    = CleanCountry;
    pTp.CleanQuality    = CleanQuality;
    pTp.CleanSimilarity = CleanSimilarity;
    pTp.MarkerIconText  = text;
    pTp.ContentKey      = ContentKey;
    pTp.RecordId        = record.Id;
    pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
    pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
    pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
    pTp.PicklistFieldValue = PicklistFieldValue;
    
    RelatedListCount
    
    
    title:  ToolTip1.Value,
            visibility: true,
            brush:IconColor,
            Ignore: false, 
            SavedQryId: QryId,
            Lat: rLatitude,
            Long: rLongitude,
            pContentKey: ContentKey,
            MarkerAddress: MarkerAddress,
            RecordId: record.Id,
            ToolTip2Label: ToolTip2.FieldLabel,
            ToolTip3Label: ToolTip3.FieldLabel,
            ToolTip4Label: ToolTip4.FieldLabel,
            ToolTip5Label: ToolTip5.FieldLabel,
            ToolTip6Label: ToolTip6.FieldLabel,
            ToolTip7Label: ToolTip7.FieldLabel,
            ToolTip1Value: ToolTip1.Value,
            ToolTip2Value: ToolTip2.Value,
            ToolTip3Value: ToolTip3.Value,
            ToolTip4Value: ToolTip4.Value,
            ToolTip5Value: ToolTip5.Value,
            ToolTip6Value: ToolTip6.Value,
            ToolTip7Value: ToolTip7.Value,
            NumberFieldFieldLabel: SavedQryJSObj.NumberFieldFieldLabel,
            NumberFieldFieldValue: FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,""),
            PicklistFieldFieldLabel: SavedQryJSObj.PicklistFieldFieldLabel,
            PicklistFieldFieldValue:FormatsObjectValue(PicklistFieldValue,SavedQryJSObj.PicklistFieldFieldType,""),
            PicklistFieldValue: ((PicklistFieldValue == null) ? null : PicklistFieldValue.replace(/\s/g,"")),
            
        
    Point to Plot (pTp)
    
    

*/

function FormatPicklistFieldValue(str)
{
    return  ((str == null) ? null : str.replace(/\s/g,""));
}

function CheckIn(pMarker, callback)
{ 
    //DisplayPropertiesOfObject(pMarker,0);
    
    //Marker Lat/Long
        //pMarker.Lat
        //pMarker.Long
    //GeoLocation lat/long
        //coords.latitude   
        //coords.longitude
    
    PositioningMgr.getCurrentPosition(
        function (position) {

            //calculate the distance between the marker that was clicked and the current location and then check in
            var distance = new nokia.maps.geo.Coordinate(parseFloat(pMarker.Lat), parseFloat(pMarker.Long)).distance(new nokia.maps.geo.Coordinate(position.coords.latitude, position.coords.longitude));
            $.getJSON("/apex/MATooltipAJAXResources","action=check_in&SavedQueryId=" + pMarker.SavedQryId + "&id=" + UserId + "&lid=" + pMarker.pTp.RecordId + "&tooltip1=" + pMarker.pTp.ToolTip1V + "&clat=" + position.coords.latitude + "&clong=" + position.coords.longitude + "&caccuracy=" + position.coords.accuracy + "&length=" + distance,function(json)
            { 
                if(json.success)
                {
                    NotifyError("Successfully checked in!", '');
                    Debug('Checked in to: ' + json.id);
                    try { callback(json.taskId); } catch (err) { console.log('Unable to perform check in callback: ' + err); }
                }
                else
                {
                    NotifyError("Error Checking In",json.error);
                    Debug("Error Checking In " + json.error);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                Debug("<b>Error Checking In</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Checking In",textStatus + " : " + errorThrown); 
            });              
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            NotifyError("Error Getting Position",errorMsg);
        }
    );
}

function CheckOut(pMarker, checkInId, callback)
{
    PositioningMgr.getCurrentPosition(
        function (position) {

            //calculate the distance between the marker that was clicked and the current location and then check in
            var requestData = {
                action      : 'check_out',
                checkInId   : checkInId,
                clat        : position.coords.latitude,
                clong       : position.coords.longitude,
                caccuracy   : position.coords.accuracy,
                distance    : new nokia.maps.geo.Coordinate(parseFloat(pMarker.Lat), parseFloat(pMarker.Long)).distance(new nokia.maps.geo.Coordinate(position.coords.latitude, position.coords.longitude)),
            };
            $.getJSON("/apex/MATooltipAJAXResources", requestData, function(response)
            { 
                if(response.success)
                {
                    NotifyError("Successfully checked out!", '');
                    Debug('Checked out of: ' + response.taskId);
                    try { callback(response.taskId); } catch (err) { console.log('Unable to perform check out callback: ' + err); }
                }
                else
                {
                    NotifyError("Error Checking Out",response.error);
                    Debug("Error Checking Out " + response.error);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                Debug("<b>Error Checking Out</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Checking Out",textStatus + " : " + errorThrown); 
            });             
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            NotifyError("Error Getting Position",errorMsg);
        }
    );
}

function RemoveMarker(pMarker)
{
    //Debug("Address: " + pMarker.MarkerAddress);
    //DisplayPropertiesOfObject(pMarker,0);
    
    Debug("Removing Marker");
    Debug("Address: " + pMarker.pTp.MarkerAddress);
    
    map.objects.remove(pMarker);    
    ProcessedSavedQueries[pMarker.pTp.QryId].RemoveMarker(pMarker);
}

function SetVerifiedLocation(pMarker)
{
    PositioningMgr.getCurrentPosition(
        function (position) {

            //send request to update the verified lat/long for this record
            var requestData = {
                action          : 'set_verified_location',
                baseObjectId    : ProcessedSavedQueries[pMarker.SavedQryId].BaseObjectId,
                recordId        : pMarker.pTp.RecordId,
                latitude        : position.coords.latitude,
                longitude       : position.coords.longitude
            };
            $.getJSON("/apex/MATooltipAJAXResources", requestData, function(response)
            { 
                if(response.success)
                {
                    //update the verified latitude and longitude on this marker
                    pMarker.Lat = pMarker.pTp.markerLatitude = pMarker.pTp.verifiedLatitude = position.coords.latitude;
                    pMarker.Long = pMarker.pTp.markerLongitude = pMarker.pTp.verifiedLongitude = position.coords.longitude;
                    
                    //move the marker
                    pMarker.set('coordinate', new nokia.maps.geo.Coordinate(pMarker.Lat, pMarker.Long));
                }
                else
                {
                    //show error
                    NotifyError('Error', 'Unable to set verified location');
                }
            })
            .error(function() { 
                NotifyError('Error', 'Unable to set verified location'); 
            });             
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            NotifyError("Error Getting Position",errorMsg);
        }
    );
}

function CreateMarkerFromPointToPoint(pTp)
{
    var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(pTp.markerLatitude), parseFloat(pTp.markerLongitude));
               
    var markerOptions = {
            title: pTp.ToolTip1V,
            visibility: true,
            brush:pTp.IconColor,
            Ignore: false, 
            SavedQryId: pTp.QryId,
            Lat: pTp.markerLatitude,
            Long: pTp.markerLongitude,
            PicklistFieldValue: FormatPicklistFieldValue(pTp.PicklistFieldValueEncoded),
            pTp: pTp,
            text: pTp.MarkerIconText,
            eventListener: {
               "click": [function()
                           {
                               InfoBubbles.addBubble(ProduceMarkerContent(this), new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));                               
                               
                               //show/hide action buttons based on permissions
                               if (userSettings.EnabledActionButtons) 
                               {
                                    $('#MarkerActionButtons .actionbutton').hide();
                                    $.each(userSettings.EnabledActionButtons, function (index, buttonLabel) {
                                        $('#MarkerActionButtons .actionbutton[data-label="'+buttonLabel+'"]').show();
                                    });
                               }
                               
                               //hide buttons based on query metadata
                               var queryMetadata = ProcessedSavedQueries[this.pTp.QryId];
                               if (!queryMetadata.SupportsActivities)
                               {
                                    //hide activity buttons
                                    $('#MarkerActionButtons .actionbutton.activitybutton').hide();
                               }
                               if (!queryMetadata.SupportsChatter && !queryMetadata.SupportsActivities)
                               {
                                    //hide activity buttons
                                    $('#MarkerActionButtons .actionbutton.chatteractivitybutton').hide();
                               }
                               if (!queryMetadata.SupportsVerifiedLocations)
                               {
                                    //hide verified location buttons
                                    $('#MarkerActionButtons .actionbutton.verifiedlocationbutton').hide();
                               }
                               var OuterObj = this;
                               
                               //update check in button to check out if already checked in
                               if (OuterObj.pTp.Tasks)
                               {
                                    $.each(OuterObj.pTp.Tasks.records, function (index, task) {
                                        if (!task.IsClosed)
                                        {
                                            $('#CheckIn-' + OuterObj.pTp.ContentKey).data('CheckInId', task.Id).text('Check Out');
                                            return false;
                                        }
                                    });
                               }
                                
                               $('#AddToTrip-' + this.pTp.ContentKey).click(function() {
                                    AddMarkerToTrip(OuterObj);
                                    ShowDirectionsTab();
                                    HideBubbles();
                                });
                                
                                $('#SetProxCenter-' + this.pTp.ContentKey).click(function() {
                                    AddOval(OuterObj.Lat,OuterObj.Long);
                                    $('#ProximityAddress').val(OuterObj.pTp.MarkerAddress); //this should really happen at the end of AddOval, but this is easier for now
                                    HideBubbles();
                                });
                                
                                $('#RemoveMarker-' + this.pTp.ContentKey).click(function() {
                                    RemoveMarker(OuterObj);
                                    HideBubbles();
                                });
                                $('#CheckIn-' + this.pTp.ContentKey).click(function() {
                                    var $checkInButton = $(this);
                                    if ($checkInButton.data('CheckInId')) {
                                        CheckOut(OuterObj, $checkInButton.data('CheckInId'), function (CheckInId) {
                                            $checkInButton.data('CheckInId', null).text('Check In');
                                            
                                            //update this check in record in the raw plot data
                                            $.each(OuterObj.pTp.Tasks.records, function (index, task) {
                                                if (task.Id == CheckInId)
                                                {
                                                    task.IsClosed = true;
                                                    return false;
                                                }
                                            });
                                        });
                                    }
                                    else {
                                        var $checkOutButton = $(this);
                                        CheckIn(OuterObj, function (CheckInId) {
                                            if (CheckInId) {
                                                $checkOutButton.data('CheckInId', CheckInId).text('Check Out');
                                                
                                                //add this check in record to the raw plot data
                                                if (!OuterObj.pTp.Tasks) { OuterObj.pTp.Tasks = {records: []}; }
                                                OuterObj.pTp.Tasks.records.push({
                                                    Id: CheckInId, 
                                                    IsClosed: false
                                                });
                                            }
                                        });
                                    }
                                    HideBubbles();
                                });
                                $('#SetVerifiedLocation-' + this.pTp.ContentKey).click(function() {
                                     SetVerifiedLocation(OuterObj);
                                     HideBubbles();
                                });
                                
                                //custom action buttons
                                $('.customactionbutton').click(function () {
                                    var pageName = $(this).attr('data-value');
                                    var buttonText = $(this).text();
                                    PositioningMgr.getCurrentPosition(
                                        function (position) {
                                            
                                            HideBubbles();
                                            window.open('https://na15.salesforce.com/apex/' + pageName + 
                                                '?Button=' + buttonText + 
                                                '&RecordId=' + OuterObj.pTp.RecordId + 
                                                '&Latitude=' + position.coords.latitude + 
                                                '&Longitude=' + position.coords.longitude +
                                                '&Accuracy=' + position.coords.accuracy +
                                                '&Distance=' + new nokia.maps.geo.Coordinate(parseFloat(OuterObj.pTp.markerLatitude), parseFloat(OuterObj.pTp.markerLongitude)).distance(new nokia.maps.geo.Coordinate(position.coords.latitude, position.coords.longitude))
                                            );
                                                        
                                        }, 
                                        function (error) {
                                            var errorMsg = "Location could not be determined: ";
                                
                                            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
                                            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
                                            else if (error.code == 3) errorMsg += "TIMEOUT";
                                            else errorMsg += "UNKNOWN_ERROR";
                                            NotifyError("Error Getting Position",errorMsg);
                                        }
                                    );
                                });
                                
                                if (this.pTp.RelatedListCount > 0)
                                {
                                    $("#ajax-" + this.pTp.ContentKey)
                                        .html('Loading')
                                        .load('MAPopupRelatedListInformation',"parentid=" + this.pTp.RecordId + '&sqid=' + this.pTp.QryId );  
                                }
                           }
                       , false, null],
               "tap": [function()
                           {
                               InfoBubbles.addBubble(ProduceMarkerContent(this), new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));                               
                               
                               //show/hide action buttons based on permissions
                               if (userSettings.EnabledActionButtons) 
                               {
                                    $('#MarkerActionButtons .actionbutton').hide();
                                    $.each(userSettings.EnabledActionButtons, function (index, buttonLabel) {
                                        $('#MarkerActionButtons .actionbutton[data-label="'+buttonLabel+'"]').show();
                                    });
                               }
                               
                               //hide buttons based on query metadata
                               var queryMetadata = ProcessedSavedQueries[this.pTp.QryId];
                               if (!queryMetadata.SupportsActivities)
                               {
                                    //hide activity buttons
                                    $('#MarkerActionButtons .actionbutton.activitybutton').hide();
                               }
                               if (!queryMetadata.SupportsChatter && !queryMetadata.SupportsActivities)
                               {
                                    //hide activity buttons
                                    $('#MarkerActionButtons .actionbutton.chatteractivitybutton').hide();
                               }
                               if (!queryMetadata.SupportsVerifiedLocations)
                               {
                                    //hide verified location buttons
                                    $('#MarkerActionButtons .actionbutton.verifiedlocationbutton').hide();
                               }
                               var OuterObj = this;
                               
                               //update check in button to check out if already checked in
                               if (OuterObj.pTp.Tasks)
                               {
                                    $.each(OuterObj.pTp.Tasks.records, function (index, task) {
                                        if (!task.IsClosed)
                                        {
                                            $('#CheckIn-' + OuterObj.pTp.ContentKey).data('CheckInId', task.Id).text('Check Out');
                                            return false;
                                        }
                                    });
                               }
                                
                               $('#AddToTrip-' + this.pTp.ContentKey).click(function() {
                                    AddMarkerToTrip(OuterObj);
                                    ShowDirectionsTab();
                                    HideBubbles();
                                });
                                
                                $('#SetProxCenter-' + this.pTp.ContentKey).click(function() {
                                    AddOval(OuterObj.Lat,OuterObj.Long);
                                    HideBubbles();
                                });
                                
                                $('#RemoveMarker-' + this.pTp.ContentKey).click(function() {
                                    RemoveMarker(OuterObj);
                                    HideBubbles();
                                });
                                $('#CheckIn-' + this.pTp.ContentKey).click(function() {
                                    var $checkInButton = $(this);
                                    if ($checkInButton.data('CheckInId')) {
                                        CheckOut(OuterObj, $checkInButton.data('CheckInId'), function (CheckInId) {
                                            $checkInButton.data('CheckInId', null).text('Check In');
                                            
                                            //update this check in record in the raw plot data
                                            $.each(OuterObj.pTp.Tasks.records, function (index, task) {
                                                if (task.Id == CheckInId)
                                                {
                                                    task.IsClosed = true;
                                                    return false;
                                                }
                                            });
                                        });
                                    }
                                    else {
                                        var $checkOutButton = $(this);
                                        CheckIn(OuterObj, function (CheckInId) {
                                            if (CheckInId) {
                                                $checkOutButton.data('CheckInId', CheckInId).text('Check Out');
                                                
                                                //add this check in record to the raw plot data
                                                if (!OuterObj.pTp.Tasks) { OuterObj.pTp.Tasks = {records: []}; }
                                                OuterObj.pTp.Tasks.records.push({
                                                    Id: CheckInId, 
                                                    IsClosed: false
                                                });
                                            }
                                        });
                                    }
                                    HideBubbles();
                                });
                                $('#SetVerifiedLocation-' + this.pTp.ContentKey).click(function() {
                                     SetVerifiedLocation(OuterObj);
                                     HideBubbles();
                                });
                                
                                //custom action buttons
                                $('.customactionbutton').click(function () {
                                    var pageName = $(this).attr('data-value');
                                    var buttonText = $(this).text();
                                    PositioningMgr.getCurrentPosition(
                                        function (position) {
                                            
                                            HideBubbles();
                                            window.open('https://na15.salesforce.com/apex/' + pageName + 
                                                '?Button=' + buttonText + 
                                                '&RecordId=' + OuterObj.pTp.RecordId + 
                                                '&Latitude=' + position.coords.latitude + 
                                                '&Longitude=' + position.coords.longitude +
                                                '&Accuracy=' + position.coords.accuracy +
                                                '&Distance=' + new nokia.maps.geo.Coordinate(parseFloat(OuterObj.pTp.markerLatitude), parseFloat(OuterObj.pTp.markerLongitude)).distance(new nokia.maps.geo.Coordinate(position.coords.latitude, position.coords.longitude))
                                            );
                                                        
                                        }, 
                                        function (error) {
                                            var errorMsg = "Location could not be determined: ";
                                
                                            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
                                            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
                                            else if (error.code == 3) errorMsg += "TIMEOUT";
                                            else errorMsg += "UNKNOWN_ERROR";
                                            NotifyError("Error Getting Position",errorMsg);
                                        }
                                    );
                                });
                                
                                if (this.pTp.RelatedListCount > 0)
                                {
                                    $("#ajax-" + this.pTp.ContentKey)
                                        .html('Loading')
                                        .load('MAPopupRelatedListInformation',"parentid=" + this.pTp.RecordId + '&sqid=' + this.pTp.QryId );  
                                }
                           }
                       , false, null]
               }
        };
    
    if (pTp.IconColor && pTp.IconColor.indexOf('image:') == 0)
    {
        delete markerOptions.brush;
        
        //var truncatedImgId = pTp.IconColor.split('image:')[1].substr(0, 15);
        if (imgLoaderDimensions[pTp.IconColor.split('image:')[1]]) {
            $.extend(markerOptions, {
                icon: '/servlet/servlet.FileDownload?file=' + pTp.IconColor.split('image:')[1],
                anchor: new nokia.maps.util.Point(
                    Math.floor(imgLoaderDimensions[pTp.IconColor.split('image:')[1]].width / 2), 
                    imgLoaderDimensions[pTp.IconColor.split('image:')[1]].height
                )
            });
            return new nokia.maps.map.Marker(MarkerCoordinate, markerOptions);
        }
    }
    
    return new nokia.maps.map.StandardMarker(MarkerCoordinate, markerOptions);
}
                                            


function ProcessedSavedQry(pQryId)
{
    this.QryId = pQryId;
    
    this.AllMarkersArray = new Array();
    this.VisibleMarkersArray = new Array();
    
    this.LegendArray = new Array();
    this.VisibleLegendEntries = new Array();
    
    this.ExpectedMarkersCount   = 0;
    this.ProcessedMarkersCount  = 0;
    this.VisibleMarkersCount    = 0;
    this.AddressesNotFound      = 0;
    
    this.ToolTip1Label  = '';       
    this.ToolTip2Label  = '';
    this.ToolTip3Label  = '';
    this.ToolTip4Label  = '';
    this.ToolTip5Label  = '';
    this.ToolTip6Label  = '';
    this.ToolTip7Label  = '';
    
    var $VisibleMarkersCountElement = null;
    
    this.SavedQueryName         = ''; /*Currently Not Used*/
    
    this.CompletedProcessing        = false;
    this.LegendObject = new Object();
    
    $('#' + this.QryId + "_Stats").show();
    
    this.UpdateVisibleMarkersCount = function ()
        {
            if ($VisibleMarkersCountElement == null)
            {
                $VisibleMarkersCountElement = $('#' + this.QryId + "_Count");
            }
            
            $VisibleMarkersCountElement.html(this.VisibleMarkersCount);
            
        }
    
    this.ShowAllMarkers = function()
        {
            //Remove Visible Markers
            var OuterObj = this;
            
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.remove(value);                        
            });
                        
            this.VisibleMarkersArray = this.AllMarkersArray;
            this.VisibleMarkersCount = this.VisibleMarkersArray.length;
            
            map.objects.addAll(this.VisibleMarkersArray);
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
        }
    
    this.ChangeDoToProximityCircle = function(CenterPoint, Radius)
        {
            //Remove Visible Markers
            var OuterObj = this;
            
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.remove(value);                        
            });
            
            //Set Variables back to 0 and Blank
            this.VisibleMarkersArray = new Array();
            this.VisibleMarkersCount    = 0;
            
            //Loop Though All Markers and Add to Visible Markers Array
            $.each(this.AllMarkersArray, function(index, value) { 
                
                if (value["coordinate"].distance(CenterPoint) <= Radius)
                {
                    OuterObj.VisibleMarkersArray.push(value);
                }
                
            });
            
            this.VisibleMarkersCount = this.VisibleMarkersArray.length;
            
            if (this.VisibleMarkersCount > 0)
            {
                map.objects.addAll(this.VisibleMarkersArray);
            }
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
            
        }
    
    this.RemoveLegendMarkers = function(LegendValue)
        {
            Debug("Running RemoveLegendMarkers for Legend Value (" + LegendValue + ")");
            
            var TempVisibleMarkersArray = new Array();
            $.each(this.VisibleMarkersArray, function(index, value) { 
                
                if (value["PicklistFieldValue"] != null)
                {
                    if (value["PicklistFieldValue"] == LegendValue)
                    {
                        map.objects.remove(value);
                    }
                    else
                    {
                        TempVisibleMarkersArray.push(value);
                    }
                }
            });
            
            this.VisibleMarkersArray = TempVisibleMarkersArray;
            this.VisibleMarkersCount = this.VisibleMarkersArray.length;
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
        }
    this.AddLegendMarkers = function(LegendValue)
        {
            try
            {
                Debug("Running AddLegendMarkers for Legend Value (" + LegendValue + ")");
                var OuterObj = this;
                $.each(this.AllMarkersArray, function(index, value) {                     
                    
                    if (value["PicklistFieldValue"] != null)
                    {
                        if (value["PicklistFieldValue"] == LegendValue)
                        {
                            if (pc_Added)
                            {
                                var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(this.pTp.markerLatitude), parseFloat(this.pTp.markerLongitude));
                                if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
                                {
                                    map.objects.add(value);
                                    OuterObj.VisibleMarkersArray.push(value);
                                    OuterObj.VisibleMarkersCount++;
                                }
                            }
                            else
                            {
                                map.objects.add(value);
                                OuterObj.VisibleMarkersArray.push(value);
                                OuterObj.VisibleMarkersCount++;
                            }                        
                        }
                    }
                });
                
                this.UpdateVisibleMarkersCount();
                //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
            }
            catch (e)
            {
                Debug("Error1 :" + e.message);
                HideLoadingDialog();
            }
        }
    
    this.AddMarker = function(MarkerToAdd)
        {
            this.AllMarkersArray.push(MarkerToAdd);
            this.ProcessedMarkersCount++;
        }
        
    this.AddVisibleMarker = function(MarkerToAdd)
        {
            this.VisibleMarkersArray.push(MarkerToAdd);
            this.VisibleMarkersCount++;
        }
        
    this.SetExpectedMarkersCount = function(count)
        {
            Debug("SetExpectedMarkersCount");
            $('#' + this.QryId + "_Stats").show();
            if (count > MaxQuerySize)
            {
                document.getElementById(this.QryId + "_Total").innerHTML = '<span style="color:red;">' + MaxQuerySize + '+</span> (' + ((count > 10000) ? '10000+' : count) + ')';
                this.ExpectedMarkersCount = MaxQuerySize;
            }
            else
            {
                document.getElementById(this.QryId + "_Total").innerHTML = count;
                this.ExpectedMarkersCount = count;
            }
        }
        
    this.SetProccessingStatus = function()
        {
            if (this.CompletedProcessing)
            {
                Debug("Already Completed Processing " + this.QryId);
            }
            else
            {
                //Debug("SetProccessingStatus - ExpectedMarkersCount: " + this.ExpectedMarkersCount);
                //Debug("SetProccessingStatus - ProcessedMarkersCount: " + this.ProcessedMarkersCount);
                
                if (this.ProcessedMarkersCount >= this.ExpectedMarkersCount)
                {
                    //Done Processing
                    Debug("<b>Done Processing " + this.QryId + "</b>");
                    UpdatePlottingStatus(this.QryId,"Done");
                    
                    //Check to see if there are "Addresses Not Found"
                    if (this.AddressesNotFound > 0)
                    {
                        $("#container").notify("create", "Warning-Template", 
                                               {
                                                   title: 'Warning',
                                                   text: 'Done Processing, ' + this.AddressesNotFound +' Bad Addresses. <a onclick="ShowAddressNotFoundPopup();">Display Addresses Not Found</a>'
                                               },
                                               {
                                                    expires: 5000,
                                                    speed: 1000
                                                }
                                            );  
                    }
                    
                    this.CompletedProcessing = true;
                    
                }
                else
                {
                    //Still Processing  
                    //Debug("Still Processing " + this.QryId + " (" + this.ProcessedMarkersCount + "/" +  this.ExpectedMarkersCount + ")");
                }
            }
        }
        
    this.RemoveAllMarkers = function()
        {
            $.each(this.VisibleMarkersArray, 
                function(index, value) {
                    map.objects.remove(value);
                }
            );  
            
        }
        
    this.RemoveMarker = function(MarkerToRemove)
        {           
            var index = this.VisibleMarkersArray.indexOf(MarkerToRemove);
            this.VisibleMarkersArray.splice(index,1);
            this.VisibleMarkersCount--;
            
            index = this.AllMarkersArray.indexOf(MarkerToRemove);
            this.AllMarkersArray.splice(index,1);
            this.ProcessedMarkersCount--;            
            
            this.UpdateVisibleMarkersCount();
        }
        
    this.PlotVisibleMarkers = function()
        {
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
            
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.add(value);
            });
        }
}

function RemoveSavedQuery(SavedQueryId)
{
    try
    {
        Debug("Executing RemoveSavedQuery (" + SavedQueryId + ")");
    
        if (ProcessedSavedQueries[SavedQueryId] != null)
        {
            ProcessedSavedQueries[SavedQueryId].RemoveAllMarkers();
        }      
        
        //Clear Legend Tab
        if (PlottedLegendSavedQryId != null)
        {
            if (PlottedLegendSavedQryId == SavedQueryId)
            {
                $('#LegendDiv').html("");
                $('#LegendInformation').html("");
                PlottedLegendSavedQryId = "";
            }
        }
        
        //Change Icon on LI
        
        //Debug('SavedQueryId li: ' + $('li[id="' + SavedQueryId + '"]').length);
        //Debug('SavedQueryId li: ' + $('li[id="a04A00000082zYoIAI"]').length);
        //Debug('SavedQueryId li: ' + $('#a04A00000082zYoIAI').length);
        
        //Debug('SavedQueryId li.div: ' + $('li[id="' + SavedQueryId + '"]').children('div').length);
        //Debug('SavedQueryId li.div.span: ' + $('li[id="' + SavedQueryId + '"]').children('div').children('span').length);
        
        $('li[id="' + SavedQueryId + '"]').children('div').children('span').remove();
        
        VisibleQueries = $.grep( VisibleQueries, function(n,i){
            return (n != SavedQueryId);
        });
        
        HideBubbles();
        
        Debug("Done Executing RemoveSavedQuery");
    
    }
    catch (ex)
    {
        Debug('Error (RemoveSavedQuery): ' + ex.message);
        NotifyError("Error Saved Query!",ex.message);
        DisplayPropertiesOfObject(ex,0);
    }
}

function UpdatePlottingStatus(SavedQryId, Stage)
{
    if (Stage == "Processing")
    {
        $('#PlottedQueriesTable #' + SavedQryId).html('<img src="' +LoadingGIFUrl +'"/>');
    }
    else
    {
        $('#PlottedQueriesTable #' + SavedQryId).html("X").css('cursor','pointer').click(function(){
            $('#PlottedQueriesTable #Row_' + SavedQryId).remove();
            RemoveSavedQuery(SavedQryId);
            ModifyPlottedSavedQueryCount();
        });               
    }
}  


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

var imgLoaderDimensions = {};
var imgLoaderCounts = {};
var imgLoaderIntervals = {};
function imgLoaded () 
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
    imgLoaderDimensions[this.imgId] = {
        width   : this.width,
        height  : this.height 
    };
}
function imgError ()
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
}

function PlotSavedQuery(SavedQryID, ViewableAreaEnabled)
{
    if ($.inArray(SavedQryID, VisibleQueries) >= 0)
    {
        NotifyError("I'm Sorry...","This has already been plotted");
    }
    else
    {
        window.setTimeout(function(){ 
            $("#Slider-PlottedSavedQueries").show(0);
            $("#Slider-Tree").hide(0);                     
        }, 0);
        
        VisibleQueries.push(SavedQryID);
                            
        ModifyPlottedSavedQueryCount();                            

        $.getJSON("/apex/MASavedQueryAJAXResourcesMobile","action=get_saved_query&id=" + SavedQryID,function(json)
        { 
            if(json.success)
            {
                //get dimensions for each potential image marker before we continue
                try
                {
                    //remove namespace
                    $.each(json.records, function (index, record) {
                        removeNamespace('{!namespace}', record);
                    });
                
                    //get a list of the images that need to be preloaded
                    imgIds = [];
                    if (json.records[0].PicklistField__c)
                    {
                        if (json.records[0].ColorAssignment__c)
                        {
                            $.each(json.records[0].ColorAssignment__c.split('~~'), function (index, colorAssignment) {
                                if (colorAssignment.split('~')[1].indexOf('image:') == 0) {
                                    imgIds.push(colorAssignment.split('~')[1].split('image:')[1]);
                                }
                            });
                        }
                    }
                    else
                    {
                        if (json.records[0].IconColor__c.indexOf('image:') == 0)
                        {
                            imgIds.push(json.records[0].IconColor__c.split('image:')[1]);
                        }
                    }
                    
                    //preload each image
                    imgLoaderCounts[SavedQryID] = 0;
                    $.each(imgIds, function (index, imgId) {
                        var img = new Image();
                        img.queryId = SavedQryID;
                        img.imgId = imgId;
                        img.name = '/servlet/servlet.FileDownload?file='+imgId;
                        img.src = '/servlet/servlet.FileDownload?file='+imgId;
                        img.onload = imgLoaded;
                        img.onerror = imgError;
                        img.onabort = imgError;
                        
                        imgLoaderCounts[SavedQryID] = imgLoaderCounts[SavedQryID] + 1;
                    });
                    
                    //set an interval to determine when all of the images have loaded so we can continue processing
                    imgLoaderIntervals[SavedQryID] = setInterval(
                        function () {
                            if (imgLoaderCounts[SavedQryID] == 0) {
                                clearInterval(imgLoaderIntervals[SavedQryID]);
                                PlotSavedQueryOnSuccess(json,SavedQryID,ViewableAreaEnabled);
                            }
                        }, 400
                    );
                }
                catch (err) { } 
            }
            else
            {
                Debug("ProcessSavedQry: " + json.error);
            }
        });
    }
}

function PlotSavedQueryOnSuccess(result,SavedQryID,ViewableAreaEnabled)
{
    try
    {
        ProcessedSavedQueries[SavedQryID] = new ProcessedSavedQry(SavedQryID);

        var aStreet         = "";
        var aCity           = "";
        var aState          = "";
        var aZip            = "";
        var aCountry        = "";
        var BaseObject      = "";
        var ImageURL        = "";
        var StoredQry       = "";
        var Latitude        = "";
        var Longitude       = "";
        var IconColor       = "";
        var PicklistField   = "";
        var cleanStreet     = "";
        var cleanCity       = "";
        var cleanState      = "";
        var cleanCounty     = "";
        var cleanCountry    = "";
        var cleanPostalCode = "";
        var cleanDistrict   = "";
        
        
        $.each(result.records, function(intIndex, SavedQryRecord )
        {
            AppendSavedQueryToPlottedTable(SavedQryID,SavedQryRecord);
            
            $.getJSON("/apex/MASavedQueryAJAXResourcesMobile?action=plot_query&SavedQueryId=" + SavedQryID + "&UserId=" + UserId + "&ViewableAreaEnabled=" + ViewableAreaEnabled + "&MapLat=" + map.getViewBounds().getCenter().latitude + "&MapLong=" + map.getViewBounds().getCenter().longitude + "&MapHeight=" + map.getViewBounds().getHeight() + "&MapWidth=" + map.getViewBounds().getWidth(),function(json)
            { 
                if(json.success)
                {                    
                    Debug("WholeQry: " + json.WholeQry);  
                    
                    //remove namespace
                    removeNamespace('{!namespace}', json.SavedQryObj);                  
                    
                    var SavedQryJSObj = new Object();
                    
                    SavedQryJSObj.QryId             = SavedQryID;
                    SavedQryJSObj.ToolTip1          = json.SavedQryObj.Tooltip1__c;
                    SavedQryJSObj.ToolTip2          = json.SavedQryObj.Tooltip2__c;
                    SavedQryJSObj.ToolTip3          = json.SavedQryObj.Tooltip3__c;
                    SavedQryJSObj.ToolTip4          = json.SavedQryObj.Tooltip4__c;
                    SavedQryJSObj.ToolTip5          = json.SavedQryObj.Tooltip5__c;
                    SavedQryJSObj.ToolTip6          = json.SavedQryObj.Tooltip6__c;
                    SavedQryJSObj.ToolTip7          = json.SavedQryObj.Tooltip7__c;
                    SavedQryJSObj.aStreet           = json.SavedQryObj.BaseObject__r.Street__c;
                    SavedQryJSObj.aCity             = json.SavedQryObj.BaseObject__r.City__c;
                    SavedQryJSObj.aState            = json.SavedQryObj.BaseObject__r.State__c;
                    SavedQryJSObj.aZip              = json.SavedQryObj.BaseObject__r.PostalCode__c;
                    SavedQryJSObj.aCountry          = json.SavedQryObj.BaseObject__r.Country__c;
                    SavedQryJSObj.BaseObject        = json.SavedQryObj.BaseObject__r.Name;
                    //SavedQryJSObj.ImageURL        = ImageURL;
                    SavedQryJSObj.StoredQry         = json.SavedQryObj.Query__c;
                    SavedQryJSObj.Latitude          = json.SavedQryObj.BaseObject__r.Latitude__c;
                    SavedQryJSObj.Longitude         = json.SavedQryObj.BaseObject__r.Longitude__c;
                    SavedQryJSObj.VerifiedLatitude  = json.SavedQryObj.BaseObject__r.VerifiedLatitude__c;
                    SavedQryJSObj.VerifiedLongitude = json.SavedQryObj.BaseObject__r.VerifiedLongitude__c;
                    SavedQryJSObj.WholeQry          = json.WholeQry;
                    SavedQryJSObj.QryType           = json.QueryType;
                    SavedQryJSObj.SavedQryName      = json.SavedQryObj.Name;
                    SavedQryJSObj.IconColor         = json.SavedQryObj.IconColor__c;
                    SavedQryJSObj.CleanCity         = json.SavedQryObj.BaseObject__r.CleanCity__c;
                    SavedQryJSObj.CleanStreet       = json.SavedQryObj.BaseObject__r.CleanStreet__c;
                    SavedQryJSObj.CleanState        = json.SavedQryObj.BaseObject__r.CleanState__c;
                    SavedQryJSObj.CleanCounty       = json.SavedQryObj.BaseObject__r.CleanCounty__c;
                    SavedQryJSObj.CleanCountry      = json.SavedQryObj.BaseObject__r.CleanCountry__c;
                    SavedQryJSObj.CleanPostalCode   = json.SavedQryObj.BaseObject__r.CleanPostalCode__c;
                    SavedQryJSObj.CleanDistrict     = json.SavedQryObj.BaseObject__r.CleanDistrict__c;
                    SavedQryJSObj.CleanQuality      = json.SavedQryObj.BaseObject__r.Quality__c;
                    SavedQryJSObj.CleanSimilarity   = json.SavedQryObj.BaseObject__r.Similarity__c;
                    SavedQryJSObj.RelatedListCount  = json.SavedQryObj.RelatedListCount__c;
                    
                    ProcessedSavedQueries[SavedQryID].BaseObject = SavedQryJSObj.BaseObject;
                    ProcessedSavedQueries[SavedQryID].BaseObjectId = SavedQryRecord.BaseObject__c;
                    ProcessedSavedQueries[SavedQryID].SupportsActivities = result.supportsActivities;
                    ProcessedSavedQueries[SavedQryID].SupportsChatter = result.supportsChatter;
                    ProcessedSavedQueries[SavedQryID].SupportsVerifiedLocations = (SavedQryJSObj.VerifiedLatitude && SavedQryJSObj.VerifiedLongitude) ? true : false;
                    
                    Debug("Query Type: " + SavedQryJSObj.QryType);                   
                    
                    if (SavedQryJSObj.QryType == "Picklist")
                    {
                        SavedQryJSObj.PicklistField = json.SavedQryObj.PicklistField__c;
                        SavedQryJSObj.PicklistFieldFieldType = json.QueryTypeDisplayType;
                        SavedQryJSObj.PicklistFieldFieldLabel = json.QueryTypeFieldLabel;
                        SavedQryJSObj.ColorAssignment = json.SavedQryObj.ColorAssignment__c;
                        SavedQryJSObj.OtherColor = '#FFFFFF';
                        
                        ProcessedSavedQueries[SavedQryID].PicklistField = SavedQryJSObj.PicklistField__c;
                        
                        //Example: Mr.~#7FEA2E~~Ms.~#EE5831    
                        
                        $.each(SavedQryJSObj.ColorAssignment.split("~~"), function(index, value) { 
                            
                            Debug("Legend Value: " + value);
                            
                            if (value != '' && value != null)
                            {
                                var LegendObjEntry = new Object();
                                
                                var ColorValue = value.split("~");
                                
                                Debug("Legend Value Size: " + ColorValue.length);
                                
                                if (ColorValue.length == 2)
                                {
                                    if (ColorValue[0] != null && ColorValue[0] != '' && ColorValue[1] != null && ColorValue[1] != '')
                                    {
                                        //is this the special <Other> option?
                                        if (ColorValue[0] == '<Other>')
                                        {
                                            SavedQryJSObj.OtherColor = ColorValue[1];
                                        }
                                        else
                                        {
                                            LegendObjEntry.RawValue = ColorValue[0];
                                            LegendObjEntry.Value = FormatPicklistFieldValue(ColorValue[0]);
                                            LegendObjEntry.Color = ColorValue[1];
                                            LegendObjEntry.Count = 0;
                                            
                                            ProcessedSavedQueries[SavedQryID].LegendArray[LegendObjEntry.Value] = LegendObjEntry;
                                        }
                                    }
                                    else
                                    {
                                        Debug("Color or Value is Blank");
                                    }
                                }
                                else
                                {
                                    Debug("Not a Valid Legend Value");
                                }
                            }
                        });
                        
                        DisplayPropertiesOfObject(ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray,0);                    
                        
                        var LegendObjEntry = new Object();
                                
                        LegendObjEntry.RawValue = 'Other Values';
                        LegendObjEntry.Value = 'OtherValues';
                        LegendObjEntry.Color = SavedQryJSObj.OtherColor;
                        LegendObjEntry.Count = 0;
                        
                        ProcessedSavedQueries[SavedQryID].LegendArray[LegendObjEntry.Value] = LegendObjEntry;
                    }
                    /*
                    else if (SavedQryJSObj.QryType == "Range")
                    {
                        //Is Range Query
                        SavedQryJSObj.NumberField = NumberField;
                        SavedQryJSObj.NumberFieldFieldType = GetFieldType(rdescribeSObj,NumberField);
                        SavedQryJSObj.NumberFieldFieldLabel = GetFieldLabel(rdescribeSObj,NumberField);
                        
                        Debug("SavedQryJSObj.NumberField - " + SavedQryJSObj.NumberField);
                    }
                    */
                    
                    //Debug("SavedQryJSObj.PicklistField: " + SavedQryJSObj.PicklistField);
                    SavedQryJSObj.BatchAmount = (json.SavedQryObj.BaseObject__r.BatchSize__c == null) ? 50 : json.SavedQryObj.BaseObject__r.BatchSize__c;
                    
                    ProcessSavedQryJSObject(SavedQryJSObj,json);
                }
                else
                {
                    HideLoadingDialog();
                        
                    UpdatePlottingStatus(SavedQryID, "Done");
                    
                    Debug("ProcessSavedQryJSObject " + json.error);
                    NotifyError("Error Plotting " + SavedQryRecord.Name + "!",json.error);                  
                    
                    HideLoadingDialog();             
                }
            }); 
        
        });//End of Each Loop
    }
    catch (ex)
    {
        Debug('Error Found in the Function - ' + ex.message);
        DisplayPropertiesOfObject(ex,0);
        HideLoadingDialog();
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////






function ProcessSavedQryJSObject(SavedQryJSObj,json)
{
    try
    {
        //Debug("document.getElementById({!$Component.LegendTableId}).value - " + document.getElementById("{!$Component.LegendTableId}").value);
        
        Debug("Qry rows returned: " + json.ResultsSize);                    
        //DisplayPropertiesOfObject(result,0);
        
        if (SavedQryJSObj.QryType == "Picklist")
        {
            //Example: Mr.~#7FEA2E~~Ms.~#EE5831
            
            /*
            $.each(SavedQryJSObj.ColorAssignment.split("~~"), function(index, value) { 
                
                var LegendObjEntry = new Object();
                
                LegendObjEntry.PickListValue = PreparePickListEntry(value.split("~")[0]);
                LegendObjEntry.Color = value.split("~")[1];
                LegendObjEntry.Count = 0;
                
                ProcessedSavedQueries[SavedQryJSObj.QryId].LegendObject[LegendObjEntry.PickListValue] = LegendObjEntry;
                
            });
            */
            
            var MainColorAssignment = SavedQryJSObj.ColorAssignment;
            
            var MainColorArray = new Array();
            var LegendColorAssignment = '<table  border="0" cellpadding="10">';
            if (MainColorAssignment != null)
            {
                var ColorValues = MainColorAssignment.split("~~");
                for (var ij = 0 ; ij < ColorValues.length; ij++ )
                {
                    var IndColors = ColorValues[ij].split("~");
                    MainColorArray[ij] = new Array(2);
                    MainColorArray[ij][0] = IndColors[0];
                    MainColorArray[ij][1] = IndColors[1];
                }
            }
            SavedQueriesObjectIdArray[SavedQryJSObj.QryId+"_PicklistValues"] = new Array();
            Debug('1');
            
            var allParas = document.getElementsByTagName("Input");
            for (var ijkl = 0; ijkl < allParas.length; ijkl ++)
            {
                //Debug("Tag Name - " + allParas[ijkl].name + " - " + allParas[ijkl].checked + " - " + allParas[ijkl].type + " - " + allParas[ijkl].value);
                if (allParas[ijkl].type == "checkbox"  && allParas[ijkl].value.indexOf("_LegendCheck") != -1 )
                {
                    if (allParas[ijkl].checked == true)
                    {
                        SavedQueriesObjectIdArray[allParas[ijkl].value+"_LegendCheck"] = true;
                    }
                    else
                    {
                        SavedQueriesObjectIdArray[allParas[ijkl].value+"_LegendCheck"] = false;
                    }
                    //Debug('Post Values - ' + SavedQueriesObjectIdArray[allParas[ijkl].value+"_LegendCheck"] + ' - ' + allParas[ijkl].value);
                }
            }
            
            var PickCount = new Array();
        }
                
        var carRt = /\r/gi;
        var patAmp = /\x26/g;
        
        var records = json.Markers;
        var ToolTipInfoList = json.ToolTipInfoList;
        
        Debug("ToolTipInfoList.length " + ToolTipInfoList.length );
        if(ToolTipInfoList.length != 7)
        {
            Debug("ToolTipInfoList is smaller than 7!");
            return;
        }
        
        var ToolTip1            = new ToolTip(ToolTipInfoList[0]);
        var ToolTip2            = new ToolTip(ToolTipInfoList[1]);
        var ToolTip3            = new ToolTip(ToolTipInfoList[2]);
        var ToolTip4            = new ToolTip(ToolTipInfoList[3]);
        var ToolTip5            = new ToolTip(ToolTipInfoList[4]);
        var ToolTip6            = new ToolTip(ToolTipInfoList[5]);
        var ToolTip7            = new ToolTip(ToolTipInfoList[6]);
        var aStreet             = SavedQryJSObj.aStreet;
        var aCity               = SavedQryJSObj.aCity;
        var aState              = SavedQryJSObj.aState;
        var aZip                = SavedQryJSObj.aZip;
        var aCountry            = SavedQryJSObj.aCountry;
        var BaseObject          = SavedQryJSObj.BaseObject;
        var ImageURL            = SavedQryJSObj.ImageURL;
        var StoredQry           = SavedQryJSObj.StoredQry;
        var Latitude            = SavedQryJSObj.Latitude;
        var Longitude           = SavedQryJSObj.Longitude;
        var VerifiedLatitude    = SavedQryJSObj.VerifiedLatitude;
        var VerifiedLongitude   = SavedQryJSObj.VerifiedLongitude;
        var QryId               = SavedQryJSObj.QryId;
        
        var PicklistField     = SavedQryJSObj.PicklistField;
        
        var CleanStreet       = SavedQryJSObj.CleanStreet;
        var CleanState        = SavedQryJSObj.CleanState;
        var CleanCity         = SavedQryJSObj.CleanCity;
        var CleanCounty       = SavedQryJSObj.CleanCounty;
        var CleanDistrict     = SavedQryJSObj.CleanDistrict;
        var CleanPostalCode   = SavedQryJSObj.CleanPostalCode;
        var CleanCountry      = SavedQryJSObj.CleanCountry;
        var CleanQuality      = SavedQryJSObj.CleanQuality;
        var CleanSimilarity   = SavedQryJSObj.CleanSimilarity;
        var RelatedListCount  = SavedQryJSObj.RelatedListCount;
        
        var NumberField       = SavedQryJSObj.NumberField;
        Debug('NumberField - ' + NumberField);
        //Debug('PicklistField - ' + PicklistField);
        
        var IconColor   = (SavedQryJSObj.IconColor == null || SavedQryJSObj.IconColor == "") ? "#FFFFFF" : SavedQryJSObj.IconColor;
                
        Debug("11BaseObject: " + BaseObject);
        
        if (Longitude.indexOf(".") > -1)
        {
            var BaseObject = json.NewBaseObject;
        }
         
        Debug("22BaseObject: " + BaseObject);
        
        Debug("ToolTip1.FieldLabel: " + ToolTip1.FieldLabel);
        Debug("ToolTip2.FieldLabel: " + ToolTip2.FieldLabel);
        Debug("ToolTip3.FieldLabel: " + ToolTip3.FieldLabel);
        Debug("ToolTip4.FieldLabel: " + ToolTip4.FieldLabel);
        Debug("ToolTip5.FieldLabel: " + ToolTip5.FieldLabel);
        Debug("ToolTip6.FieldLabel: " + ToolTip6.FieldLabel);
        Debug("ToolTip7.FieldLabel: " + ToolTip7.FieldLabel);
                 
        ProcessedSavedQueries[QryId].ToolTip1Label  = ToolTip1.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip2Label  = ToolTip2.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip3Label  = ToolTip3.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip4Label  = ToolTip4.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip5Label  = ToolTip5.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip6Label  = ToolTip6.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip7Label  = ToolTip7.FieldLabel;
        
        //ProcessedSavedQueries[QryId].SetExpectedMarkersCount(records.length);
        ProcessedSavedQueries[QryId].SetExpectedMarkersCount(json.ResultsSize);
                            
        var PicklistFieldValue = "";
        var PicklistFieldValueEncoded = "";

        
        Debug("Records length: " + records.length);
        
        for (var i=0; i < ProcessedSavedQueries[QryId].ExpectedMarkersCount; i++) 
        {
            var record = records[i];                        
            //Debug('Record Name: ' + record.Name);       
                          
            ToolTip1.PopulateValues(record, ToolTipInfoList[0].Accessible);
            ToolTip2.PopulateValues(record, ToolTipInfoList[1].Accessible);
            ToolTip3.PopulateValues(record, ToolTipInfoList[2].Accessible);
            ToolTip4.PopulateValues(record, ToolTipInfoList[3].Accessible);
            ToolTip5.PopulateValues(record, ToolTipInfoList[4].Accessible); 
            ToolTip6.PopulateValues(record, ToolTipInfoList[5].Accessible);
            ToolTip7.PopulateValues(record, ToolTipInfoList[6].Accessible);
            
            //var aStreetResult   = GetAddressFieldResults(record,aStreet).replace(/\n\r?/g, '<br />');
            var aStreetResult   = GetAddressFieldResults(record,aStreet);
            var aCityResult     = GetAddressFieldResults(record,aCity);
            var aStateResult    = GetAddressFieldResults(record,aState);
            var aZipResult      = GetAddressFieldResults(record,aZip);
            var aCountryResult  = GetAddressFieldResults(record,aCountry);                        
                        
           
            /////////////////////////////////////
            var text="";
            
            if (SavedQryJSObj.QryType == "Range")
            {
                var NumberFieldValue   = GetAddressFieldResults(record, NumberField);
                
                if (NumberFieldValue != null)
                {
                    //var ColorIndex = ((15 * (NumberFieldValue - MinIndex)) / (MaxIndex - MinIndex));
                    //IconColor = returnHexColor( ColorIndex );
                    
                    IconColor = returnHexColor( NumberFieldValue );
                }
                else
                {
                    IconColor = "#FFFFFF";
                }
                text = "R";
                
            } 
            else if (SavedQryJSObj.QryType == "Picklist")
            {
                PicklistFieldValue = GetAddressFieldResults(record, PicklistField);
                
                var PickFound = false;
                
                if (PicklistFieldValue != null && PicklistFieldValue != "")
                {
                    if (ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)] == undefined)
                    {
                        IconColor = SavedQryJSObj.OtherColor;
                        PicklistFieldValue += ' (Other Values)';
                        PicklistFieldValueEncoded = 'OtherValues';
                        ProcessedSavedQueries[QryId].LegendArray['OtherValues'].Count++;
                        //Debug("Missing Pick List Value");
                    }
                    else
                    {
                        IconColor = ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)].Color;
                        ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)].Count++;
                        PicklistFieldValueEncoded = PicklistFieldValue;
                        //Debug("Found Picklist Value");
                    }
                }
                else
                {
                    IconColor = SavedQryJSObj.OtherColor;
                    PicklistFieldValue += ' (Other Values)';
                    PicklistFieldValueEncoded = 'OtherValues';
                    ProcessedSavedQueries[QryId].LegendArray['OtherValues'].Count++;
                    //Debug("Missing Pick List Value");
                }
                text = "L";
                
                if (PickCount[PicklistFieldValue] == null)
                {
                    PickCount[PicklistFieldValue] = 1;
                    //Debug('Inside If - PickCount[PicklistFieldValue] - ' + PickCount[PicklistFieldValue]);
                }
                else
                {
                    PickCount[PicklistFieldValue] = PickCount[PicklistFieldValue] + 1;
                    //Debug('Inside Else - PickCount[PicklistFieldValue] - ' + PickCount[PicklistFieldValue]);
                } 
            }      
            
            //Debug('PicklistField Value - ' + PicklistFieldValue);
           
            
            
            ////////////////////////////////////////////
            
            
            var MarkerAddress = "";
            var FormatedMarkerAddress = "";
                        
            if (aCountryResult == "")
            {
                FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult;
            }
            else
            {
                FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult + "<br />" + aCountryResult;
            }
            
            if (aCountryResult == "")
            {
                MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult;
            }
            else
            {
                MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult + "," + aCountryResult;
            }
            
            var ContentKey = QryId + '-' + record.Id;                       
            
            
            var pTp = new Object();
            //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
            pTp.MarkerAddress   = MarkerAddress;
            pTp.FormatedMarkerAddress = FormatedMarkerAddress;
            pTp.MarkerStreet    = aStreetResult;
            pTp.MarkerCity      = aCityResult;
            pTp.MarkerState     = aStateResult;
            pTp.MarkerZip       = aZipResult;
            pTp.MarkerCountry   = aCountryResult;
            

            pTp.ToolTip2L       = ToolTip2.FieldLabel;
            pTp.ToolTip3L       = ToolTip3.FieldLabel;
            pTp.ToolTip4L       = ToolTip4.FieldLabel;
            pTp.ToolTip5L       = ToolTip5.FieldLabel;
            pTp.ToolTip6L       = ToolTip6.FieldLabel;
            pTp.ToolTip7L       = ToolTip7.FieldLabel;
            
            pTp.ToolTip1V       = ToolTip1.Value;
            pTp.ToolTip2V       = ToolTip2.Value;
            pTp.ToolTip3V       = ToolTip3.Value;
            pTp.ToolTip4V       = ToolTip4.Value;
            pTp.ToolTip5V       = ToolTip5.Value;
            pTp.ToolTip6V       = ToolTip6.Value;
            pTp.ToolTip7V       = ToolTip7.Value;
                
            pTp.ImageURL                = ImageURL;
            pTp.sObjectId               = record.Id;
            pTp.Latitude                = GetAddressFieldResults(record,Latitude); //record.Latitude;
            pTp.Longitude               = GetAddressFieldResults(record,Longitude); //record.Longitude
            pTp.VerifiedLatitude        = GetAddressFieldResults(record,VerifiedLatitude);
            pTp.VerifiedLongitude       = GetAddressFieldResults(record,VerifiedLongitude);
            pTp.markerLatitude          = (pTp.VerifiedLatitude || pTp.Latitude);
            pTp.markerLongitude         = (pTp.VerifiedLongitude || pTp.Longitude);
            pTp.LatitudeField           = Latitude;
            pTp.LongitudeField          = Longitude;
            pTp.VerifiedLatitudeField   = VerifiedLatitude;
            pTp.VerifiedLongitudeField  = VerifiedLongitude;
            pTp.BaseObject              = BaseObject;
            pTp.BatchAmount             = SavedQryJSObj.BatchAmount;
            pTp.queryName               = SavedQryJSObj.SavedQryName;
            pTp.QryId                   = QryId;
            pTp.IconColor               = IconColor;
            
            pTp.CleanCity       = CleanCity;
            pTp.CleanStreet     = CleanStreet;
            pTp.CleanCounty     = CleanCounty;
            pTp.CleanDistrict   = CleanDistrict;
            pTp.CleanState      = CleanState;   
            pTp.CleanPostalCode = CleanPostalCode;
            pTp.CleanCountry    = CleanCountry;
            pTp.CleanQuality    = CleanQuality;
            pTp.CleanSimilarity = CleanSimilarity;
            pTp.MarkerIconText  = text;
            pTp.ContentKey      = ContentKey;
            pTp.RecordId        = record.Id;
            pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
            pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
            pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
            pTp.PicklistFieldValue = PicklistFieldValue;
            pTp.RelatedListCount = RelatedListCount;
            pTp.PicklistFieldValueEncoded = PicklistFieldValueEncoded;
            pTp.Tasks = record.Tasks;
                                    
            /*
            if (PicklistFieldValue == null)
            {
                pTp.PicklistFieldValue = "";
            }
            else
            {
                pTp.PicklistFieldValue = PicklistFieldValue;
            }
            */
            
            //Debug('pTp.PicklistFieldValue - ' + pTp.PicklistFieldValue);              
            
            //Debug("Created pTp Object");
            
            if (Longitude.indexOf(".") > -1)
            {
                if (record[Longitude.split(".")[0]] != null)
                {
                    pTp.sObjectId = record[Longitude.split(".")[0]]["Id"];
                    
                    if (Longitude != null)       { pTp.LongitudeField   = Longitude.split(".")[1]; }
                    if (Latitude != null)        { pTp.LatitudeField    = Latitude.split(".")[1]; }
                    
                    
                    if (CleanCity != null)       { pTp.CleanCity     = CleanCity.split(".")[1]; }
                    if (CleanStreet != null)     { pTp.CleanStreet   = CleanStreet.split(".")[1]; }
                    if (CleanCounty != null)     { pTp.CleanCounty   = CleanCounty.split(".")[1]; }
                    if (CleanDistrict != null)   { pTp.CleanDistrict = CleanDistrict.split(".")[1]; }
                    if (CleanState != null)      { pTp.CleanState    = CleanState.split(".")[1]; }
                    if (CleanPostalCode != null) { pTp.CleanPostalCode = CleanPostalCode.split(".")[1]; }
                    if (CleanCountry != null)    { pTp.CleanCountry  = CleanCountry.split(".")[1]; }
                    if (CleanQuality != null)    { pTp.CleanQuality  = CleanQuality.split(".")[1]; }
                    if (CleanSimilarity != null) { pTp.CleanSimilarity = CleanSimilarity.split(".")[1]; }

                }
                else
                {
                    //pTp.sObjectId = null;
                }
            }            
            
            var rLatitude = pTp.markerLatitude;
            var rLongitude = pTp.markerLongitude;
           
            /*
            if (pTp.ToolTip1V == "VERNON & EVELYN DORSEY")
            {
                Debug("Account Found");
                Debug("aStreetResult: " + aStreetResult);
                Debug("aCityResult: " + aCityResult);
                Debug("aStateResult: " + aStateResult);
                Debug("aZipResult: " + aZipResult);
                Debug("aCountryResult: " + aCountryResult);
            }
            */
            
            //Does Record have a Lat/Long?
            if (rLatitude == "" || rLongitude == "")
            {
                //Does Record have an Address?
                if (aStreetResult == "" && aCityResult == "" && aStateResult == "" && aZipResult == "" && aCountryResult == "")
                {
                    AddToMissingAddressesTab(pTp,"Missing Address");
                    //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                }
                else if (MarkerAddress.length < 3)
                {                                
                    AddToMissingAddressesTab(pTp,"Missing Address");
                    //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                }
                else
                {
                    if (GeocOdeListIndex == 1)
                    {
                        GeoCodeList1.add(pTp);
                        GeocOdeListIndex = 2;                                    
                    }
                    else if (GeocOdeListIndex == 2)
                    {
                        GeoCodeList2.add(pTp);
                        GeocOdeListIndex = 3;
                    }
                    else if (GeocOdeListIndex == 3)
                    {
                        GeoCodeList3.add(pTp);
                        GeocOdeListIndex = 4;
                    }
                    else if (GeocOdeListIndex == 4)
                    {
                        GeoCodeList4.add(pTp);
                        GeocOdeListIndex = 1;
                    }
                }

            }
            else
            {                
                var marker = CreateMarkerFromPointToPoint(pTp);
                
                ProcessedSavedQueries[QryId].AddMarker(marker);
                
                if (pc_Added)
                {
                    var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(pTp.markerLatitude), parseFloat(pTp.markerLongitude));
                    if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
                    {
                        ProcessedSavedQueries[QryId].AddVisibleMarker(marker);
                    }
                }
                else
                {
                    ProcessedSavedQueries[QryId].AddVisibleMarker(marker);
                }                
            }   
        }
        
         if (SavedQryJSObj.QryType == "Picklist")
        {
            //var LegendHTML = '<div id="LegendDiv_' + SavedQryJSObj.QryId + '" class="SQLegendDiv">';
            
            var LegendHTML = "";
            
            //LegendHTML += '<h1 onclick="ToggleLegendContent(\'' + SavedQryJSObj.QryId + '\');">';
            //LegendHTML += SavedQryJSObj.SavedQryName + ' ('+ SavedQryJSObj.PicklistFieldFieldLabel + ')';
            //LegendHTML += '</h1>';
            
            LegendHTML += '<div id="LegendDiv_Content" style="padding-top:4px;">';
            LegendHTML += '<table style="width:100%;"  border="0" cellpadding="0">';
            
            DisplayPropertiesOfObject(ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray,0);
            
            
            for(var key in ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray)
            {
                Debug("Legend Key: " + key);
                //Debug("Legend Key: " + typeof ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray[key]);
                
                //
                
                if (key != undefined && key != "remove" && ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray[key] != undefined)                
                {
                
                    value = ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray[key];
                    
                    //DisplayPropertiesOfObject(value,0);
                    
                    var LegendRow = '';
                        
                    if (value.Count > 0)
                    {
                        LegendRow += '<tr>';
                    }
                    else
                    {
                        LegendRow += '<tr id="CountIsZero" style="display:none;">';
                    }
                                    
                    LegendRow += '<td style="padding:3px 3px 3px 3px;width:15px;"><input type="checkbox" checked="true" value="' + QryId+"_"+value.Value+'_LegendCheck" onclick="LegenedCheckboxClicked(this);"/></td>';
                    LegendRow += '<td>' + value.RawValue + '</td>';
                    LegendRow += '<td>' + value.Count + '</td>';
                    LegendRow += '<td>' + 'of' + '</td>';
                    LegendRow += '<td>' + ProcessedSavedQueries[QryId].ExpectedMarkersCount + '</td>';
                    
                    if (value.Color && value.Color.indexOf('image:') == 0)
                    {
                        LegendRow += '<td style="text-align:center;"><img src="/servlet/servlet.FileDownload?file='+value.Color.split('image:')[1]+'" style="height: 20px; max-width: 30px;" /></td>';
                    }
                    else
                    {
                        LegendRow += '<td style="padding:3px 3px 3px 3px; border:1px solid black;width:20px;background-color:' + value.Color + ';" ></td>';
                    }

                    LegendRow += '</tr>';
                    
                    LegendHTML += LegendRow;
                }
                
            }
            
            LegendHTML += '</table>';
            LegendHTML += '<center><a id="MoreOrLessLink" onclick="ShowMoreOrLessOnLegendDiv(this);">-- More --</a></center>';
            //LegendHTML += '</div>';
            
            $('#PlottedQueriesTable #Row_' + SavedQryJSObj.QryId).find('#PrimaryDIV').append('<center><a onclick="ToggleLegendContent(this);">-- Hide Legend --</a></center>' + LegendHTML);            
        }
        
        ProcessedSavedQueries[QryId].SetProccessingStatus();                          
        ProcessedSavedQueries[QryId].PlotVisibleMarkers();        
        //ProcessedSavedQueries[QryId] = ProcessedSavedQryObj;
        
        HideLoadingDialog(); 
    }
    catch (ex)
    {
        Debug('Error Found in the Function - ' + ex.message);
        DisplayPropertiesOfObject(ex,0);
        HideLoadingDialog();
    }
}

function ToggleLegendContent(Obj)
{
     $(Obj).parent().parent().find('#LegendDiv_Content').toggle();
     
     if ($(Obj).html() == '-- Hide Legend --')
     {
         $(Obj).html('-- Show Legend --');
     }
     else
     {
         $(Obj).html('-- Hide Legend --');
     }
}

function ShowMoreOrLessOnLegendDiv(Obj)
{
    //MoreOrLessLink

    
    var $ContentDiv = $(Obj).parent().parent();
    
    if ($(Obj).html() == '-- More --')
    {
        $(Obj).html('-- Less --');
    }
    else
    {
        $(Obj).html('-- More --');
    }
    
    $ContentDiv.find('table').find('#CountIsZero').toggle();
}


function LegenedCheckboxClicked(ElementObj)
{
    try
    {
        Debug("Running checkboxClicked");
        var QryIdArray = ElementObj.value.split("_");
        
        
        if (ProcessedSavedQueries[QryIdArray[0]] != null)
        {
            if (ElementObj.checked)
            {   
                ProcessedSavedQueries[QryIdArray[0]].AddLegendMarkers(QryIdArray[1]);
            }
            else
            {
                ProcessedSavedQueries[QryIdArray[0]].RemoveLegendMarkers(QryIdArray[1]);
            }
        }
    }
    catch (e)
    {
        Debug("Error1 :" + e.message);
        HideLoadingDialog();
    }
}

// JavaScript Document

function ShowHidePosition()
{
    if (nokia.maps.positioning.Manager) 
    {
        if (PositionEnabled)
        {
            HideBubbles();
            HideMyPosition();
        }
        else
        {
            ShowMyPosition();
        }
    }
    else
    {
        var ErrorNote = 'Supported Browsers: <br />';
        ErrorNote += 'On PC/Mac use' + '<br />';
        ErrorNote += 'FireFox 3.5+,' + '<br />';
        ErrorNote += 'Google Chrome 5+,' + '<br />';
        ErrorNote += 'Safari 5+' + '<br />';
        ErrorNote += 'Opera 10+' + '<br />';
        
        NotifyError("Unsupported Browser",ErrorNote);
    }
}

function HideMyPosition()
{
    map.objects.remove(PositionAccuracyCircle);
    map.objects.remove(PositionMarker);
    
    PositionEnabled = false;
    $('#ShowPositionButton').html('Show Position').button();
}

function ShowMyPosition()
{
    PositioningMgr.getCurrentPosition(
        function (position) {
            var coords = position.coords;
            
            var MarkerBubbleContent = '<table cellpadding="3">';
            
            MarkerBubbleContent += '<tr><td><b>Latitude</b></td><td>' + coords.latitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Longitude</b></td><td>' + coords.longitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Accuracy</b></td><td>' + coords.accuracy + ' meters</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Address</b></td><td id="PositionAddress">' + ' Loading...</td></tr>';
            
            MarkerBubbleContent += '<tr>';
            MarkerBubbleContent += '<td><a class="button1-white" id="AddToTrip-positioning">Add to Trip</a></td>';
            MarkerBubbleContent += '<td><a class="button1-white" id="SetProxCenter-positioning">Set Proximity Center</a></td>';
            MarkerBubbleContent += '</tr>';
            MarkerBubbleContent += '<table>';
            
            PositionMarker = new nokia.maps.map.StandardMarker(coords,{
                    title: 'My Locaiton',
                    visibility: true,
                    Ignore: false,
                    text: 'P',
                    Lat: coords.latitude,
                    Long: coords.longitude,
                    pMarkerContent: MarkerBubbleContent,
                    eventListener: {
                       "click": [function()
                                   {
                                        InfoBubbles.addBubble(this.pMarkerContent, 
                                            new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));
                                       
                                        var OuterObj = this;
                                       
                                        $('#AddToTrip-positioning').click(function() {
                                            
                                            $(WayPointLI)
                                                .attr('Lat',OuterObj.Lat)
                                                .attr('Long',OuterObj.Long)
                                                .attr('Address','My Position')
                                                .attr('WayPointTitle','My Position')
                                                .appendTo('#sortable')
                                                .find('input').val('My Position').prop('disabled', true).addClass('DisabledWaypoint ui-input-text ui-body-c ui-corner-all ui-shadow-inset');
                                            
                                            
                                            OrderNumbersOnWapPoints();
                                            
                                            
                                            ShowDirectionsTab();
                                            HideBubbles();
                                        });
                                        
                                        $('#SetProxCenter-positioning').click(function() {
                                            
                                            AddOval(OuterObj.Lat,OuterObj.Long);
                                            $('#ProximityAddress').val($('#PositionAddress').text());   //this should really happen at the end of AddOval, but this is easier for now 
                                            HideBubbles();
                                        });
                                       
                                        Debug("Starting PositionGeoCoder reverseGeocode");
                                        PositionGeoCoder.reverseGeocode(coords);
                                        
                                   }
                               , false, null],
                           "tap": [function()
                                   {
                                        InfoBubbles.addBubble(this.pMarkerContent, 
                                            new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));
                                       
                                        var OuterObj = this;
                                       
                                        $('#AddToTrip-positioning').click(function() {
                                            
                                            $(WayPointLI)
                                                .attr('Lat',OuterObj.Lat)
                                                .attr('Long',OuterObj.Long)
                                                .attr('Address','My Position')
                                                .attr('WayPointTitle','My Position')
                                                .appendTo('#sortable')
                                                .find('input').val('My Position').prop('disabled', true).addClass('DisabledWaypoint');
                                            
                                            
                                            OrderNumbersOnWapPoints();
                                            
                                            
                                            ShowDirectionsTab();
                                            HideBubbles();
                                        });
                                        
                                        $('#SetProxCenter-positioning').click(function() {
                                            
                                            AddOval(OuterObj.Lat,OuterObj.Long);
                                            HideBubbles();
                                        });
                                       
                                        Debug("Starting PositionGeoCoder reverseGeocode");
                                        PositionGeoCoder.reverseGeocode(coords);
                                        
                                   }
                               , false, null]
                       }
                }
            );
            
            //PositionMarker = new nokia.maps.map.StandardMarker(coords);
            //PositionAccuracyCircle = new nokia.maps.map.Circle(coords, coords.accuracy);
            //map.objects.addAll([PositionAccuracyCircle, PositionMarker]);
            map.objects.addAll([PositionMarker]);
            
            //map.zoomTo(PositionAccuracyCircle.getBoundingBox(), false, "default");
            map.zoomTo(PositionMarker.getBoundingBox(), false, "default");
            if (map.zoomLevel > 16) map.set("zoomLevel", 16); //zoom out if too close
            
            PositionEnabled = true;
            $('#ShowPositionButton').html('Hide Position');
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            PositionEnabled = false;
            NotifyError("Error Getting Position",errorMsg);
            $('#ShowPositionButton').html('Show Position');
            //alert(errorMsg);
        }
    );
    
}

function GoToHomePosition()
{
    if (CenterLat == undefined && CenterLong == undefined && DefaultZoomLevel == undefined)
    {
        NotifyError("Home Not Set","Please Set Your Home First");
    }
    else
    {
        if (CenterLat != undefined && CenterLong != undefined)
        {
             map.setCenter(new nokia.maps.geo.Coordinate(CenterLat,CenterLong));
        }
        
        if (DefaultZoomLevel != undefined)
        {
            map.setZoomLevel(DefaultZoomLevel);
        }
    }
}

// JavaScript Document
function RemoveProximityCircle()
{
    map.objects.remove(ProximityCircle);
} 
        
function AddOval(Lat,Long)
{
    //Check to see if Proximity Window is Open, if not open it.
    OpenMenuIfOpen('ProximityPopup');
    
    //ShowLoadingDialog();
    
    StorePreferredMeasurementType();
    
    if (pc_Added)
    {
        //Remove Current Circle
        map.objects.remove(ProximityCircle);
    }

    pc_Lat = Lat;
    pc_Long = Long;

    Debug("Set pc_Lat: " + pc_Lat);
    Debug("Set pc_Long: " + pc_Long);

    var Radius = parseFloat(document.getElementById("ProximityRadius").value);
    var RadiusInMeters;
   
    Debug("Radius: " + Radius);
    
    //Need to Convert to Meters
    var MesType = document.getElementById("ProximityRadiusMeasurementType").value;
    Debug("Radius is in " + MesType);
    
    if (MesType == "MILES")
    {
        //1 Mile = 1609.344 Meters
        RadiusInMeters = 1609.344 * Radius;
    }
    else if (MesType == "KM")
    {
        //1 Kilometer = 1000 Meters
        RadiusInMeters = 1000 * Radius;
    }
    else if (MesType == "METERS")
    {
        RadiusInMeters = Radius;
    }
    else if (MesType == "YARDS")
    {
        //1 Yard = 0.9144 Meters
         RadiusInMeters = 0.9144 * Radius;
    }
    else if (MesType == "FEET")
    {
        //1 Foot = 0.3048 Meters
        RadiusInMeters = 0.3048 * Radius;
    }
    
    Debug("Radius in Meters: " + RadiusInMeters);
    
    pc_Diameter = RadiusInMeters * 2;
    
    Debug("Diameter: " + pc_Diameter + " meters");
        
    
    //Check to make sure the Enabled Checkbox is Checked
    //This is primarily used when setting a marker as a circle center
    //and when using an address
    
    if (document.getElementById("ProximityCheckbox").checked == false)
    {
        Debug("Proximity Checkbox was not set");
        //document.getElementById("ProximityCheckbox").checked = true;
        $('#ProximityCheckbox').attr("checked",true).checkboxradio("refresh");

        
        DOMNode.addListener("click", ClickToCreateProximityCircle,false);
    }
    
    
    //ProximityCircle
    
   //ProximityCircle
    
   ProximityCircle = new nokia.maps.map.Circle(
        [parseFloat(Lat), parseFloat(Long)], //place the circle center here
        RadiusInMeters, //radius of 8000 meters
        {
          color: "#823f",
          fillColor: "#2387",
          width: 2
        }
      );
    ProximityCircle.addListener("click", ClickToCreateProximityCircle,false);
    map.objects.add(ProximityCircle);
    pc_Added = true;
    
    ChangeDivStatus("ProximityAddressStatus","");
    ChangeVisibilityWhenCircleIsAdded();
    HideLoadingDialog();
}

function ClickToCreateProximityCircle(event)
{
    ShowLoadingDialog();
    
    if (event.target === map) 
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    else if (event.target == ProximityCircle)
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    
    HideLoadingDialog();
    
}



function ProximityCheckChanged(ElementObj)
{
    //alert("ProximityCheckChanged");
    if (ElementObj.checked)
    {
        Debug("ProximityCheckbox Checked");
        
        DOMNode.addListener("click", ClickToCreateProximityCircle,false);
    }
    else
    {
        ShowLoadingDialog();
        Debug("ProximityCheckbox UnChecked");
        
        pc_Added = false;
        DOMNode.removeListener("click", ClickToCreateProximityCircle,false);
        RemoveProximityCircle();
        ChangeVisibilityWhenCircleIsAdded();
    }
}


function CreateProximityAddress()
{
    var Address = document.getElementById("ProximityAddress").value;
    
    if (Address != null && Address != "")
    {
        ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
        
        Address = Address.replace("\n",",");
        
        Debug("Address is " + Address);
        Debug("Address (encodeURI) is " + encodeURI(Address));
        
        ProximityGeoCoder.geocode(Address);
         
    }
    else
    {
        Debug("Address is Blank");
        ChangeDivStatus("ProximityAddressStatus",'<span style="color:red;font-weight:bold;">Address is Blank</span>');
    }
}
        
function ChangeVisibilityWhenCircleIsAdded()
{


    Debug("Proximity Circle Added or Removed");
    //if (AllLocationMarkers.length > 0)
    if (VisibleQueries.length > 0)
    {
        
        Debug("VisibleQueries: " + VisibleQueries.length);
        
        if (pc_Added)
        {
            var CenterPoint = new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long));
            var Radius = (pc_Diameter / 2);
        }
        
        $.each(VisibleQueries, function(index, value) { 
                
            if (ProcessedSavedQueries[value] != null)
            {
                if (pc_Added)
                {
                    ProcessedSavedQueries[value].ChangeDoToProximityCircle(CenterPoint,Radius);
                }
                else
                {
                    ProcessedSavedQueries[value].ShowAllMarkers();
                }
                
            }
            
        });
        
        
    }
    else
    {
        HideLoadingDialog();
    }
    


}

// JavaScript Document
function ToolTip(ToolTipInfo)
{
    //Set Defaults
    this.RefFieldName   = ToolTipInfo.RefFieldName; 
    this.Value          = "";
    this.RefID          = "";
    this.FormatedValue  = "";
    this.FieldType      = ToolTipInfo.DisplayType;
    this.FieldLabel     = ToolTipInfo.FieldLabel;
    this.FieldName      = ToolTipInfo.FieldName;
}
        
ToolTip.prototype.PopulateValues = function(record, pAccessible) {
       
    this.Value = "";
    this.RefID = "";
    this.FormatedValue = "";
    
    if (pAccessible)
    {
        if(this.FieldName != null)
        {
            if (this.FieldName.indexOf(".") > -1)
            { 
                //Is Reference Field
                if (record[this.FieldName.split(".")[0]] != null)
                {
                    var FieldString = String( + "." + this.FieldName.split(".")[1]);
                    var RefFieldString = String( + "." + this.RefFieldName.split(".")[1]);
                    
                    this.Value = record[this.FieldName.split(".")[0]][this.FieldName.split(".")[1]];
                    this.RefID = record[this.RefFieldName.split(".")[0][this.FieldName.split(".")[1]]];                
                    this.Value = '<a target="_blank" href="/' + this.RefID + '">' + this.Value + '</a>';
                }
            }
            else
            {
                this.Value = record[this.FieldName];
            }
            
            if (this.Value != "")
            {
                //this.FormatedValue =  FormatsObjectValue(this.Value,this.FieldType,this.RefID)
                this.Value = FormatsObjectValue(this.Value,this.FieldType,this.RefID);
            }       
            
            //Debug("Value: " + this.Value);
            //Debug("RefID: " + this.RefID);
            //Debug("FormatedValue: " + this.FormatedValue);
        }
    }
    else
    {
         this.Value = "Insufficient Privileges";
    }
    
    
};

// JavaScript Document

function SetDefaultMapLocation()
{
    Debug("SetDefaultMapLocation");
    DisplayPropertiesOfObject(map);
    
    $.getJSON("/apex/MAUserAJAXResources","action=set_default_map_location&id=" + UserId + "&zoomlvl=" + map.zoomLevel + "&lat=" + map.center.latitude + "&long=" + map.center.longitude,function(json)
    { 
        if(json.success)
        {
            CenterLat = map.center.latitude;
            CenterLong = map.center.longitude;
            DefaultZoomLevel = map.zoomLevel;
    
            Debug("Default Location Saved");
            alert("Default Location Saved");
        }
        else
        {
            NotifyError("Error Updating Default Location",json.error);
            Debug("Error Updating Default Location " + json.error);
        }
    });
}     
        
function StorePreferredMeasurementType()
{
    if (OnUserLoadEventCompletd)
    {
        $.getJSON("/apex/MAUserAJAXResources","action=store_pref_measure_type&id=" + UserId + "&preftype=" + document.getElementById("ProximityRadiusMeasurementType").value + "&proxrad=" + document.getElementById("ProximityRadius").value,function(json)
        { 
            if(json.success)
            {
                Debug("Updated Preferred Unit of Measurement " + json.id);
            }
            else
            {
                NotifyError("Error Updating Preferred Unit of Measurement:",json.error);
                Debug("Error Updating Preferred Unit of Measurement: " + json.error);
            }
        });
    }
}

function ToggleTrafficOverlay()
{
    
    if (!TrafficIsOn)
    {
        TrafficIsOn = true;
        map.overlays.add(map.TRAFFIC);
        map.overlays.add(map.TRAFFIC_INCIDENTS);
    }
    else
    {
        TrafficIsOn = false;
        map.overlays.remove(map.TRAFFIC_INCIDENTS);
        map.overlays.remove(map.TRAFFIC);
    }
}
function NotifyError(pTitle,pMessage)
{
    $("#container").notify("create", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: false,
            speed: 100
        }
    );
}

function NotifyWarrning(pTitle,pMessage)
{
    $("#container").notify("create", "Warning-Template", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: 5000,
            speed: 1000
        }
    );
}

function AbleToPlot(SavedQueryId)
{
    Debug("AbleToPlot: " + SavedQueryId);
    if ($.inArray(SavedQueryId, VisibleQueries) >= 0)
    {
        return false;
    }
    else
    {
        return true;
    }
}

function RemoveQueryIdFromVisibleQueries()
{
    /*Deprecated*/
    Debug("This Function Has Been Deprecated, Please Use RemoveSavedQuery(SavedQueryId)");
}

function GetAddressFieldResults(record, FieldName)
{
    var rValue = "";
    
    if (FieldName != null)
    {
        //Debug("GetAddressFieldResults - FieldName: " + FieldName);
        //Debug("GetAddressFieldResults - record: " + record);
        
        if (FieldName.indexOf(".") > -1)
        {
            if (record[FieldName.split(".")[0]] != null)
            {
                rValue = (record[FieldName.split(".")[0]][FieldName.split(".")[1]]) ? record[FieldName.split(".")[0]][FieldName.split(".")[1]] : "";
            }
        }
        else
        {
            rValue  = (record[FieldName]) ? record[FieldName] : "";
        }
    }
    
    return rValue;  
}

function GetFieldLabel(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.label;
        }
    }
    return "";
}

function GetFieldType(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.type;
        }
    }
    return "";
}

function GetFieldReferenceTo(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.relationshipName == FieldName)
        {
            return field.referenceTo;
        }
    }
    return "";
}

function GetRelationshipName(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.relationshipName;
        }
    }
    return "";
}

function unique(arrayName)
{
    //Return Unique Array
    var ReturnArray = new Array();
    $.each(arrayName, 
        function(index, value) 
        { 
            if ($.inArray(value, ReturnArray) < 0)
            {
                ReturnArray.push(value);
            } 
        }
    );
    
    return ReturnArray;
}
        
////////////////////  Format Tooltip Types  /////////////////////////////////////
function FormatsObjectValue(v, type, RefId)
{
    try
    {
        if(v == null) v = "";
        if(v != "")
        {
            type = type.toLowerCase();
            if(type == "boolean")
            {
                v = (!v) ? "FALSE" : "TRUE";
            }
            else if(type == "double")
            {
                v = isNaN(v) || v === '' || v === null ? 0 : v;
                
                //var n = v < 0 ? true : false;
                var a = parseFloat(v).toFixed(2).toString().split(".");
                var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                            
                if(parseFloat(a[1]) > 0)
                {
                    v = (b + "." + a[1]); 
                }
                else
                {
                    v = b; 
                }           
            }
            else if(type == "currency")
            {
                v = isNaN(v) || v === '' || v === null ? 0.00 : v;
                v = parseFloat(v).toFixed(2);
                
                for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
                    if(v.indexOf('.') == v.length - (4 * i + 3))
                    {
                        v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
                    }
                    else
                    {
                        v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
                    }
                }
                v = "$" + v;
            }
            else if(type == "date")
            {
                var year = v.substring(0, 4);
                var month = v.substring(5, 7);
                var day = v.substring(8, 10);
                var hrs = v.substring(11, 13);
                var mins = v.substring(14, 16);
                var sec = v.substring(17, 19);
                var d = new Date(year, month, day, hrs, mins, sec);
                d = d.toLocaleDateString();
                v = d;
            }
            else if(type == "datetime")
            {
                var year = v.substring(0, 4);
                var month = v.substring(5, 7);
                var day = v.substring(8, 10);
                var hrs = v.substring(11, 13);
                var mins = v.substring(14, 16);
                var sec = v.substring(17, 19);
                var d = new Date(year, month, day, hrs, mins, sec);
                d = d.toLocaleDateString();
                v = d;
            }
            else if (type == "percent")
            {
                v = (v != "") ? v + "%" : "";
            }
            else if (type == "url")
            {
                if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
                {
                    v = '<a href="' + v + '" target=_blank>' + v + "</a>";
                }
                else
                {
                    v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
                }
            }
            else if(type == "reference")
            {
                v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
            }
        }
        
        return v;
    }
    catch (err) { console.log(err); return v; }
}


function CreatePopupWindow(popID,popWidth)
{

    //var popID = "popup1";
    //var popURL = "#?w=600";
            
    //Pull Query & Variables from href URL
    //var query= popURL.split('?');
    //var dim= query[1].split('&');
    

    //Fade in the Popup and add close button
    $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) });
    
    //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
    var popMargTop = ($('#' + popID).height() + 80) / 2;
    var popMargLeft = ($('#' + popID).width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#' + popID).css({ 
        'margin-top' : -popMargTop,
        'margin-left' : -popMargLeft
    });
    
    //Fade in Background
    $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
    $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer 

}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ClosePopupWindow()
{
    $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
}

function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug(GenDash(LevelsDeep) + '<b>' + key + '</b>: ' + obj[key]);
        
        if (typeof(obj[key]) == "object")
        {
            //DisplayPropertiesOfObject(obj[key],LevelsDeep+1);
        } 
    }
}
        
function GenDash(LevelsDeep)
{
    if (LevelsDeep == 0)
        return '';
    else if (LevelsDeep == 1)
        return "-";
    else if (LevelsDeep == 2)
        return "--";
    else if (LevelsDeep == 3)
        return "---";
    else if (LevelsDeep == 4)
        return "----";
    else if (LevelsDeep == 5)
        return "-----";
    else if (LevelsDeep == 6)
        return "------";
    else if (LevelsDeep == 7)
        return "-------";
    else
        return "--------";
}

function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function ClearDebugWindow()
{
    $('#DebugOut').html("<b>Log Cleared</b>");
}

function ShowSavedQryPopup()
{

    $('#tabs-SavedQry').tabs({remote:true}); 
    jscolor.init();
    
    $('#LoadingPopup').fadeOut();
    
    
    $('#SavedQueryPopup').fadeIn().css({ 'width': Number( 700 ) });
    

    var popMargLeft = ($('#SavedQueryPopup').width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#SavedQueryPopup').css({ 
        'margin-left' : -popMargLeft,
        'max-height': '550px'
    });
    
    $('#SavedQueryPopup').css("top", (($(window).height() - $('#SavedQueryPopup').outerHeight()) / 2) + $(window).scrollTop() + "px");
}

function MoveMapComponentsRight()
{
    /*
    ZoomBar.node.style.marginLeft           = "310px";
    ZoomRectangle.node.style.marginLeft     = "239px";
    ViewControl.node.style.marginLeft       = "310px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "50px";
    */
}

function MoveMapComponentsLeft()
{
    /*
    ZoomBar.node.style.marginLeft           = "5px";
    ZoomRectangle.node.style.marginLeft     = "-67px";
    ViewControl.node.style.marginLeft       = "5px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "-250px";
    */
}

function OpenMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":hidden"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function CloseMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":visible"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function DisplayMapViewPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapToolsPopup');

    $('#MapViewPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function DisplayMapToolsPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#MapToolsPopup').slideToggle('normal', function() {
        // Animation complete.
    });  
}

function DisplayProximityPopup()
{
    CloseMenuIfOpen('MapToolsPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#ProximityPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function PreparePickListEntry(str)
{
    return str.replace(/\s/g,"");
}

function ChangeDivStatus(DivId,str)
{
    document.getElementById(DivId).innerHTML = str;
}

function ShowLoadingDialog()
{
    Debug("ShowLoadingDialog");
}

function HideLoadingDialog()
{
    $('#modalPage123').hide();
}

function ZoomToFit()
{
    map.zoomTo(map.getBoundingBox(),false,"default");
}

function HideBubbles()
{
    for (var i = 0; InfoBubbles.openBubbleHandles.getLength(); i++)
    {
        InfoBubbles.removeBubble(InfoBubbles.openBubbleHandles.get(0));
    }
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ModifyPlottedSavedQueryCount()
{
    if (VisibleQueries.length > 0)
    {
        $('#PlottedSavedQueryCount').html('(' + VisibleQueries.length + ')');
    }
    else
    {
        $('#PlottedSavedQueryCount').html('');
    }
}
function ShowAddressNotFoundPopup()
{
    CreatePopupWindow("AddressNotFoundPopup",600);
}

function SlideToTree()
{
    slider1.goToFirstSlide();
    $('#TreeTab').removeClass('TreeTab-Inactive'); 
    $('#TreeTab').addClass('TreeTab-Active');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Active'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToPlottedQueries()
{
    slider1.goToSlide(1);
    $('#TreeTab').removeClass('TreeTab-Active'); 
    $('#TreeTab').addClass('TreeTab-Inactive');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Active');
}

function SlideToLocations()
{
    slider2.goToFirstSlide();
    $('#DirectionsInputTab').removeClass('TreeTab-Inactive'); 
    $('#DirectionsInputTab').addClass('TreeTab-Active');
    $('#DirectionsOutputTab').removeClass('PlottedQueriesTab-Active'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToDirectionsOutput()
{    
    $('#DirectionsInputTab').removeClass('TreeTab-Active'); 
    $('#DirectionsInputTab').addClass('TreeTab-Inactive');
    $('#DirectionsOutputTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Active');
}

function CloseDebugWindow()
{
    ClosePopupWindow();
}
function FormatAddressFromNokiaObj(NokiaAddressObj)
{
    var street = NokiaAddressObj.street;
    var city = NokiaAddressObj.city;
    var state = NokiaAddressObj.state;
    var country = NokiaAddressObj.country;
    var county = NokiaAddressObj.county ;
    var district = NokiaAddressObj.district;
    var postalcode = NokiaAddressObj.postalCode;
    var suite = NokiaAddressObj.suite;
    var FloorNumber = NokiaAddressObj.floor;
    var houseNumber = NokiaAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}

function FormateAddressFromJSAPIAddressObj(JSAPIAddressObj)
{
    var street = JSAPIAddressObj.street;
    var city = JSAPIAddressObj.city;
    var state = JSAPIAddressObj.state;
    var country = JSAPIAddressObj.country;
    var county = JSAPIAddressObj.county ;
    var district = JSAPIAddressObj.district;
    var postalcode = JSAPIAddressObj.postalCode;
    var suite = JSAPIAddressObj.suite;
    var FloorNumber = JSAPIAddressObj.floor;
    var houseNumber = JSAPIAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}

function EmailDebugLog()
{
    var DebugLogComments = prompt("Comments:","");
    var EmailDebugLogArray = new Array();
    EmailDebugLogArray.push('bbrantly@cloudbilt.com');
    
    var MyJSObject = {
            action: 'email_debug_log',
            replyTo: UserEmailAddress,
            subject: 'Map Anything Debug Log',
            htmlBody: '<b>Comments: </b>' + DebugLogComments + '<br /><br />' + $('#DebugOut').html(),
            toAddresses: EmailDebugLogArray
    };
    
    $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                alert("Debug Log Sent!");
            }
            else
            {
                NotifyError("Error Sending Debug Log Email",obj.error);
                Debug("Error Sending Debug Log Email " + obj.error);
            }
        }
    });
}



// JavaScript Document

/*
var WayPointLI = '<li class="ui-state-default"><span id="RowNumber"></span><a onclick="RemoveAddressRow(this);" style="float:right;margin-right:0;margin-top:0;" data-role="button" data-icon="delete" data-iconpos="notext">Remove</a><input type="text" /></li>';
*/

var WayPointLI = '<li class="ui-state-default"><span id="RowNumber"></span><a style="float:right;margin-right:0;margin-top:0;" onclick="RemoveAddressRow(this);" data-role="button" data-iconpos="notext" data-icon="delete" title="Remove" data-theme="c" class="ui-btn ui-btn-up-c ui-btn-icon-notext ui-btn-corner-all ui-shadow"><span aria-hidden="true" class="ui-btn-inner ui-btn-corner-all"><span class="ui-btn-text">Remove</span><span class="ui-icon ui-icon-delete ui-icon-shadow"></span></span></a><input type="text" /></li>';

//function AddMarkerToTrip(MarkerTitle,Address,Lat,Long)
function AddMarkerToTrip(pMarker)
{
    //Debug("Address: " + pMarker.MarkerAddress);
    //DisplayPropertiesOfObject(pMarker,0);
    
    Debug("Adding Marker to Trip");
    Debug("Lat: " + pMarker.Lat);
    Debug("Long: " + pMarker.Long);
    Debug("Address: " + pMarker.pTp.MarkerAddress);
    Debug("Waypoint Title: " + pMarker.title);
    
    $(WayPointLI)
        .attr('Lat',pMarker.Lat)
        .attr('Long',pMarker.Long)
        .attr('Address',pMarker.pTp.MarkerAddress)
        .attr('WayPointTitle',pMarker.title)
        .appendTo('#sortable')
        .find('input').val(pMarker.title).prop('disabled', true).addClass('DisabledWaypoint');
    
    $( "#sortable" ).find('input').textinput();
    OrderNumbersOnWapPoints();
}

function ShowDirectionsTab()
{
    $("#Queries").hide(0);
    $("#Directions").show(0);
    //$("#Legend").hide(0);
    $("#Proximity").hide(0);
    
    $("#Slider-DirectionsOutput").hide(0);
    $("#Slider-DirectionsInput").show(0);
}

function OrderNumbersOnWapPoints()
{
    $.each($( "#sortable" ).children(), function(key, value) { 
        $(this).attr('Index',key).find('#RowNumber').html(key + 1);
    });
}
function AddAddressRow()
{
    $( "#sortable" ).append(WayPointLI);
    $( "#sortable" ).find('input').textinput();
    OrderNumbersOnWapPoints();
}

function RemoveAddressRow(obj)
{
    $(obj).parent().remove();
    OrderNumbersOnWapPoints();
}

function GetDirections()
{
    ClearDirectionsFromMap();
       
    
    router = new nokia.maps.routing.Manager() //create a route controller
    
    WayPointArray = new Array();
    HasRoutingErrors = false;
    
    var RequiresGeoCoding = false;
    
    var WPIndex = 0;
    
    $.each($( "#sortable" ).children(), function(key, value) { 
        
        //Does the Attribute Lat Exists?
        if ($(this).attr('Lat') != undefined)
        {
            WayPoint = new Object();
            WayPoint.WayPointTitle = $(this).attr('WayPointTitle');
            WayPoint.Address  = $(this).attr('Address');
            WayPoint.Lat  = $(this).attr('Lat');
            WayPoint.Long  = $(this).attr('Long');
            
            //WayPointArray.push(WayPoint);
            
            WayPointArray[WPIndex] = WayPoint;
            WPIndex++;
        }
        else if ($(this).find('input').val() != "")
        {
            $AddressInput = $(this).find('input');
            
            $AddressInput.removeClass();
            
            Debug("Input Value: " + $AddressInput.val());
            
            RequiresGeoCoding = true;
            
            WayPoint = new Object();
            WayPoint.WayPointTitle = unescape($AddressInput.val());
            WayPoint.Address  = unescape($AddressInput.val());
            WayPoint.Index = WPIndex; //$(this).attr('Index');
            
            RoutingGeoCodeList.add(WayPoint);
            WPIndex++;
        }
        else 
        {
            //Remove Element
            $(this).remove();
        }
        
        
    });
    
    if (!RequiresGeoCoding)
    {
        Debug("Doesn't Require Geocoding");
        ProcessWayPoints();
    } 
}

function ClearDirectionsFromMap()
{
    if (mapRoute != null)
    {
        //Remove Map Elements
        map.objects.remove(mapRoute);
        router.clear(); 
    }
    //Clear Directions Text
    $('#DirectionsOutput').empty();
}

function ClearDirections()
{
    if (mapRoute != null)
    {
        map.objects.remove(mapRoute);
        router.clear();
    }
    
    $('#DirectionsOutput').empty();
    $('#DirectionControls').hide();
    
    //Reset Address Elements
    $('#sortable').empty()
    .append(WayPointLI)
    .append(WayPointLI);
    
    $( "#sortable" ).find('input').textinput();
    
    OrderNumbersOnWapPoints();
}
        



function printthis(which) {
                
    var directions = document.getElementById(which).innerHTML;
    
    var newwindow = window.open("","","height=500,width=320,location=0,scrollbars=1");
    directions += '<br><a href="http://www.cloudbilt.com" target="_blank"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
    newwindow.document.write(directions);
    newwindow.focus();
    newwindow.print();
} 

function SendDirectionsEmail()
{
    var EmailAddresses = prompt("Please one or more email addresses separated by ;",UserEmailAddress);
    if (EmailAddresses != null && EmailAddresses != "")
    {
        var HTMLBody = document.getElementById("DirectionsOutput").innerHTML;
        HTMLBody += '<br><a href="http://www.cloudbilt.com"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
        
        var MyJSObject = {
                action: 'email_directions',
                replyTo: UserEmailAddress,
                subject: 'Map Anything Directions',
                htmlBody: HTMLBody,
                toAddresses: EmailAddresses.split(";")
        };
        
        $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                alert("Your Directions Have Been Sent!");
            }
            else
            {
                NotifyError("Error Sending Directions Email",obj.error);
                Debug("Error Sending Directions Email " + obj.error);
            }
        }
        }); 
    }
}
        
function ProcessWayPoints()
{
    try
    {
        Debug("ProcessWayPoints");
        Debug("HasRoutingErrors: " + HasRoutingErrors);
        if (HasRoutingErrors)
        {
            //Cant Process Way Points  
        }
        else
        {
            //SlideToDirectionsOutput();
            
            $('#DirectionsOutput').html('<div style="display:block;float:left;width:100%;margin:0;"><img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/><br /><br/><h2 style="display:block;margin:0 auto;width:200px;text-align:center;">Loading Directions</h2></div>');
                        
            
            Debug("WayPointArray Count: " + WayPointArray.length);
            
            if (WayPointArray.length >= 2)
            {
                var WayPoints = new nokia.maps.routing.WaypointParameterList();
                
                //Add Each Waypoint to the WayPoints List
                $.each(WayPointArray, function(key, value) { 
                    
                    Debug("Adding New Element to WayPoints");
                    Debug("Lat: " + value.Lat);
                    Debug("Long: " + value.Long);
                                               
                    WayPoints.addCoordinate(new nokia.maps.geo.Coordinate(parseFloat(value.Lat), parseFloat(value.Long)));
                });                
                
                var modes = [{
                    type: "shortest",
                    transportModes: ["car"],
                    trafficMode: "default"
                }];                
                
                var onRouteCalculated = function(observedRouter, key, value)
                    {
                        if (value == "finished") 
                        {
                            try
                            {
                            
                                
                            
                                var routes = observedRouter.getRoutes();
                                //create the default map representation of a route
                                mapRoute = new nokia.maps.routing.component.RouteResultSet(routes[0]).container;
                                map.objects.add(mapRoute);
                                //Zoom to the bounding box of the route
                                map.zoomTo(mapRoute.getBoundingBox(), false, "default");
                          
                                var TotalTime = 0;
                                var TotalLength = 0;
                                
                                //DisplayPropertiesOfObject(routes[0],0);
                                
                                Debug("Mode:");
                                DisplayPropertiesOfObject(routes[0].mode,0);
                                
                                Debug("Summary:");
                                DisplayPropertiesOfObject(routes[0].summary,0);
                                
                          
                                var div_content = "<div class=\"st\"><table style=\"border-collapse:collapse;width:97%;\">";
                          
                                for (var LegIndex=0;  LegIndex < routes[0].legs.length ; LegIndex++)
                                {
                                    var DirectionWayPoint = WayPointArray[LegIndex];
                                    
                                    div_content += "<tr class=\"origin-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\"><div class=\"pin-green\"></div></td><td style=\" padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\">Origin:</td></tr><tr class=\"origin-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
                                    
                                    var leg = routes[0].legs[LegIndex];
                                    
                                    Debug("Length: " + leg.length);
                                    Debug("travelTime: " + leg.travelTime);
                                    
                                    TotalTime += leg.travelTime;
                                    TotalLength += leg.length;
                                    
                                    var Maneuvers = leg["maneuvers"];
                                    
                                    for (var i = 0 ; i < Maneuvers.length; i++)
                                    {
                                        var Maneuver = Maneuvers[i];
                                        
                                        div_content += "<tr class=\"maneuvers\" style=\"background:none;color:#555;font-family:helvetica,arial,sans-serif;font-size:11px;font-weight:normal;border:1px solid #dddddd;\">";
                                        div_content += "<td class=\"maneuver-number\" style=\"font-family:helvetica,arial,sans-serif;font-size:14px;color:#006DB4;font-weight:bold;padding:9px 12px 9px 6px;vertical-align:top;text-align:center;\">" + (i + 1) + "</td>";
                                        div_content += "<td class=\"maneuver-instruction\" style=\"padding:9px 6px 10px 0;color:#222;font-family:helvetica,arial,sans-serif;font-size:11px;\">" + Maneuver["instruction"] + "</td>";
                                        div_content += "</tr>";
                                    }
                                    
                                }
                                
                                var DirectionWayPoint = WayPointArray[WayPointArray.length-1];
                                div_content += "<tr class=\"destination-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;border-bottom:4px solid #ccc;\"><div class=\"pin-red\"></div></td><td style=\" padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;\">Destination:</td></tr><tr class=\"destination-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
    
                                div_content += "</table></div>";
        
                                TotalLength = (TotalLength / 1609.344).toPrecision(4);
                                TotalTime = (TotalTime / 3600).toPrecision(3);                               
    
                                document.getElementById('DirectionsOutput').innerHTML = "<span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Distance</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + (TotalLength - 0) + " miles</span>" ;
                                document.getElementById('DirectionsOutput').innerHTML += "<br /><span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Duration</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + TotalTime + " hours</span>";
    
                                
        
                                document.getElementById('DirectionsOutput').innerHTML += div_content;
                                
                                
                                //document.getElementById("printLink").style.display = "block";
                  
                                
                                //document.getElementById("clearDirBtn").className = "btn";
                                //document.getElementById("clearDirBtn").disabled = false;
                                
                                $('#DirectionControls').show();
                            }
                            catch(err)
                            {
                                Debug("Error Occured While Processing Routing Results");
                                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                                DisplayPropertiesOfObject(err,0);
                            }
                        }
                        else if (value == "failed") 
                        { 
                            Debug("The routing request failed.");
                            NotifyError("The routing request failed.","The routing request failed.");
                        }
                        else
                        {
                            Debug("Routing Request Status: " +  value);
                        }
                    };
                    
              //add the observer function to the routers "state" property
              router.addObserver("state", onRouteCalculated);
              //calculate the route (and call onRouteCalculated afterwards)
              router.calculateRoute(WayPoints, modes);
                
            }
            else
            {
                
            }
        }
    }
    catch(err)
    {
        Debug("Error Occured While Processing Route Waypoints");
        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
        DisplayPropertiesOfObject(err,0);
    }
}

/*Map View Buttons*/
function NormalMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.NORMAL);
    $('#MapViewPopup').dialog('close');
}

function SatelliteMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.SATELLITE);
    $('#MapViewPopup').dialog('close');
}

function TerrainMapView()
{
    map.overlays.remove(map.LABELS);
    map.set("baseMapType", map.TERRAIN);
    //map.overlays.add(map.LABELS);
    $('#MapViewPopup').dialog('close');
}

function DisplayRootFolders()
{
    $.mobile.hidePageLoadingMsg();
    $('#FolderSQList').empty();
    $('<li data-role="list-divider">Folders</li>').appendTo('#FolderSQList');
    
    $('<li data-icon="false"></li>')
        .attr('id','PersonalRoot')
        .append('<a><img src="{!URLFOR($Resource.MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">'+ 'Personal' +'</a>')
        .click(function(e){
            $.mobile.showPageLoadingMsg();
            try {
                sma.MapAnythingMobile.GetPersonalMAFolder(this.id,DisplayMAFolder);
            }
            catch (err) {
                MapAnythingMobile.GetPersonalMAFolder(this.id,DisplayMAFolder);
            }
        })
        .appendTo('#FolderSQList');
                
                
    $('<li data-icon="false"></li>')
        .attr('id','CorpRoot')
        .append('<a><img src="{!URLFOR($Resource.MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">'+ 'Corporate' +'</a>')
        .click(function(e){
            $.mobile.showPageLoadingMsg();
            try {                      
                sma.MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
            }
            catch (err) {
                MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
            }
        })
        .appendTo('#FolderSQList');
                
    $("#FolderSQList").listview("refresh");
    
    $('#TreeBackButton').hide();
}


function DisplayMAFolder(MAFolder,Type)
{
    $.mobile.hidePageLoadingMsg();
    
    $('#TreeBackButton').show();
    
    $("#TreeBackButton").unbind("click");
                    
    if (MAFolder.ParentId == 'Root')
    {
        $('#TreeBackButton').click(function() {
            $.mobile.showPageLoadingMsg(); 
            DisplayRootFolders();
        });
    }
    else
    {   
        $('#TreeBackButton').click(function() {
            $.mobile.showPageLoadingMsg(); 
            if (Type == 'Corp')
            {
                try {
                    sma.MapAnythingMobile.GetCorpMAFolder(MAFolder.ParentId ,DisplayCorpMAFolder);
                }
                catch (err) {
                    MapAnythingMobile.GetCorpMAFolder(MAFolder.ParentId ,DisplayCorpMAFolder);
                }
            }
            else
            {
                try {
                    sma.MapAnythingMobile.GetPersonalMAFolder(MAFolder.ParentId ,DisplayPersonalMAFolder);
                }
                catch (err) {
                    MapAnythingMobile.GetPersonalMAFolder(MAFolder.ParentId ,DisplayPersonalMAFolder);
                }
            }
            
        });
    }
    
    
    $('#FolderSQList').empty();
    
    $('<li data-role="list-divider">Folders</li>').appendTo('#FolderSQList');
    
    if (MAFolder.SubFolders.length > 0)
    {
        $.each(MAFolder.SubFolders, function(index,value)
        {
            $('<li data-icon="false"></li>')
                .attr('id',this.Id)
                .append('<a><img src="{!URLFOR($Resource.MapAnything, 'images/mobile/MASQFolder.png')}" alt="F" class="ui-li-icon">'+this.Name +'</a>')
                .click(function(e){
                    $.mobile.showPageLoadingMsg();  
                    //sma.MapAnythingMobile.GetCorpMAFolder(this.id,DisplayCorpMAFolder);
                    if (Type == 'Corp')
                    {
                        try {
                            sma.MapAnythingMobile.GetCorpMAFolder(this.id ,DisplayCorpMAFolder);
                        }
                        catch (err) {
                            MapAnythingMobile.GetCorpMAFolder(this.id ,DisplayCorpMAFolder);
                        }
                    }
                    else
                    {
                        try {
                            sma.MapAnythingMobile.GetPersonalMAFolder(this.id ,DisplayPersonalMAFolder);
                        }
                        catch (err) {
                            MapAnythingMobile.GetPersonalMAFolder(this.id ,DisplayPersonalMAFolder);
                        }
                    }
                })
                .appendTo('#FolderSQList');
        });
    }
    else
    {
        $('<li>NoFolders</li>').appendTo('#FolderSQList');
    }
    
    $('<li data-role="list-divider">Saved Queries</li>').appendTo('#FolderSQList');
    
    if (MAFolder.SubSavedQueries.length > 0)
    {
    
        $.each(MAFolder.SubSavedQueries, function(index,value)
        {
            //remove namespace
            removeNamespace('{!namespace}', value);
        
            var pLITag;
            
            if (AbleToPlot(value.Id))
            {
                pLITag = '<li data-icon="false"></li>';
            }
            else
            {
                pLITag = '<li data-icon="check"></li>';
            }
        
            //Debug("SQ Name: " + this.Name + " PLF: " + value.PicklistField__c);
            if (value.PicklistField__c == undefined)
            {
                $(pLITag)
                .attr('id',this.Id)
                .append('<a><img src="{!URLFOR($Resource.MapAnything, 'images/mobile/StandardSQIcon.png')}" alt="S" class="ui-li-icon">'+this.Name +'</a>')
                .click(function(e){
                    //$.mobile.showPageLoadingMsg();  
                    //DisplayPropertiesOfObject(value,0);
                    if (AbleToPlot(this.id))
                    {
                        $(this).find('.ui-btn-inner').append('<span class="ui-icon ui-icon-check ui-icon-shadow"></span>');
                        //PlotSavedQuery(this.id,false);
                        Debug("VisibleAreaCB: " + $('#VisibleAreaCB').is(':checked'));
                        
                        PlotSavedQuery(this.id,$('#VisibleAreaCB').is(':checked'));
                        //VisibleAreaCB
                    }
                    
                })
                .appendTo('#FolderSQList');
            }
            else
            {
                $(pLITag)
                .attr('id',this.Id)
                .append('<a><img src="{!URLFOR($Resource.MapAnything, 'images/mobile/LegendSQIcon.png')}" alt="L" class="ui-li-icon">'+this.Name +'</a>')
                .click(function(e){
                    //$.mobile.showPageLoadingMsg();  
                    if (AbleToPlot(this.id))
                    {
                        $(this).find('.ui-btn-inner').append('<span class="ui-icon ui-icon-check ui-icon-shadow"></span>');
                        PlotSavedQuery(this.id,$('#VisibleAreaCB').is(':checked'));
                    }
                    
                })
                .appendTo('#FolderSQList');
            }
        
            
        });
    }
    else
    {    
        $('<li>No Queries</li>').appendTo('#FolderSQList');
    }
    
    $("#FolderSQList").listview("refresh");

}

function DisplayCorpMAFolder(MAFolder,message)
{
    DisplayMAFolder(MAFolder,'Corp');
}


function DisplayPersonalMAFolder(MAFolder,message)
{
    DisplayMAFolder(MAFolder,'Personal');
}
    
    
function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug('<b>' + key + '</b>: ' + obj[key]);
    }
}
function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function CheckboxValue()
{
    Debug("Visible Area: " + $("#flip-b").val());
}


function AppendSavedQueryToPlottedTable(SavedQryID,SavedQryRecord)
{
    //PlottedQueriesTable
    var HTMLToAppend = '';
    
    HTMLToAppend += '<tr id="Row_' + SavedQryID + '" class="PlottedRowUnit"><td>'; //Start of Row
    HTMLToAppend += '<div id="PrimaryDIV" style="margin:0;padding:0;">'
    
    //Start Information Table
    HTMLToAppend += '<table style="width:270px;">'
    

    HTMLToAppend += '<td rowspan="2" style="width:16px;"><div style="padding:0px 0px 0px 0px;" id="' + SavedQryRecord.Id  + '"><img src="' +LoadingGIFUrl +'"/></div></td>';         
    
    HTMLToAppend += '<td colspan="2"><b>' + SavedQryRecord.Name + '</b></td>';
    
    //remove namespace
    removeNamespace('{!namespace}', SavedQryRecord);
    
    if (SavedQryRecord.PicklistField__c != null)
    {
        HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><table border="0" cellspacing="0" cellpadding="0" align="right"><tr height="5px;"><td width="5px;" style="background-color:red;"></td><td width="5px;" style="background-color:green;"></td></tr><tr height="5px;"><td width="5px;" style="background-color:blue;"></td><td width="5px;"style="background-color:yellow;"></td></tr></table></td>';
    }
    else
    {
        if (SavedQryRecord.IconColor__c && SavedQryRecord.IconColor__c.indexOf('image:') == 0) {
            HTMLToAppend += '<td rowspan="2" style="text-align:center;"><img src="/servlet/servlet.FileDownload?file='+SavedQryRecord.IconColor__c.split('image:')[1]+'" style="height: 20px; max-width: 30px;" /></td>';
        }
        else {
            HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><div style="padding:0px 0px 0px 0px; width: 10px; height: 10px; background-color:' + SavedQryRecord.IconColor__c +';"></div></td>';
        }
    }
    
    
    
    HTMLToAppend += '</tr><tr id="Row_' + SavedQryID + '">';
    HTMLToAppend += '<td style="color:gray;">' + SavedQryRecord.BaseObject__r.Name__c + '</td>';
    HTMLToAppend += '<td style="text-align:left;"><span id="' + SavedQryID + '_Stats" style="display:none;">';
    HTMLToAppend += '<table cellpadding="2" cellspacing="0" align="left"><tr>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Count"></span></td>';
    HTMLToAppend += '<td>of</td>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Total"></span></td>';
    HTMLToAppend += '</tr></table></span></td>';
    


    HTMLToAppend += "</tr>";
    HTMLToAppend += '</table>' //End Information Table
       
    HTMLToAppend += '</div>'
    HTMLToAppend += '</td></tr>'; //End of Row
    
    $('#PlottedQueriesTable').append(HTMLToAppend);
}   
        
function ToggleMissingAddressContent(obj)
{
    if ($(obj).html() == "Show")
    {
        $(obj).html('Hide');
        
    }
    else
    {
        $(obj).html('Show');
    }
    
    
    
    $(obj).parent().find('div').slideToggle('slow', function() {
        // Animation complete.
      });
    
}   
        
function AddToMissingAddressesTab(pTp,sReason)
{
    try
    {
        //Debug("AddToMissingAddressesTab " + pTp.QryId);
        
        ProcessedSavedQueries[pTp.QryId].AddressesNotFound++;
        
        if (ProcessedSavedQueries[pTp.QryId].AddressesNotFound == 1)
        {
            var HTMLToAdd = '';
            
            HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Header" >';
                HTMLToAdd += pTp.queryName + ' <span id="count">(1)</span> <a onclick="ToggleMissingAddressContent(this);">Hide</a>';
                
                HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Content">';
                    HTMLToAdd += '<table cellpadding="3" id="' + pTp.QryId + '_MissingAddresses_Table" style="width:100%;">';
                    
                    HTMLToAdd += '<tr>';
                        HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObject + '">' + pTp.ToolTip1V + '</a></td>';
                        HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                        HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
                    HTMLToAdd += '</tr>';
                    
                    HTMLToAdd += '</table>';
                HTMLToAdd += '</div>';
            HTMLToAdd += '</div>';
            
            $('#MissingAddressesContent').append(HTMLToAdd);
        }
        else
        {
            HTMLToAdd = '<tr>';
                HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObject + '">' + pTp.ToolTip1V + '</a></td>';
                HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
            HTMLToAdd += '</tr>';
            
            $('#' + pTp.QryId + '_MissingAddresses_Table').append(HTMLToAdd);
            
            $('#' + pTp.QryId + '_MissingAddresses_Header > span').html('(' + ProcessedSavedQueries[pTp.QryId].AddressesNotFound + ')');
            
            
        }
        
       
        
        if (ProcessedSavedQueries[pTp.QryId] == undefined)
        {
            DisplayPropertiesOfObject(ProcessedSavedQueries,0);
            Debug('<span style="color:red;">ProcessedSavedQueries[' + pTp.QryId + '] Is Undefined');
        }
        else
        {
            //Debug("Object Id: " + pTp.RecordId);
            ProcessedSavedQueries[pTp.QryId].ProcessedMarkersCount++;
            ProcessedSavedQueries[pTp.QryId].SetProccessingStatus();
        }
        
    }
    catch(err)
    {
        Debug("Error, AddToMissingAddressesTab, " + err.description);
        
        DisplayPropertiesOfObject(err,0);
        
        DisplayPropertiesOfObject(pTp,0);
    }
    
}
        

function ProduceMarkerContent(obj)
{
    

    var MarkerContent = '';

    //Marker Name
    MarkerContent += '<div id="MarkerName">';
    MarkerContent += '<a href="/' + obj.pTp.RecordId + '" target="_blank">' + obj.pTp.ToolTip1V + '</a>';
    MarkerContent += '</div>';
    
    //Marker Address
    MarkerContent += '<div id="MarkerAddress">';
    if (obj.pTp.FormatedMarkerAddress == undefined || obj.pTp.FormatedMarkerAddress == null)
    {
        MarkerContent += obj.pTp.MarkerAddress;
    }
    else
    {
        MarkerContent += obj.pTp.FormatedMarkerAddress;
    }
    
    MarkerContent += '</div>';
    
    //Put Picklist Field Information 
    if (obj.pTp.PicklistFieldLabel != "" && obj.pTp.PicklistFieldLabel != undefined)
    {
        MarkerContent += '<div id="MarkerPickListInfo">';
        MarkerContent += '<b>Legend Information</b>';
        MarkerContent += '<table>';
        MarkerContent += '<tr>';
        MarkerContent += '<td><b>' + obj.pTp.PicklistFieldLabel + ':</b></td>';
        MarkerContent += '<td>' + obj.pTp.PicklistFieldValue + '</td>';
        MarkerContent += '</tr>';
        MarkerContent += '</table>';
        MarkerContent += '</div>';
    }

    //Tool Tips
    MarkerContent += '<div id="MarkerToolTips">';
    MarkerContent += '<table>';
    if (obj.pTp.ToolTip2L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip2L,obj.pTp.ToolTip2V); }
    if (obj.pTp.ToolTip3L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip3L,obj.pTp.ToolTip3V); }
    if (obj.pTp.ToolTip4L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip4L,obj.pTp.ToolTip4V); }
    if (obj.pTp.ToolTip5L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip5L,obj.pTp.ToolTip5V); }
    if (obj.pTp.ToolTip6L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip6L,obj.pTp.ToolTip6V); }
    if (obj.pTp.ToolTip7L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip7L,obj.pTp.ToolTip7V); }
    MarkerContent += '</table>';    
    MarkerContent += '</div>';
    
    
    
    //Actions
    MarkerContent += '<table id="MarkerActionButtons"><tr><td>';
        MarkerContent += '<tr>';                        
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="AddToTrip-' + obj.pTp.ContentKey + '" data-label="Add to Trip">Add to Trip</a></td>';                        
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="SetProxCenter-' + obj.pTp.ContentKey+ '" data-label="Set Proximity Center">Set Proximity Center</a></td>';
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="RemoveMarker-' + obj.pTp.ContentKey+ '" data-label="Remove Marker">Remove Marker</a></td>';
        MarkerContent += '</tr>';
        
        MarkerContent += '<tr style="height:5px;"><td></td></tr>';   
        MarkerContent += '<tr>';         
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton activitybutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=log_call&id=' + obj.pTp.RecordId + '" data-label="Log a Call">Log a Call</a></td>';
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton activitybutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_task&id=' + obj.pTp.RecordId + '" data-label="New Task">New Task</a></td>';
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton activitybutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_event&id=' + obj.pTp.RecordId + '" data-label="New Event">New Event</a></td>';
        MarkerContent += '</tr>';
    
        MarkerContent += '<tr style="height:5px;"><td></td></tr>';   
        MarkerContent += '<tr>';       
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton verifiedlocationbutton" style="width:100px;" id="SetVerifiedLocation-' + obj.pTp.ContentKey+ '" data-label="Set Verified Location">Set Verified Location</a></td>';  
            MarkerContent += '<td style="width:33%;"><a class="button1-white actionbutton chatteractivitybutton" style="width:100px;" id="CheckIn-' + obj.pTp.ContentKey+ '" data-label="Check In">Check In</a></td>';               
            MarkerContent += '<td style="width:33%;"></td>'; 
        MarkerContent += '</tr>';
        
        MarkerContent += '<tr style="height:5px;"><td></td></tr>';   
        MarkerContent += '<tr>';       
            MarkerContent += '<td style="width:33%;"></td>';  
            MarkerContent += '<td style="width:33%;"></td>';               
            MarkerContent += '<td style="width:33%;"></td>'; 
        MarkerContent += '</tr>';

    MarkerContent += '</td></tr></table>'; //End Acitons Tab
    
    //custom actions
    MarkerContent += '<div class="MarkerCustomActionButtons" style="overflow: hidden; padding: 3px; border: none;">';
        MarkerContent += '<a class="button1-white customactionbutton" style="float: left; cursor: pointer;" data-value="LeadDisposition">Knock Disposition</a>';
    /*
    $.each(customButtons, function (index, button) {
        MarkerContent += '<a class="button1-white customactionbutton" style="float: left; cursor: pointer;" data-value="'+button.Value+'">'+button.Label+'</a>';
    });
    */
    MarkerContent += '</div>';
    
    if (obj.pTp.RelatedListCount > 0)
    {
        MarkerContent += '<hr/>';
        MarkerContent += '<div id="ajax-' + obj.pTp.ContentKey + '"></div>';
                       
    }

  
    
    return MarkerContent;
    
    
     //Discard For Now
    //MarkerContent += '<a id="Report-' + obj.pTp.ContentKey + '">Report</a>';
    
}

function AddToolTipToMarkerContent(pLabel,pValue)
{
    var out = '';
    if (pLabel != "")
    {
        out += '<tr>';
        out += '<td><b>' + pLabel + ':</b></td>';
        out += '<td>' + pValue + '</td>';
        out += '</tr>';
    }
    return out;
}

function ShowProxDiv()
{
$("#Proximity").show(0);
$("#Directions").hide(0);
//$("#Legend").hide(0);
$("#Queries").hide(0);
}

function ZoomIn()
{
    if (map.zoomLevel != map.maxZoomLevel)
    {
        map.setZoomLevel(map.zoomLevel + 1,"default");
    }
}

function ZoomOut()
{
    if (map.zoomLevel != map.minZoomLevel)
    {
        map.setZoomLevel(map.zoomLevel - 1,"default");
    }
}

/**************************
 *  LinkedIn Integration
 **************************/
        
function linkedInCluster_Click()
{
    var marker = this;
    
    //create the tooltip content
    var $tooltipContent = $('#templates .linkedin-cluster-tooltip').clone();
    var connectionCount = 0;
    $.each(marker.connectionsMap, function (id, connection) {
        connectionCount++;
        $tooltipContent.find('.linkedin-cluster-table').append(
            populateLinkedInRow($('#templates .linkedin-row').clone(), connection)
        );
    });
    $tooltipContent.find('.linkedin-cluster-header').text(connectionCount + ' Connections');
    
    //create info bubble
    InfoBubbles.addBubble(
        $tooltipContent.wrap('<div/>').parent().html(),
        marker.coordinate
    );
       
    //link the tooltip to this marker
    $('.linkedin-cluster-tooltip:visible').data('marker', marker);
}
        
function populateLinkedInRow($row, connection)
{
    if (connection.type == 'Company')
    {
        $row.attr('data-id', connection.id);
        $row.find('.linkedin-picture').html('<img src="'+(connection.squareLogoUrl || connection.logoUrl || "{! URLFOR($Resource.MapAnything, 'images/LinkedIn-NoPicture.png') }")+'" style="width: 80px;" />');
        $row.find('.linkedin-name').html('<a href="http://linkedin.com/company/'+connection.id+'" target="_blank">'+connection.name+'</a>');
        $row.find('.linkedin-headline').html('<a href="'+(connection.websiteUrl || '')+'">'+(connection.websiteUrl ? 'Company Website' : '')+'</a>');
        $row.find('.linkedin-industry').html(connection.markerAddress);
        
        //show actions for companies instead of connections
        $row.find('.linkedin-actions').hide();
        $row.find('.linkedin-companyactions').show();
    }
    else
    {
        var distanceMap = {
            1   : '<span><b>1</b>st</span>',
            2   : '<span><b>2</b>nd</span>',
            3   : '<span><b>3</b>rd</span>'
        };
    
        $row.attr('data-id', connection.id);
        $row.find('.linkedin-picture').html('<img src="'+(connection.pictureUrl || "{! URLFOR($Resource.MapAnything, 'images/LinkedIn-NoPicture.png') }")+'" style="width: 80px;" />');
        $row.find('.linkedin-name').html('<a href="'+connection.siteStandardProfileRequest.url+'" target="_blank">'+connection.firstName + ' ' + connection.lastName+'</a>' + (distanceMap[connection.distance] || ''));
        $row.find('.linkedin-headline').html(connection.headline);
        $row.find('.linkedin-industry').html(connection.markerAddress + ' | ' + connection.industry);
    }
    
    return $row;
}

var linkedInClusterProvider;
var linkedInClusterTheme = {
    getClusterPresentation: function (dataPoints) {
    
        //create a map of ids to connections so we can get back to the appropriate connection from a row
        var connectionsMap = {};
        $.each(dataPoints.Pd, function (index, connection) {
            connectionsMap[connection.id] = connection;
        });
    
        //create and return a marker for this cluster
        return new nokia.maps.map.Marker (dataPoints.getBounds().getCenter(), {
            connectionsMap: connectionsMap,  
            icon: "{! URLFOR($Resource.MapAnything, 'images/LinkedIn-Cluster.png') }",
            anchor: new nokia.maps.util.Point(16, 16),
            eventListener: {
                "click": [linkedInCluster_Click, false, null],
                "tap": [linkedInCluster_Click, false, null]
            }       
        });
    },
    getNoisePresentation: function (dataPoint) {
    
        //create a map of ids to connections so we can get back to the appropriate connection from a row
        var connectionsMap = {};
        connectionsMap[dataPoint.id] = dataPoint;
    
        //return an image marker or a standard marker depending on if we have a 
        if (dataPoint.pictureUrl) {
            return new nokia.maps.map.Marker ([dataPoint.latitude, dataPoint.longitude], {
                connectionsMap: connectionsMap,
                icon: "{! URLFOR($Resource.MapAnything, 'images/LinkedIn-Marker.png') }",
                anchor: new nokia.maps.util.Point(20, 40),
                eventListener: {
                    "click": [linkedInCluster_Click, false, null],
                    "tap": [linkedInCluster_Click, false, null]
                } 
            });
        }
        else {
            return new nokia.maps.map.Marker ([dataPoint.latitude, dataPoint.longitude], {
                connectionsMap: connectionsMap,  
                icon: "{! URLFOR($Resource.MapAnything, 'images/LinkedIn-Marker.png') }",
                anchor: new nokia.maps.util.Point(20, 40),
                eventListener: {
                    "click": [linkedInCluster_Click, false, null],
                    "tap": [linkedInCluster_Click, false, null]
                }
            });
        }
    }
};
function ShowHideMyConnections()
{
    console.log(linkedInClusterProvider);

    IN.User.authorize(function () {
    
        alert('auth');
        
        IN.API.Connections("me").fields('id', 'headline', 'first-name', 'last-name', 'distance', 'industry', 'main-address', 'location:(name,country)', 'picture-url', 'site-standard-profile-request').result(function (connections) {
            
            alert('here');
            console.log(connections);
            
            //geocode all connections
            var linkedInConnections = connections.values;
            var linkedInRequestsOut = 0;
            var linkedInRequestsSuccess = 0;
            var linkedInRequestsFail = 0;
            
            //loop through the connections and create a list of those to geocode, along with the markerAddress to use
            var linkedInConnectionsToGeocode = [];
            $.each((linkedInConnections || []), function (index, connection) {
                connection.isGeocoded = false;
                if (connection.mainAddress) {
                    connection.markerAddress = connection.mainAddress;
                }
                else if (connection.location) {
                    connection.markerAddress = (connection.location.name || '');
                    if (connection.location.country) {
                        connection.markerAddress += ', ' + (connection.location.country.code || '').toUpperCase(); 
                    }
                }
                else {
                    connection.isGeocoded = true;
                    connection.isBadAddress = true;
                    return;
                }
                
                linkedInConnectionsToGeocode.push(connection);
            });
            
            //function to be called when geocoding is complete
            function geocodingComplete() {
                var clusterDataPoints = [];
                    $.each((linkedInConnections || []), function (index, connection) {
                    if (connection.latitude && connection.longitude) {
                        clusterDataPoints.push(connection);
                    }
                });
                
                linkedInClusterProvider = new nokia.maps.clustering.ClusterProvider(map, {
                    eps: 16,
                    minPts: 1,
                    dataPoints: clusterDataPoints,
                    theme : linkedInClusterTheme
                });
                linkedInClusterProvider.cluster();
                
                $('.linkedin-myconnections-loader').hide();
                $('.linkedin-myconnections').show();
            }
            
            //keep sending requests until we're up to 200 or there's nothing left to geocode
            var initialRequestCounter = 0;
            if (linkedInConnectionsToGeocode.length == 0)
            {
                geocodingComplete();
            }
            else
            {
                while (linkedInConnectionsToGeocode.length > 0 && initialRequestCounter < 200)
                {
                    initialRequestCounter++;
                    var recordsToSend = linkedInConnectionsToGeocode.splice(0, 10);
                    linkedInRequestsOut += recordsToSend.length;
                    geocodeMultiple(recordsToSend, function handleGeocode (numSuccess, numFail) {
                        linkedInRequestsOut -= numSuccess + numFail;
                        linkedInRequestsSuccess += numSuccess;
                        linkedInRequestsFail += numFail;
                        
                        //send out a new request if there are any.  move on to rendering if we're done
                        if (linkedInConnectionsToGeocode.length > 0) {
                            var nextRecordsToSend = linkedInConnectionsToGeocode.splice(0, 10);
                            linkedInRequestsOut += nextRecordsToSend.length;
                            geocodeMultiple(nextRecordsToSend, handleGeocode);
                        }
                        else if (linkedInRequestsOut == 0) {
                            geocodingComplete();
                        }
                    });//end geocode record
                }//end while
            }
        }).error(function (error) {
            alert('Error');
            $.each(error, function (key, val) {
                alert(key + ' -> ' + val);
            });
        });
    });
}

function geocodeMultiple(objectsToGeocode, callback, additionalRequestData)
{
    //find a parent address field if there is one (need this to know which record to update with the geo data)
    var parentAddressField = '';
    if (additionalRequestData && additionalRequestData.LatitudeField && additionalRequestData.LatitudeField.indexOf('.') != -1) {
        parentAddressField = additionalRequestData.LatitudeField.split('.')[0];
    }
    
    //put a geocoding index on each object so that we can match up the returns
    var geocodeIndex = 1;
    var geocodeRequestObjects = [];
    var objectsToGeocodeMap = {};
    $.each(objectsToGeocode, function (index, obj) {
        geocodeRequestObjects.push({
            geocodeIndex: geocodeIndex,
            searchtext: obj.markerAddress,
            IdToUpdate: obj.record
                ? (parentAddressField == '' ? obj.record.Id : obj.record[parentAddressField].Id)
                : null
        });
        objectsToGeocodeMap[geocodeIndex] = obj;
        geocodeIndex++;
    });
    
    var requestData = $.extend(
        (additionalRequestData || {}), 
        {
            action: 'geocodeMultiple',
            serializedObjectsToGeocode: JSON.stringify(geocodeRequestObjects) 
        }
    );
    $.getJSON("/apex/MAGeoCodeAJAXResources", requestData, function(response)
    {
        var numSuccess = 0;
        var numFail = 0;
        if (response.success)
        {
            $.each(response.results, function (index, result) {
                var obj = $.extend(objectsToGeocodeMap[result.geocodeIndex], {
                    isBadAddress    : result.geoData.IsBadAddress,
                    latitude        : result.geoData.Latitude,
                    longitude       : result.geoData.Longitude,
                    markerLatitude  : result.geoData.Latitude,
                    markerLongitude : result.geoData.Longitude                      
                });

                if (!obj.isBadAddress) {
                    numSuccess++;
                }
                else {
                    numFail++;
                }
            });
            
            //check for records that couldn't be updated
            $.each(response.SaveResults, function (index, saveResult) {
                if (!saveResult.success) {
                    try { Debug('Update Failed: ' + saveResult.errors[0]); } catch (err) { }
                }
            });  
        }
        else
        {
            $.each(objectsToGeocode, function (index, obj) {
                obj.isGeocoded = obj.isBadAddress = true;
            });
            numFail += objectsToGeocode.length;
        }
        
        try { callback(numSuccess, numFail); } catch (err) { }
    })
    .error(function () {
        $.each(objectsToGeocode, function (index, obj) {
            obj.isGeocoded = obj.isBadAddress = true;
        });
        try { callback(0, objectsToGeocode.length); } catch (err) { }
    });
}

    </script>
    
    <style>
  
  
  div.slider-tabs {
  clear:both;
  margin-bottom:12px;
  padding:0;}
  
  div.slider-tabs ul.ui-grid-a li.ui-block-a a span.ui-btn-inner,
  div.slider-tabs ul.ui-grid-a li.ui-block-b a span.ui-btn-inner {
  padding:0;
  }
  
  div.slider-tabs ul.ui-grid-a li.ui-block-a a span.ui-btn-inner span.ui-btn-text,
  div.slider-tabs ul.ui-grid-a li.ui-block-b a span.ui-btn-inner span.ui-btn-text {
  padding:4px;
  display:block;
  }
    
  div.ui-navbar ul.ui-grid-c .ui-btn-icon-top .ui-btn-inner {
  padding:12px 2px;
  }
  
  div#Sidebar a#tabQueries{
  -moz-border-radius-bottomleft: 1em;
  -webkit-border-bottom-left-radius: 1em;
  border-bottom-left-radius: 1em;
  -moz-border-radius-topleft: 1em;
  -webkit-border-top-left-radius: 1em;
  border-top-left-radius: 1em;
  }
  
  
  /*
    div#Sidebar a#TreeTab{
  -moz-border-radius-bottomleft: .5em;
  -webkit-border-bottom-left-radius: .5em;
  border-bottom-left-radius: .5em;
  -moz-border-radius-topleft: .5em;
  -webkit-border-top-left-radius: .5em;
  border-top-left-radius: .5em;
  }

  div#Sidebar a#PlottedQueriesTab{
  -moz-border-radius-bottomright: .5em;
  -webkit-border-bottom-right-radius: .5em;
  border-bottom-right-radius: .5em;
  -moz-border-radius-topright: .5em;
  -webkit-border-top-right-radius: .5em;
  border-top-right-radius: .5em;
  }
  */
div#Sidebar div.ui-navbar ul.ui-grid-c li a.ui-btn span.ui-btn-inner{
padding:1em 0;
}

                div#Header .ui-btn{
                margin:1px 0 0 5px;
                }
                div#Header .ui-field-contain {
                clear:none;
                }  
                div#Header .ui-select {
                width:100%;
                }
                       
                div#Header label{
                margin:7px 0 0 0;
                font-size:14px;
                }       
                
                div.bx-wrapper {
                display:block;float:left;
                }
                
                
                div#Queries, div#Directions, div#Legend, div#Ranges {
    background: none;
    display: block;
    position: relative;
    z-index: 11;
    height:630px;
    padding:0;
    margin:0;
}

#Sidebar {
padding:10px;
width:310px;
}

ul#FolderSQList {
}

div#Sidebar div#Queries fieldset.ui-grid-a div.ui-block-a a#TreeTab.ui-btn span.ui-btn-inner,
div#Sidebar div#Directions fieldset.ui-grid-a div.ui-block-a a#TreeTab.ui-btn span.ui-btn-inner{
padding:.6em 5px;
}

div#Queries fieldset.ui-grid-a div.ui-block-a a,
div#Directions fieldset.ui-grid-a div.ui-block-a a{
margin:0 2px 10px 3px;
  -moz-border-radius-bottomright: .5em;
  -webkit-border-bottom-right-radius: .5em;
  border-bottom-right-radius: .5em;
  -moz-border-radius-topright: .5em;
  -webkit-border-top-right-radius: .5em;
  border-top-right-radius: .5em;
}

div#Queries fieldset.ui-grid-a div.ui-block-b a,
div#Directions fieldset.ui-grid-a div.ui-block-b a{
margin:0 3px 10px 2px;
  -moz-border-radius-bottomleft: .5em; 
  -webkit-border-bottom-left-radius: .5em;
  border-bottom-left-radius: .5em;
  -moz-border-radius-topleft: .5em;
  -webkit-border-top-left-radius: .5em;
  border-top-left-radius: .5em;
}
body a.ui-btn:hover {color:#666;}
body a.ui-btn-active:hover {color:#fff;}

ul#sortable {
display;block;
float:left;
width:295px;
margin:0;
padding:0 0 0 5px;
list-type:none;
list-style-type:none;
}

ul#sortable li{
margin:0 5px 5px 0;
padding:2px;
border:none;
background:none;
display:block;
float:left;
width:280px;
}

ul#sortable li span#RowNumber{
display:block;
float:left;
margin:3px 0 0 0;
padding:0;
width:15px;
font-size:18px;
text-align:center;
}

ul#sortable li input{
margin:0;
padding:2px 8px;
width:200px;
font-size:18px;
float:right;
}

a.TreeTab-Active {
background:#000;
}

div#Directions div.ui-controlgroup{
display:block;
float:left;
width:100%;
}

div#Directions div.ui-controlgroup a {
width:30%;
}

div#Directions div.ui-controlgroup a.ui-controlgroup-last {
width:39%;
}

div#Directions div.ui-controlgroup a.ui-corner-left span.ui-btn-inner {
padding:.6em 0 .6em 20px;
}

div#Directions div.ui-controlgroup a.ui-corner-right:hover {
color:#fff;
}

div#Directions div.ui-controlgroup a.ui-corner-right span.ui-btn-inner {
padding:.6em 8px .6em 8px;
}

div#Directions div.ui-controlgroup a.ui-btn span.ui-btn-inner span.ui-icon{
left:7px;
}



</style>

<!-- Hidden Communication Vars -->
<apex:form >
    <apex:inputHidden id="serializedCustomButtons" value="{!serializedCustomButtons}" />
</apex:form>
    
    
    <div data-role="page" class="type-interior">

        <div class="ui-bar ui-bar-b" >
            

            
            
            
            
            
             <div data-role="controlgroup" data-type="horizontal" style="float:left;" >
                <a data-icon="gear" id="sidebar-button">Side Bar</a>
                <!--<a data-icon="plus" onclick="ZoomIn();" data-role="button">Zoom In</a>-->
                <a onclick="ZoomToFit();" data-role="button">Zoom To Fit</a>
                <!--<a data-icon="minus" onclick="ZoomOut();" data-role="button" data-iconpos="right">Zoom Out</a>-->
            </div>
            
            <div data-role="controlgroup" data-type="horizontal" style="float:right;" >
                <a onclick="ShowHidePosition();" data-role="button">My Position</a>
                <!-- <a onclick="ShowHideMyConnections();" data-role="button">LinkedIn Connections</a> -->
                <a onclick="ToggleTrafficOverlay();" data-role="button">Traffic</a>
                <a href="#MapViewPopup" data-role="button" data-rel="dialog" data-transition="flip">View</a>
                <a href="#DebugPopup" data-role="button" data-rel="dialog" data-transition="flip">Debug</a>
                <a href="{!HomeURL}/home/home.jsp" data-role="button">SFDC Home</a>
            </div>
            


          
            
        </div><!-- /header -->
        
                
   
   
        
        
            <div id="SideBar">
                <div data-role="navbar" style="clear:both;margin-bottom:12px;padding:0;width:100%;">
                <ul>
                    <li><a id="tabQueries" class="ui-btn-active">Queries</a></li>
                    <li><a id="tabDirections">Directions</a></li>
                    <li><a id="tabProximity">Proximity</a></li>                    
                </ul>
 
           </div><!--navbar -->
            
            
            
            
            <!--<div class="hr" style="display:block;float:left;height:2px;width:100%;background:#bbb;margin:7px 0 10px 0;border-bottom:1px solid #fff"></div>-->
         
            <div id="Proximity">
            
                <input type="checkbox" name="ProximityCheckbox" id="ProximityCheckbox" class="custom" onchange="ProximityCheckChanged(this);" />
                <label for="ProximityCheckbox">Proximity Enabled</label>
                
                <table>
                    <tr>
                        <td>Radius:</td>
                        <td>
                            <input type="text" name="ProximityRadius" id="ProximityRadius" value="" size="5"  style="width:40px;" />
                        </td>
                        <td>
                            <select id="ProximityRadiusMeasurementType" data-icon="grid" data-theme="c" datarole="button" data-overlay-theme="c" data-native-menu="false" >
                                <option value="MILES">Miles</option>
                                <option value="KM">Km</option>
                                <option value="METERS">Meters</option>
                                <option value="YARDS">Yards</option>
                                <option value="FEET">Feet</option>
                            </select>
                        
                        </td>
                    </tr>
                    <tr>
                        <td>Address</td>
                        <td colspan="2">
                            <textarea  rows="2" cols="20" id="ProximityAddress" ></textarea> 
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td colspan="2">
                            <a onclick="CreateProximityAddress();" data-role="button">Create</a> 
                        </td>
                    </tr>
                </table>
                <div id="ProximityAddressStatus"></div>
                
            
                <div class="header">

                

                </div><!--header-->


            
            
            </div>
        
            <div id="Queries">
           
            <fieldset class="ui-grid-a" style="display:block;float:left;width:100%;margin-bottom:5px;">
                     <div class="ui-block-a"><a id="TreeTab" data-role="button" data-theme="c" data-icon="arrow-l">Tree</a></div> 
                     <div class="ui-block-b"><a id="PlottedQueriesTab" data-role="button" data-theme="c" data-icon="arrow-r" data-iconpos="right">Plotted Queries</a></div>
            </fieldset>
          
          

                    <div id="Slider-Tree" style="display:block;float:left;width:100%;" >
                        
                        <table style="width:100%;">
                            <tr>
                                <td style="vertical-align:middle;">
                                    <input type="checkbox" name="VisibleAreaCB" data-theme="d" id="VisibleAreaCB" class="custom" checked='checked'/>
                                    <label for="VisibleAreaCB">Visible Area</label>
                                </td>
                                <td style="vertical-align:middle;padding-bottom:5px;">
                                    <a data-role="button" data-shadow="false"  data-theme="d" data-icon="back"  id="TreeBackButton">Back</a>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2" style="padding-left:2px; padding-right:2px;">
                                    <ul data-role="listview" data-inset="true" data-theme="c" data-dividertheme="b" id="FolderSQList"></ul>
                                </td>
                            </tr>
                        </table>
                        
                    </div><!--Slider-Tree-->
          
                    <div id="Slider-PlottedSavedQueries" style="display:block;float:left;overflow:auto;padding:0;margin-top:10px;">
        
                        <div style="display:block;float:left;margin:0;padding:0;">
                            <h1 style="margin-top:0;padding-top:0;">Plotted Saved Queries</h1>
            
                                <div id="PlottedQueriesContainer" style="display:block;float:left;width:100%;"  >
                                    <table id="PlottedQueriesTable" cellpadding="2" cellspacing="0"></table>
                                </div><!--PlottedQueriesContainer-->
        
                                <div id="TestMe" style="color:black;"></div>
        
                        </div><!--displayblockfloatleft-->
                    </div><!--Slider-PlottedSavedQueries-->
        

           </div><!--queries-->  
           
           
           
           
           
          <div id="Directions">
     
            
            <fieldset class="ui-grid-a" style="display:block;float:left;width:100%;margin-bottom:5px;">
                     <div class="ui-block-a"><a id="DirectionsInputTab" data-role="button" data-theme="c" data-icon="arrow-l">Locations</a></div> 
                     <div class="ui-block-b"><a id="DirectionsOutputTab" data-role="button" data-theme="c" data-icon="arrow-r" data-iconpos="right">Directions</a></div>
            </fieldset>
            
            
            

                <div id="Slider-DirectionsInput" style="display:block;float:left;width:100%;">
        
        
                
        
                
        
                <div id="DirectionsInput" style="overflow:auto; margin-bottom:5px;padding:0 0 5px 0;border-bottom:1px solid #ddd;">
                    <ul id="sortable">
                        <li class="ui-state-default" index="0">
                      <!--  <div class="draggable"></div>-->
                            <span id="RowNumber">1.</span>
                           <a onclick="RemoveAddressRow(this);" style="float:right;margin-right:0;margin-top:0;" data-role="button" data-icon="delete" data-iconpos="notext">Remove</a>
                            <input type="text" />
                        </li>
                        <li class="ui-state-default" index="1">
                            <span id="RowNumber">2.</span>
                            <a onclick="RemoveAddressRow(this);" style="float:right;margin-right:0;margin-top:0;" data-role="button" data-icon="delete" data-iconpos="notext">Remove</a>
                            <input type="text" />
                        </li>
                    </ul>
        
                </div>
                <div data-role="controlgroup" data-type="horizontal" >
                      <a id="DirectionsAddRow" onclick="AddAddressRow();" data-role="button" data-icon="plus">Add Row</a>
                      <a id="DirectionsClear" onclick="ClearDirections();" data-role="button" data-icon="minus">Clear</a>
                      <a id="GetDirections" onclick="GetDirections();" data-role="button" data-theme="b">Get Directions</a>
                </div>
                    
               </div><!--Slider-DirectionsInput-->
               
               <div id="Slider-DirectionsOutput" style="overflow:auto;float:left;width:100%; display:none;">     
                   <span style="font-family:helvetica,arial,sans-serif;font-size:12px;color:#006DB4;font-weight:bold;">Directions</span>
                    
                    <div id="DirectionControls" style="display:none; width:100%;">
                        <a class="button1-white" onclick="printthis('DirectionsOutput');">Print</a> 
                        <a class="button1-white" onclick="SendDirectionsEmail();">Email Directions</a> 
                        <a class="button1-white" onclick="ClearDirections();">Clear</a> 
                    </div>
                    <br /> <br />
                    
                          
                    <div id="DirectionsOutput" class="scrollable" style="display:block;float:left;width:100%;">
                    
                    </div>
                </div><!--Slider-DirectionsOutput-->

            </div><!--Directions-->   
           
           
    <div id="Legend">
        <div id="LegendInformation"></div>
        <div id="LegendDiv"></div>
    </div><!--Legend-->
    
    <div id="Export">
        

       
   
    
    </div><!--Export-->     
            </div>
                
                <div id="mapdiv" style="border: 1px solid black;"></div>
                
                
           
        
        
            
        <div data-role="footer" style="height:40px;">
            
            <div style="display:block;float:right;">

            <p style="width:auto;display:block;float:left;margin:5px 0 0 0;" >Geocoders</p>
            <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">1:</p>
            <div id="g1Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
            <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">2:</p>
            <div id="g2Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
            <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">3:</p>
            <div id="g3Status" style="display:block;float:left;position:relative;margin:5px 0 0 0;"></div>
            <p style="width:auto;font-weight:bold;display:block;float:left;position:relative;margin:5px 2px 0 15px;">4:</p>
            <div id="g4Status" style="display:block;float:left;position:relative;margin:5px 15px 0 0"></div>
        
        </div><!--float-right-->
        
            
        </div>
            
            
            
         
</div>

<div class="MapViewPopup" id="MapViewPopup" data-role="page" >
    <div data-role="header" data-theme="b">
        <h1>Map View</h1>

    </div><!-- /header -->
    <div data-role="content" data-theme="c">  
        <a data-role="button" data-shadow="false" data-theme="d" id="NormalMapView" onclick="NormalMapView();">Normal View</a><br />
        <a data-role="button" data-shadow="false" data-theme="d" id="TerrainMapView" onclick="TerrainMapView();">Terrain View</a><br />
        <a data-role="button" data-shadow="false" data-theme="d" id="SatelliteMapView" onclick="SatelliteMapView();">Satellite View</a><br />        
    </div>
</div>    

<!-- Start of third page: #popup -->
<div data-role="page" id="DebugPopup">

    <div data-role="header" data-theme="b">
        <h1>Debug Window</h1>

    </div><!-- /header -->

    <div data-role="content" data-theme="c">    
        <div id="DebugOut"></div>
        
        <table>
            <tr>
                <td>
                    <a data-role="button" data-shadow="false" data-rel="back" data-theme="d" data-icon="back" >Close</a>
                </td>
                <td>
                    <a data-role="button" data-shadow="false"  data-theme="d" onclick="ClearDebugWindow();">Clear</a>
                </td>
                <td>
                    <a data-role="button" data-shadow="false"  data-theme="d" onclick="EmailDebugLog();">Email</a>
                </td>
            </tr>
        </table>
    </div><!-- /content -->
    
    
</div><!-- /page popup -->

 <style>
        #container a

        {

            color:white;

        }

    </style>
    
<div id="container">
    <div id="basic-template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:red;">#{title}</h1>
        <p>#{text}</p>
    </div>
    <div id="Warning-Template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:yellow;">#{title}</h1>
        <p>#{text}</p>
    </div>
</div>

<div id='templates' style='display: none;'>

    <!-- LinkedIn Cluter Template -->
    <div class='linkedin-cluster-tooltip'>
        <div class='linkedin-cluster-header'></div>
        
        <div class='linkedin-cluster-table-wrapper'>
            <table class='linkedin-cluster-table'></table>
        </div>
    </div>
    
    <!-- LinkedIn Row Template -->
    <table>
        <tr class='linkedin-row'>
            <td class='linkedin-picture'></td>
            <td class='linkedin-info'>
                <div class='linkedin-name'></div>
                <div class='linkedin-headline'></div>
                <div class='linkedin-industry'></div>
            </td>
            <td class='linkedin-actions'>
                <button class='linkedin-actions-createlead' onclick='linkedIn_CreateLead($(this).closest(".linkedin-row"));'>Create Lead</button>
                <button class='linkedin-actions-inmail' onclick='linkedIn_SendInMail($(this).closest(".linkedin-row"));'>Send InMail</button>
                <button class='linkedin-actions-message' onclick='linkedIn_SendMessage($(this).closest(".linkedin-row"));'>Send Message</button>
            </td>
            <td class='linkedin-companyactions' style='display: none;'>
                <button class='linkedin-actions-createaccount' onclick='linkedIn_CreateAccount($(this).closest(".linkedin-row"));'>Create Account</button>
            </td>
        </tr>
    </table>
    
</div>

<script>
$(document).ready(function() {

    customButtons = JSON.parse($('[id$=":serializedCustomButtons"]').val());

               $('#sidebar-button').click(function()
        {
            $('#SideBar').animate(
                {width:'toggle'}, 
                50, 
                function() 
                    {
                        // Animation complete.
                        if (this.style.display == "none")
                        {
                            //Hidden
                            MoveMapComponentsLeft();
                        }
                        else
                        {
                            //Displayed
                            MoveMapComponentsRight();
                        }
                    }
            );
        }
    );    
   
           
});

$(document).ready(function() {
    $("#Queries").show(0);
    $("#Directions").hide(0);
    //$("#Legend").hide(0);
    
    $("#Proximity").hide(0);
    $("#Slider-PlottedSavedQueries").hide(0);
    $("#Slider-DirectionsOutput").hide(0);
    
    
    /*
        //Does NOT work with mobile jquery
    $( "#sortable" ).sortable({
        placeholder: 'ui-state-placeholder',
        cursor: 'move',
        update: function(ev,ui) {
            OrderNumbersOnWapPoints();
        }
    });
    */
});

$("#tabProximity").click(function () {
    $("#Proximity").show(0);
    $("#Directions").hide(0);
    //$("#Legend").hide(0);
    $("#Queries").hide(0);
});

$("#tabQueries").click(function () {
    $("#Queries").show(0);
    $("#Directions").hide(0);
    //$("#Legend").hide(0);
    $("#Proximity").hide(0);
});
      
$("#tabDirections").click(function () {
    $("#Queries").hide(0);
    $("#Directions").show(0);
    //$("#Legend").hide(0);
    $("#Proximity").hide(0);
});
    
$("#tabExport").click(function () {
    $("#Queries").hide(0);
    $("#Directions").hide(0);
    //$("#Legend").hide(0);
    $("#Export").show(0);
    });
    
    
$("#TreeTab").click(function () {
    $("#Slider-Tree").show(0);
    $("#Slider-PlottedSavedQueries").hide(0);
    });
    
$("#PlottedQueriesTab").click(function () {
    $("#Slider-PlottedSavedQueries").show(0);
    $("#Slider-Tree").hide(0);
        });

$("#DirectionsInputTab").click(function () {
    $("#Slider-DirectionsInput").show(0);
    $("#Slider-DirectionsOutput").hide(0);
    });
    
$("#DirectionsOutputTab").click(function () {
    $("#Slider-DirectionsOutput").show(0);
    $("#Slider-DirectionsInput").hide(0);
    });
    
$("#GetDirections").click(function () {
    $("#Slider-DirectionsOutput").show(0);
    $("#Slider-DirectionsInput").hide(0);
    });


function TreeTabActive(){

if ($("#Slider-Tree:visible")){
$("#TreeTab").addClass("TreeTab-Active");
} else {
}

};


    
document.getElementById("DirectionsInput").style.maxHeight =(520) + "px";

</script>
    
</apex:page>