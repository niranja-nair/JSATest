<apex:component >

<script type='text/javascript'>

    nokia.Settings.set("appId", "cL2-LKZ0bcVr0BcDu7P-"); 
    nokia.Settings.set("authenticationToken", "ygeWiBoAwmMHKgSwNCgxQw");
    (document.location.protocol == "https:") && nokia.Settings.set("secureConnection", "force");

var IsCorporateAdmin = true;
    
var BaseObjectsForSubMenu = [{ label: 'Loading...' }];

var ViewControl       = new nokia.maps.map.component.ViewControl();
var InfoBubbles       = new nokia.maps.map.component.InfoBubbles();
var ScaleBarComponent = new nokia.maps.map.component.ScaleBar();

if (nokia.maps.positioning.Manager) 
{
    var PositioningMgr    = new nokia.maps.positioning.Manager();
}
else
{
    $('#ShowPositionButton').hide();
}

var UserId = '{!$User.Id}';

var LoadingGIFUrl = '{!URLFOR($Resource.MapAnything, 'ajax-loader.gif')}';
var MALoaddingGIFUrl = '{!URLFOR($Resource.MapAnything, 'MapLoadingGif.gif')}';

var VisibleQueries = new Array(); //Used to Determine Which Queries are Visible (List of Ids)
var SavedQueriesObjectIdArray = new Array(); //Used to Store Information about Processed Saved Queries


var ProcessedSavedQueries = new Array();

var UserEmailAddress = "{!$User.Email}";

var OnUserLoadEventCompletd = false;
var map = null;
var ProximityCircle = null;
var DOMNode = null;
var router = null;
var mapRoute = null;
var RouterResponse = null;

var AllLocationMarkers = new Array();

var RangeColorIndex = new Array();
var NumberField=null;
var MinIndex;
var MaxIndex;
var RangeEnabled;

var VisibleLocationMarkers = new Array();

var ObjectsToUpdateWithLatLong = new Array();

//Proximity Search Vars
var pc_Added    = false;
var pc_Lat      = 0;
var pc_Long     = 0;
var pc_Diameter = 0;

//Position Vars
var PositionMarker;
var PositionAccuracyCircle;
var PositionEnabled = false;
var PositionGeoCoder = new nokia.maps.search.Manager();

//Home Vars
var CenterLat;
var CenterLong;
var DefaultZoomLevel;
var DefaultMapType;

var DebugMode = false;

var GeoCodePointsIsRunning = false; //No Longer Needed

var CallBackFunction;

//New Permission Var(s)
var pageSize = 10;
var campaignsPageSize = 10;
var changeownerPageSize = 10;

var ProximityGeoCoder = new nokia.maps.search.Manager();
var RoutingGeoCoder = new nokia.maps.search.Manager();
var RoutingGeoCodeList = new nokia.maps.util.OList();
var RoutingGeoCodeIsRunning;
var WayPointArray = new Array();
var HasRoutingErrors = false;

var GeoCoder1IsRunning;
var GeoCoder2IsRunning;
var GeoCoder3IsRunning;
var GeoCoder4IsRunning;

var GeoCurrentRequest = 0;
var GeoSentRequest = 0;
var GeoProcessedRequest = 0;
var MaxRequestOut = 200;

var $GeoCurrentRequestElement = 0;
var $GeoSentRequestElement = 0;
var $GeoProcessedRequestElement = 0;
var $GeoRequestPendingElement = 0;

var AddressesToBeGeoCoded = new Array();

var PlottedLegendSavedQryId = "";

var GeocOdeListIndex = 1;

var GeoCoderCounter = 0;

var ObjectsToUpdateWithLatLongCleanUpIsRunning = false;

var slider1;

var slider2;

var defaultQueries = [];
var userSettings = {};

$(document).bind('keydown', 'Shift+f1',function (evt){ CreatePopupWindow("DebugWindowPopup",600); });
$(document).bind('keydown', 'Shift+f2',function (evt){ ZoomToFit(); });

$(function() 
{
    document.getElementById("exportedTable").style.height =(screen.height-460) + "px";
    sforce.connection.sessionId = '{!$Api.Session_ID}';
    
    //handle saving checkbox permissions
    $('#permissions-grid').on('change', '.autosave[type=checkbox]', function () {
        var $checkbox = $(this);
        
        //build request data to update the permission
        var RequestData = {
            Id          : $checkbox.closest('.permissions-row').data('record').Id,
            Field       : addNamespace(namespace, $checkbox.attr('data-field')),
            Value       : $checkbox.is(':checked')
        };
        
        //replace the checkbox with a loader and send the request to update the permission
        var $loader = $('#templates .loader').clone().show();
        $checkbox.replaceWith($loader);
        $.getJSON("/apex/MATreeAJAXResources?action=update_permission_field", RequestData, function(json)
        { 
            if(json.success)
            {               
                //update this data in our raw data (this is needed to prevent data loss during searching)
                $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][RequestData.Field] = RequestData.Value;
                        
                //replace the loader with the original checkbox
                $loader.replaceWith($checkbox);
            }
            else
            {
                //replace the loader with the original checkbox
                $loader.replaceWith($checkbox);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            //show error
            $loader.replaceWith($checkbox);
        });
    });     
    
    $('#permissionsfilter-searchtext').keyup(search);
    $('#permissionsfilter-searchtype').change(search);
    
    //handle changing page number
    $('#permissions-page').change(function () { 
        
        //set a loadmask over the permissions grid
        $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
        $('#permissions-grid-status .status span').text('Loading...');
        
        //remove existing rows
        $permissionsGrid = $('#permissions-grid');
        $permissionsGrid.find('.permissions-row').remove();
        
        //calculate start and end points for this page
        var recordStart = ($(this).val() - 1) * pageSize + 1;
        var recordEnd = recordStart + pageSize - 1;
        
        //loop over our matching records and add those that belong on this page
        var index = 1;
        $.each($permissionsGrid.data('matchingRecords'), function (userId, record) {
            
            //add a row for this record if were past the starting point for this page
            if (recordStart <= index)
            {
                //add row
                var $row = populatePermissionsRow($('#templates .permissions-row').clone().data('record', record));
                $permissionsGrid.append($row);
            }
            
            //increment our index and stop looping if were past the endpoint for this page
            index++;
            if (recordEnd < index) { return false; }
        });
        
        //update page info
        $('#permissions-pageinfo').text('Displaying records ' + Math.max(recordStart, 0) + ' - ' + Math.min(recordEnd, $permissionsGrid.data('matchingRecordsCount')) + ' of ' + $permissionsGrid.data('matchingRecordsCount'));
        
        //remove the loadmask over the permissions grid
        $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
    });
    
    /*****************
     *	Add to Campaign
     *****************/
    
    //init grid data
    $('#addtocampaign-select-grid').data({
    	pageSize: 10,
    	rowTemplate: $('#templates .campaign-row'),
    	populateRow: function ($row) {
    		//populate basic record data
		    var record = $row.data('record');
		    
		    $row.find('.campaign-checkbox').attr('checked', record.isSelected);
		    $row.find('.campaign-name').html($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
		    $row.find('.campaign-type').text(record.Type);
		    $row.find('.campaign-status').text(record.Status);
		    $row.find('.campaign-startdate').text(record.StartDate);
		    $row.find('.campaign-enddate').text(record.EndDate);
		    $row.find('.campaign-leads').text(record.NumberOfLeads);
		    $row.find('.campaign-contacts').text(record.NumberOfContacts);
		    $row.find('.campaign-responses').text(record.NumberOfResponses);
		    
		    //return the row
		    return $row;
    	}
    });
    
    //campaign filter handlers
    $('#addtocampaign-select-filters span.link.showadvancedfilters').click(function () {
    	if ($(this).text() == 'Show Advanced Filters')
    	{
    		$(this).text('Hide Advanced Filters');
    		$('#addtocampaign-select-advanced-filters').slideDown();
    	}
    	else
    	{
    		$(this).text('Show Advanced Filters');
    		$('#addtocampaign-select-advanced-filters').slideUp();
    	}
    });
    $('#addtocampaign-select-filters span.link.clearfilters').click(function () {
    	$(this).closest('.grid-wrapper').find('.filter-text, .filter-calendar, .filter-number').val('');
    	grid_Search.call($(this));
    });
    
    //handle selecting campaigns
    $('#addtocampaign-select-grid').on('change', '.campaign-row .campaign-checkbox', function () {
    
    	//update the selection status for this campaign
    	$(this).closest('.campaign-row').data('record').isSelected = $(this).is(':checked');
    	
    	//update the selections counter
    	$('#addtocampaign-select-selectiondetails').data(
    		'numSelected', 
    		($('#addtocampaign-select-selectiondetails').data('numSelected') || 0) + ($(this).is(':checked') ? 1 : -1)
    	);
    	$('#addtocampaign-select-selectiondetails span').first().text($('#addtocampaign-select-selectiondetails').data('numSelected'));
    	
    });
    
    //handle clearing selected campaigns
    $('#addtocampaign-select-selectiondetails span.link.clearselections').click(function () {
    	
    	//uncheck all visible rows
    	$('.campaign-row .campaign-checkbox').attr('checked', false);
    	
    	//update records in memory
    	$.each(($('#addtocampaign-select-grid').data('records') || {}), function (id, record) {
    		record.isSelected = false;
    	});
    	
    	//update the selections counter
    	$('#addtocampaign-select-selectiondetails').data('numSelected', 0);
    	$('#addtocampaign-select-selectiondetails span').first().text('0');
    	
    });
    
    /*****************
     *	Change Owner
     *****************/
     
    //init grid data
    $('#changeowner-select-grid').data({
    	pageSize: 10,
    	rowTemplate: $('#templates .changeowner-row'),
    	populateRow: function ($row) {
    	
    		//populate basic record data
		    var record = $row.data('record');
		    $row.find('.user-name').text(record.Name);
		    
		    //return the row
		    return $row;
    	}
    });
    
    //handle clicking a new owner
    $('#changeowner-select-grid-wrapper').on('click', '.changeowner-row td', function () {
    	//keep track of which user was clicked
    	$('#changeowner-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
       	
       	//show step 2
       	$('#changeowner-select-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
       	$('#changeowner-options-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
    });
    
    /*****************
     *	New Task
     *****************/
     
    //init grid data
    $('#newtask-select-grid').data({
    	pageSize: 10,
    	rowTemplate: $('#templates .changeowner-row'),
    	populateRow: function ($row) {
    	
    		//populate basic record data
		    var record = $row.data('record');
		    $row.find('.user-name').text(record.Name);
		    
		    //return the row
		    return $row;
    	}
    });
    
    //init datepickers
    $('#newtask-details-wrapper .datepicker').datepicker();
    
    //handle clicking an asignee
    $('#newtask-select-grid-wrapper').on('click', '.changeowner-row td', function () {
    	//keep track of which user was clicked
    	$('#newtask-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
       	
       	//show step 2
       	$('#newtask-assignto-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
       	$('#newtask-details-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
    });
    
    /*****************
     *	New Event
     *****************/
     
    //init grid data
    $('#newevent-select-grid').data({
    	pageSize: 10,
    	rowTemplate: $('#templates .changeowner-row'),
    	populateRow: function ($row) {
    	
    		//populate basic record data
		    var record = $row.data('record');
		    $row.find('.user-name').text(record.Name);
		    
		    //return the row
		    return $row;
    	}
    });
    
    //init datepickers
    $('#newevent-details-wrapper .datepicker').datepicker();
    
    //handle clicking an asignee
    $('#newevent-select-grid-wrapper').on('click', '.changeowner-row td', function () {
    	//keep track of which user was clicked
    	$('#newevent-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
       	
       	//show step 2
       	$('#newevent-assignto-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
       	$('#newevent-details-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
    });
    
    /******
     *
     */
    
    //Leave Slider in VF Page
    slider1 = $('#slider1').bxSlider({
        controls: false,
        infiniteLoop: false,
        speed: 200
    });
    
    slider2 = $('#slider2').bxSlider({
        controls: false,
        infiniteLoop: false,
        speed: 200
    }); 
    
    if (LicenseType == 'bronze')
    {
        $('#ShowTrafficButton').hide();
    }
    
    //Remove Copyright Link
    $("#nm_crimg a").attr('disabled','disabled');
         
    
    StartUpJS();
    
    //map.setCopyrightAligment('topright');
    
    InitializeTree();
    AddGeoCoderObservers();
    
    var processResults = function(observedManager, key, value) {
        if (value == "finished") 
        {
            if (observedManager.getLocations().length > 0) 
            {
                Debug("Location Found!"); 
                
                var SearchResult = observedManager.getLocations()[0];
                
                var street = SearchResult.address.street;
                var city = SearchResult.address.city;
                var state = SearchResult.address.state;
                var country = SearchResult.address.country;
                var county = SearchResult.address.county ;
                var district = SearchResult.address.district;
                var postalcode = SearchResult.address.postalCode;
                var suite = SearchResult.address.suite;
                var floor = SearchResult.address.floor;
                var houseNumber = SearchResult.address.houseNumber;
                               
                var compiledStreet = (houseNumber != null ? houseNumber+" ":"") + (floor != null?"Floor - " + floor+" " + ", ":"") + (street!=null?street+" ":"") + (suite != null ? "Suite - " + suite:""); 
                        
                var CompiledAddress  = new Array();
                CompiledAddress.push($.trim(compiledStreet));
                CompiledAddress.push(city);
                CompiledAddress.push(state);
                CompiledAddress.push(postalcode);                
                
                $('#PositionAddress').html(CompiledAddress.join(', '));                   
            }
            else
            {
                $('#PositionAddress').html("Unable to Locate Address");
                Debug("Location Not Found!");
            }
        } 
        else if (value == "failed") 
        {
            showError($('#mapdiv').parent(), 'The request failed');
        }
        else
        {
            Debug("PositionGeoCoder State: " + value);
        }
    };
    
    
    // Attach the observer function to our search manager
    PositionGeoCoder.addObserver("state", processResults);
    
    //var copy = function (obj, key, value, oldValue) { UpdateViewableArea(); };
    //map.set("observers", { center: copy, zoomLevel: copy, heading: copy });
    
    //add an observer that will update the zoom bar if something else changes the zoom level
    map.addObserver('zoomLevel', function (obj, key, newValue, oldValue) { $( ".zoom-bar-slider" ).slider('option', 'value', newValue); });
    
    //zoom-toggle click handlers
    $('.zoom-toggle-plus').click(function () { map.setZoomLevel(map.zoomLevel + 1, 'default'); });
    $('.zoom-toggle-minus').click(function () { map.setZoomLevel(map.zoomLevel - 1, 'default'); });
    
    //zoom-toggle slider
    $( ".zoom-bar-slider" ).slider({
        orientation: "vertical",
        range: "min",
        min: 0,
        max: 20,
        value: map.zoomLevel,
        slide: function( event, ui ) {
            map.setZoomLevel(ui.value, 'default')
        }
    });
    
    //show the zoom bar when mousing over the zoom toggle and remember if we are hovered over the toggle (used to avoid hiding too soon)
    $('.zoom-toggle').hover(
        function () {
            $('.zoom-bar-wrapper').show();
            $(this).data('hovered', true);
        },
        function () {
            $(this).data('hovered', false);
            //$('.zoom-bar-wrapper').mouseout();
        }
    );
    
    //hide the zoom bar after waiting to see if we mouse back over it
    $('.zoom-bar-wrapper').hover(
        function () {
            $(this).data('hovered', true);
        },
        function () {
            $(this).data('hovered', false);
            try { clearTimeout($(this).data('timeout')); } catch (err) { }
            
            $(this).data(
                'timeout', 
                setTimeout(
                    function () { 
                        if ($('.zoom-bar-wrapper').data('hovered') == false && $('.zoom-toggle').data('hovered') == false) {
                            $('.zoom-bar-wrapper').hide();
                        }
                    }, 800
                )
            );
        }
    );
    
    //highlight zoom levels on mouseover
    $('.zoom-level-label').hover(
        function () {
            $(this).closest('.zoom-level').find('.zoom-level-highlight').css('display', 'inline-block');
        },
        function () {
            $(this).closest('.zoom-level').find('.zoom-level-highlight').css('display', 'none');
        }
    );
    
    //handle zoom level clicks
    $('.zoom-level-label').click(function () {
        map.setZoomLevel($(this).closest('.zoom-level').attr('data-zoom-level'), 'default');
    });
    
    //preload images
    var images = new Array();
    var preloaders = ["{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}"];
    for (i = 0; i < preloaders.length; i++) {
        images[i] = new Image();
        images[i].src = preloaders[i];
    }    
}); //end onready

function UpdateViewableArea()
{
    //squaremeters
    //bottomRight
    //topLeft
    
    var bottomRight = map.getViewBounds().bottomRight;
    var topLeft = map.getViewBounds().topLeft;

    $('#bottomRight').html(bottomRight.toString());
    $('#topLeft').html(topLeft.toString());
    
    var height = bottomRight.distance(new nokia.maps.geo.Coordinate(topLeft.latitude,bottomRight.longitude));
    var width = bottomRight.distance(new nokia.maps.geo.Coordinate(bottomRight.latitude,topLeft.longitude));
    
    var a = parseFloat((height /1609.344 ) * (width / 1609.344)).toFixed(2).toString().split(".");
    var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
    
    
    $('#squaremeters').html(b + "." + a[1]);
}

/////////////////////////
//  SavedQueryTree.js  //

function InitializeTree()
{
    /*
        
        Folder
            Type~~Id
            
        Saved Query
            Type~~Id~~Custom~~Type
        
    */
    
    $("#SQTree").bind("create.jstree", function (event, data) 
    { 
        try
        {
            Debug("create.jstree");
            
            /*    
                data.rslt.obj[0] - the node created
                Array Breakdown
                
                0 - NodeType (PersonalRoot, CorporateRoot, RoleRoot, CorporateFolder, PersonalFolder, RoleNameFolder, RoleFolder, RoleUserFolder, CorporateSavedQuery, PersonalSavedQuery, RoleSavedQuery)
                1 - Id (Id of Folder or Saved Query)
                2 - Custom (Custom, NotCustom)
                3 - Type (LegendSavedQuery, SavedQuery)
            */ 
            
            if (data.rslt.obj.attr("Id") == undefined || data.rslt.obj.attr("Id") == "")
            {
                 Debug("create.jstree - Folder");
                 Debug("ParentId: " + data.rslt.parent.attr("Id"));
                 Debug("Name: " + data.rslt["name"]);
                 
                 var ParentNodeType = data.rslt.parent.attr("NodeType");
                 Debug('Parent is ' + ParentNodeType);  
                 
                 var personUser = '0';
                 
                 if (ParentNodeType == "PersonalFolder" || ParentNodeType == "PersonalRoot" || ParentNodeType == "RoleUserFolder")
                 {                         
                    data.rslt.obj.attr("NodeType", "PersonalFolder");
                    
                    if(data.rslt.obj.closest('[NodeType = PersonalRoot]')[0] != null)
                    {
                        personUser = 'user';
                    }
                    else if(data.rslt.obj.closest('[NodeType = RoleUserFolder]')[0] != null)
                    {
                        personUser = data.rslt.obj.closest('[NodeType = RoleUserFolder]').attr("id");
                    }
                 }
                 else if (ParentNodeType == "CorporateFolder" || ParentNodeType == "CorporateRoot")
                 {
                    data.rslt.obj.attr("NodeType", "CorporateFolder");                   
                    data.rslt.obj.attr("create",data.rslt.parent.attr("create"));
                    data.rslt.obj.attr("modify",data.rslt.parent.attr("modify"));
                    data.rslt.obj.attr("delete",data.rslt.parent.attr("delete"));
                    data.rslt.obj.attr("setperm",data.rslt.parent.attr("setperm"));
                 }
                 else if (ParentNodeType == "RoleFolder" || ParentNodeType == "RoleRoot" || ParentNodeType == "RoleNameFolder")
                 {
                    data.rslt.obj.attr("NodeType", "RoleFolder");
                 }
                    
                $.getJSON("/apex/MATreeAJAXResources","action=new_folder&pid=" + data.rslt.parent.attr("Id") + "&name=" + data.rslt["name"] + "&pos=" + data.rslt["position"] + "&NodeType=" + data.rslt.parent.attr("NodeType") + "&personUser=" + personUser,function(json)
                { 
                    if(json.success)
                    {
                        var newnode = data.rslt.obj;
                        newnode.attr("id", json.FolderId);
                        Debug("Node Created in Database! " + json.FolderId);
                    }
                    else
                    {
                        //REMOVE CREATED FOLDER DUE TO ERROR HERE
                        NotifyError("Error Creating Node in Database",json.error);
                        Debug("Error Creating Node in Database " + json.error);
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    Debug("<b>Error Creating Node in Database</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                    NotifyError("Error Creating Node in Database",textStatus + " : " + errorThrown); 
                });
            }
        }
        catch(err)
        {
            Debug("Error, create.jstree");
            DisplayPropertiesOfObject(err,0);
        }
    }); //End create.jstree
    
    $("#SQTree").bind("create_node.jstree", function (event, data) 
    { 
    	//update icons
        $('#SQTree li[rel="SavedQuery"]').each(function () {
            
            updateIcon($(this));
            
        });
        
    });	//End create_node.jstree
    
    $("#SQTree").bind("select_node.jstree", function (event, data) 
        { 
            Debug("Node Selected");
            //var Node = $.jstree._reference('#SQTree')._get_node('#' + data.rslt.obj[0].id);
            //DisplayPropertiesOfObject(data.rslt.obj[0],0);
            
            Debug("Id:" + data.rslt.obj.attr('ID'));
            Debug("NodeType:" + data.rslt.obj.attr('NodeType'));
            Debug("IsCustom:" + data.rslt.obj.attr('IsCustom'));
            Debug("QueryType:" + data.rslt.obj.attr('QueryType'));
            
            
            
            
            
            //Debug("Type: " + data.rslt.obj[0]["type"]);
        }
    ); //End select_node.jstree    
    
    $("#SQTree").bind("rename.jstree", function (event, data) 
    { 
        Debug("rename.jstree");
        Debug("Id: " + data.rslt.obj.attr('ID'));
        
        var NodeType = data.rslt.obj.attr("NodeType");
        
        if(NodeType == "RoleNameFolder" || NodeType == "RoleUserFolder" || NodeType.indexOf('Root') != -1)
        {
            Debug("Cannot Rename "+NodeType+" Folder");
            return;
        }
        
        $.getJSON("/apex/MATreeAJAXResources","action=rename_folder&id=" + data.rslt.obj.attr("Id") + "&name=" + data.rslt["new_name"],function(json)
        { 
            if(json.success)
            {
                Debug("Updated Node " + json.id);
            }
            else
            {
                NotifyError("Error Updating Node",json.error);
                Debug("Error Updating Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Node",textStatus + " : " + errorThrown); 
        }); 
    }); //End rename.jstree
    
    
    $("#SQTree").bind("remove.jstree", function (event, data) 
    { 
        Debug("remove.jstree");
        Debug("Id: " + data.rslt.obj.attr("Id"));
        
        var NodeType = data.rslt.obj.attr("NodeType");
        
        if (NodeType == "RoleNameFolder" || NodeType == "RoleUserFolder" || NodeType.indexOf('Root') != -1)
        {
            Debug("Cannot Remove "+NodeType+" Folder");
            return;
        }
        
        if (NodeType == "CorporateFolder" || NodeType == "PersonalFolder" || NodeType == "RoleFolder")
        {
            Debug("Removing Folder");
        }
        else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery" || NodeType == "RoleSavedQuery")
        {
            Debug("Removing Saved Query");
        }
        
        $.getJSON("/apex/MATreeAJAXResources","action=delete_node&id=" + data.rslt.obj.attr("Id"),function(json)
        { 
            if(json.success)
            {
                Debug("Deleted Node " + json.id);
            }
            else
            {
                NotifyError("Error Deleting Node",json.error);
                Debug("Error Deleting Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Deleting Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Deleting Node",textStatus + " : " + errorThrown); 
        });
    }); //End remove.jstree
    
    
    
   $("#SQTree").bind("move_node.jstree", function (event, data) 
        { 
            Debug("move_node.jstree");
            
            /*
                .o - the node being moved (m.o[0])
                .np - the new parent (m.np[0])
                .op - the former parent (m.op[0])
            */            

            var NewParentNodeType = data.rslt.np.attr("NodeType");
            //var OldParentNodeType = data.rslt.op.attr("NodeType");
            
            var NewParentId = data.rslt.np.attr("Id");
            var OldParentId = data.rslt.op.attr("Id");

            Debug("Current Node Type: " + data.rslt.o.attr("NodeType"));
            Debug("<b>New Parent Id: </b>" + NewParentId );
            Debug("<b>Old Parent Id: </b>" + OldParentId );
            
            //DisplayPropertiesOfObject(data.rslt.np,0);
            
            var SavedQueryParam = '';
            var FolderParam = '';
            
            //Populate URL Params for children
            Debug("New Parent Children Ids");
            $.each($.jstree._reference('#SQTree')._get_children('#' + data.rslt.np.attr("Id")), function(index, value) { 
                
                Debug(index + ": " + $(value).attr("Id") + " (" + $(value).attr("NodeType") + ")" );
                
                var NodeType = $(value).attr("NodeType");
                
                //Set attribute on node for parent NodeType
                if (NodeType == 'PersonalSavedQuery' || NodeType == 'CorporateSavedQuery' || NodeType == 'RoleSavedQuery')
                {   
                    if (NewParentNodeType == 'CorporateRoot' || NewParentNodeType == 'CorporateFolder' )
                    {                   
                        $(value).attr("NodeType","CorporateSavedQuery");
                    }
                    else if (NewParentNodeType == 'PersonalRoot' || NewParentNodeType == 'PersonalFolder' || NewParentNodeType == 'RoleUserFolder' )
                    {                   
                        $(value).attr("NodeType","PersonalSavedQuery");
                    }
                    else if (NewParentNodeType == 'RoleRoot' || NewParentNodeType == 'RoleNameFolder' || NewParentNodeType == 'RoleFolder' )
                    {                   
                        $(value).attr("NodeType","RoleSavedQuery");
                    }
                    
                    SavedQueryParam += $(value).attr("Id") + " " + NodeType + ",";
                }
                else
                {
                    FolderParam += $(value).attr("Id") + " " + NodeType + ",";
                }
            });
            
            //Remove last comma
            SavedQueryParam = SavedQueryParam.slice(0, -1);
            FolderParam = FolderParam.slice(0, -1);
                    
            Debug("SavedQueryParam: " + SavedQueryParam);
            Debug("FolderParam: " + FolderParam);       
            
            $.getJSON("/apex/MATreeAJAXResources","action=move_node&sqry=" + encodeURIComponent(SavedQueryParam) + "&folders=" + encodeURIComponent(FolderParam) + "&npid=" + NewParentId + "&npnt=" + NewParentNodeType,function(json)
            { 
                if(json.success)
                {
                    //Success
                }
                else
                {
                    NotifyError("Error Ordering Node(s)",json.error);
                    Debug("Error Ordering Node(s) " + json.error);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                Debug("<b>Error Ordering Node(s)</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Ordering Node(s)",textStatus + " : " + errorThrown); 
            });
        }
    ); //End move_node.jstree
    
    $("#SQTree").bind("load_node.jstree", function (event, data) 
    {         
        //update icons
        $('#SQTree li[rel="SavedQuery"]').each(function () {
            
            updateIcon($(this));
            
        });
        
    }); //End create_node.jstree
    
    $("#SQTree")
        // call `.jstree` with the options object
        .jstree({
            "xml_data" : {
           "data": "",
            "ajax" : {
                "url" : "/apex/MapAnythingTree2",
                "data" : function (n) { 
                    
                    return { 
                        id : n.attr ? n.attr("id") : 0, 
                        rand : new Date().getTime(),
                        type: n.attr ? n.attr("NodeType") : 0
                    }; 
                }
            },
            "xsl" : "nest"
        },
        "types" : {
            
            "types" : {
                "savedquery" : {
                    "icon" : { 
                        "image" : "http://static.jstree.com/v.1.0rc/_docs/_drive.png" 
                    }
                }
            }
        },
        "core": { 
            "animation" : 10, 
            "strings": 
                {
                    "loading" : "Loading...",
                    "new_node" : "New Folder" 
                }
        
        },
        "crrm" : { 
            "move" : {
                "check_move" : function (m) 
                { 
                    /*
                        .o - the node being moved (m.o[0])
                        .np - the new parent (m.np[0])
                        .op - the former parent (m.op[0])
                    */
                    

                    var ShowRuleInDebug = true;

                    if (m.np.attr("id") == "SQTree")
                    {
                        if (ShowRuleInDebug) { Debug("Prevent Move: Can't Move To Root Level"); }
                        return false;
                    }
                    else if (m.o.attr("NodeType") == "CorporateRoot" || m.o.attr("NodeType") == "PersonalRoot" || m.o.attr("NodeType") == "RoleRoot")
                    {
                        //Prevent Moving Root Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent Moving Root Folders"); }
                        return false;
                    }
                    else if (m.np.attr("NodeType") == 'CorporateSavedQuery' || m.np.attr("NodeType") == 'PersonalSavedQuery' || m.np.attr("NodeType") == 'RoleSavedQuery')
                    {
                        //Prevent Cascading of Saved Queries
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent Cascading of Saved Queries"); }
                        return false;
                    }
                    else if ((m.o.attr("NodeType") == "PersonalFolder" || m.o.attr("NodeType") == "CorporateFolder" || m.o.attr("NodeType") == "RoleFolder") 
                            && (m.op.attr("NodeType") == "CorporateFolder" || m.op.attr("NodeType") == "CorporateRoot")
                            && (m.np.attr("NodeType") == 'PersonalFolder' || m.np.attr("NodeType") == 'PersonalRoot' 
                                || m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleFolder' || m.np.attr("NodeType") == 'RoleUserFolder' || m.np.attr("NodeType") == 'RoleNameFolder'))
                    {
                        //Prevent moving Corporate Folders to Personal Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Corporate Folders to Personal or Role Folders"); }
                        return false;
                    }
                    else if ((m.o.attr("NodeType") == "PersonalFolder" || m.o.attr("NodeType") == "CorporateFolder" || m.o.attr("NodeType") == "RoleFolder") 
                            && (m.op.attr("NodeType") == "PersonalFolder" || m.op.attr("NodeType") == "PersonalRoot"
                                || m.op.attr("NodeType") == 'RoleRoot' || m.op.attr("NodeType") == 'RoleFolder' || m.op.attr("NodeType") == 'RoleUserFolder' || m.op.attr("NodeType") == 'RoleNameFolder')
                            && (m.np.attr("NodeType") == 'CorporateFolder' || m.np.attr("NodeType") == 'CorporateRoot'))
                    {
                        //Prevent moving Personal Folders to Corporate Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Personal or Role Folders to Corporate Folders"); }
                        return false;
                    }
                    else if (m.o.attr("NodeType") == "RoleNameFolder" || m.o.attr("NodeType") == "RoleUserFolder")
                    {
                        //Prevent moving Role Name and User Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Role Name and User Folders"); }
                        return false;
                    }
                    else if (!IsCorporateAdmin && (m.o.attr("NodeType") == "CorporateSavedQuery" && 
                                      (m.np.attr("NodeType") == 'PersonalFolder' || m.np.attr("NodeType") == 'PersonalRoot'
                                        || m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleFolder' || m.np.attr("NodeType") == 'RoleUserFolder' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Corporate Queries to Personal or Role Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: (NOT isCorporate Admin) Prevent moving Corporate Queries to Personal or Role Folders"); }
                        return false;
                    }
                    else if (IsCorporateAdmin && (m.o.attr("NodeType") == "CorporateSavedQuery" && 
                                      (m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Corporate Queries to Role Root Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Corporate Queries to Role Root Folders"); }
                        return false;
                    }
                    else if (!IsCorporateAdmin && ((m.o.attr("NodeType") == "PersonalSavedQuery" || m.o.attr("NodeType") == "RoleSavedQuery") && 
                                      (m.np.attr("NodeType") == 'CorporateRoot' || m.np.attr("NodeType") == 'CorporateFolder')))
                    {
                        //Prevent moving Personal or Role Queries to Corporate Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: (NOT isCorporate Admin) Prevent moving Personal or Role Queries to Corporate Folders"); }
                        return false;
                    }
                    else if (IsCorporateAdmin && ((m.o.attr("NodeType") == "PersonalSavedQuery" || m.o.attr("NodeType") == "RoleSavedQuery") && 
                                      (m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Personal or Role Queries to Corporate Root Folder
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Personal or Role Queries to Role Root Folder"); }
                        return false;
                    }            
                    else if (!IsCorporateAdmin && m.np.attr("create") == 'false')
                    {
                        //Prevent moving to Node with no permission
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
        },
        "dnd" : {
            "copy_modifier" : false,
            "drop_target" : false,
            "drag_target" : false
        },
            "plugins" : ["themes","xml_data","ui","crrm","hotkeys","contextmenu", "dnd", "types"],
            "contextmenu": {items: customMenu}
            
        }); //End jstree
}

function updateIcon($node)
{
    try 
    {
        if ($node.attr('rel') == 'SavedQuery')
        {
            var iconColor = $node.attr('IconColor');
            if (iconColor.indexOf('#') == 0)
            {
                $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: '+iconColor+' !important; background-position: -80px -77px !important;'));
            }
            else if (iconColor.indexOf('image:') == 0)
            {
                var imageURL = "/servlet/servlet.FileDownload?file="+iconColor.split('image:')[1];
                $node.find('a .jstree-icon, a img').replaceWith($("<img style='width: 19px; height: 19px; margin-right: 3px; vertical-align: middle;' />").attr('src', imageURL));
            }
        }
        else if ($node.attr('rel') == 'LegendSavedQuery')
        {
            $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>"));
        }
    } catch (err) { }
}

function SubmitCopyTo()
{   
    var SelectedFolders = new Array();
    $('#CopyToTree').jstree("get_checked",null,true).each(
        function(index,element)
        {
            SelectedFolders.push($(element).attr("id") + "~" + $(element).attr("NodeType"));
        }
    );
    
    //Copy To
    $.each(SelectedFolders, function(index, Folder)
    {
        var FolderSplit = Folder.split("~");
        
        $.getJSON("/apex/MATreeAJAXResources","action=copy_node&copyid=" + $('#copynode').attr("copyid") + "&copynodetype=" + $('#copynode').attr("copynodetype") + "&folderid=" + FolderSplit[0] + "&foldernodetype=" + FolderSplit[1],function(json)
        { 
            if(json.success)
            {  
                if(json.nodes.length > 0)
                {
                    $.each(json.nodes, function(index, node)
                    {
                        var $ParentNode = $('li[id=\'' + FolderSplit[0] + '\']');
                        
                        if($.jstree._reference('#SQTree')._is_loaded($ParentNode))
                        {
                            addNodeToTree(node,$ParentNode);
                        }
                    }); 
                }       
            }
            else
            {
                //NotifyError("Error Copying Node",json.error);
                Debug("Error Copying Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>Error Copying Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Copying Node",textStatus + " : " + errorThrown); 
        });    
    }); 
    
    ClosePopupWindow();
}

function addNodeToTree(node, parentNode)
{
    if(node.NodeType == 'PersonalFolder')
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType
            },
            data: node.title
        });
    }
    else if(node.NodeType == 'CorporateFolder')
    {
         $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                create: node.create,
                modify: node.modify,
                'delete': node['delete'],
                setperm: node.setperm
            },
            data: node.title
        });
    }
    else  if(node.NodeType == 'CorporateSavedQuery')
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                QueryType: node.QueryType,
                IsCustom: node.IsCustom,
                IconColor: node.IconColor,
                modify: node.modify,
                'delete': node['delete']          
            },
            data: node.title
        });
    }
    else
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                QueryType: node.QueryType,
                IsCustom: node.IsCustom,
                IconColor: node.IconColor        
            },
            data: node.title
        });
    }

    if(node.Children.length > 0)
    {
        $.each(node.Children, function(index, child)
        {
            addNodeToTree(child, $('li[id=\'' + node.Id + '\']'));        
        });
    }   
}

function CopyNode(node) 
{
    //Initialize Folder tree for Copy To
    $("#CopyToTree").jstree({
        "xml_data" : {
            "data": "",
            "ajax" : {
                "url" : "/apex/MapAnythingTreeFolders",
                "data" : function (n) { 
                    
                    return { 
                        id : n.attr ? n.attr("id") : 0, 
                        rand : new Date().getTime(),
                        type: n.attr ? n.attr("NodeType") : 0
                    }; 
                }
            },
            "xsl" : "nest"
        },
        "checkbox": {
          real_checkboxes: true,
          real_checkboxes_names: function (n) {
             var nid = 0;
             $(n).each(function (data) {
                nid = $(this).attr("nodeid");
             });
             return (["check_" + nid, nid]);
          },
          two_state: true
       },
        "core": { 
            "animation" : 10, 
            "strings": 
                {
                    "loading" : "Loading...",
                    "new_node" : "New Folder" 
                }
        
        },
        "plugins" : ["themes","xml_data","ui","crrm","types","checkbox"]
                        
    }); //End jstree    
    
    $('#copynode').attr("copyid",node.attr("id"));
    $('#copynode').attr("copynodetype",node.attr("NodeType"));
    $('#copynode').attr("IconColor", node.attr("IconColor"));
    $('#copynode').html('<b>' + node.attr("copyname") + '</b>');    
    CreatePopupWindow("CopyToPopup",300);
}

function DeleteFolderPermission(FolderId)
{
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Removing...');
    
    var answer = confirm("Delete this record?")
    if(answer)
    {
        //Get Folder permissions for Edit Permissions popup
        $.getJSON("/apex/MATreeAJAXResources","action=delete_folder_permission&id=" + FolderId,function(json)
        { 
            if(json.success)
            {  
                //remove record from data for searching
                $('#permissions-grid').data('records')[FolderId] = {};
                delete $('#permissions-grid').data('records')[FolderId];

                Debug("Successfully deleted Folder Permission!");    
                search();
            }
            else
            {
                //NotifyError("Error Deleting Folder Permission",json.error);
                Debug("Error Deleting Folder Permission " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>Error Deleting Folder Permission</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Deleting Folder Permission",textStatus + " : " + errorThrown); 
        });         
    }
    
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading'); 
}

function CreateNewPermissionPopup()
{
    //set a loadmask over the permissions grid and hide status span for buttons
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status img').hide();
    $('#permissions-grid-status .status span').hide();
    $('#permissions-grid-status .status a').remove();
    
    //Add User / Profile select buttons
    $('#permissions-grid-status .status').append('<a class="button1-blue" onclick="CreateNewPermission(\'User\');">User</a><a class="button1-blue" onclick="CreateNewPermission(\'Profile\');">Profile</a>');  
}

function CreateNewPermission(permissionFor)
{    
    var $autocomplete = $("<input type='text' class='autocomplete' />");
    
    //set up the autocomplete options
	$autocomplete.autocomplete({
		focus: function (event, ui) {
			$autocomplete.val(ui.item.label);
			return false;
		},
		select: function (event, ui) {
			$autocomplete.val(ui.item.label).data('selectedValue', ui.item.value).data('selectedLabel', ui.item.label);
			event.stopPropagation();
			return false;
		},
   		search: function () {
   			$autocomplete.addClass('searching');
   		},
   		source: function(request, response) {
	        $.ajax({
         		url: '/apex/MATooltipAJAXResources?action=get_lookup_options',
		        type: 'POST',
		        dataType: 'JSON',
		        data: {
		        	baseObject: 'User',
		        	fieldName: permissionFor == 'Profile' ? 'ProfileId' : 'ManagerId',
		        	term: request.term
		        },
		        success: function (successResponse)
		        {
		            if (!successResponse.success)
		            {
		            	response([]);
		            	return;
		            }
		            
		            response(successResponse.lookupOptions);
		        },
		        error: function () 
		        {
		        	response([]);
		        },
		        complete: function ()
		        {
		        	$autocomplete.removeClass('searching');
		        }
         	});
	    }
    })
    .blur(function () {
    	//put the selected value back in the textbox (in case it has been changed to something invalid)
    	$(this).val($(this).data('selectedLabel') || '');
    });
    
    var $newrow = $('#templates .permissions-row').clone().data('record', { permissionFor: permissionFor });
    //$newrow.data('record').permissionFor = permissionFor;
    
    //Append to our select to the first column
    $newrow.find('.permission-type').text(permissionFor);
    $newrow.find('.permission-for').html('').append($autocomplete);
    //Enable combobox once its been appended
    $newrow.find('.permission-for select').combobox();
    
    //Remove autosaves
    $newrow.find('.permission-read input').removeClass('autosave');
    $newrow.find('.permission-create input').removeClass('autosave');
    $newrow.find('.permission-modify input').removeClass('autosave');
    $newrow.find('.permission-delete input').removeClass('autosave');
    $newrow.find('.permission-setperm input').removeClass('autosave');
    
    //Set save link to finalize row insertion
    $newrow.find('.permission-delete a').on('click', SaveNewPermission).html('<b>Save</b>');
    $('#permissions-grid').append($newrow);
    
    //Remove buttons from Popup and show the status span again
    $('#permissions-grid-status .status a').remove();
    $('#permissions-grid-status .status img').show();
    $('#permissions-grid-status .status span').show();
    
    //Remove the loadmask over the permissions grid
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
}


function SaveNewPermission()
{
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Saving...');
    
    var $newrow = $(this).closest('.permissions-row');
    var PermissionForId = $newrow.find('.permission-for .autocomplete').data('selectedValue');
    var PermissionFor = $newrow.data('record').permissionFor;
           
    if(PermissionForId)
    {
        var NewPermission = { 
                Read__c: $newrow.find('.permission-read input').is(':checked'),
                Create__c: $newrow.find('.permission-create input').is(':checked'),
                Modify__c: $newrow.find('.permission-modify input').is(':checked'),
                Delete__c: $newrow.find('.permission-delete input').is(':checked'),      
                SetPermissions__c: $newrow.find('.permission-setperm input').is(':checked')
        };
        
        if(PermissionFor === 'User')
        {
            NewPermission.User__c = PermissionForId;
        }
        else
        {
            NewPermission.ProfileId__c = PermissionForId;
        }
        
        if($('#foldertoedit').attr("folderid") != 'CorporateRoot')
        {
            NewPermission.Folder__c = $('#foldertoedit').attr("folderid");
        }
        
        $.ajax({
            url: 'MATreeAJAXResources?action=save_new_permission',
            type: 'POST',
            dataType: 'JSON',
            data: { NewPermission: JSON.stringify(addNamespace(namespace, NewPermission)) },
            complete: function (response)
            {
                var obj = $.parseJSON(response.responseText);                      
                                
                if(obj.success)
                { 
                    //add record to data for searching
                    $('#permissions-grid').data('records')[obj.MAFP.Id] = obj.MAFP;
                    
                    $newrow = populatePermissionsRow($newrow.data('record',obj.MAFP));
                    
                    Debug("Done creating New Permission " + obj.MAFP.Id + "!");                    
                }
                else
                {
                    NotifyError("Error creating New Permission!",obj.error);
                    Debug("Error creating New Permission!");                    
                }
            }
        });
        
    }
    else
    {
        showError($('#EditPermissionsPopup .loadmask-wrapper'), 'Please select a User/Profile');
    }
    
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
}

function EditPermissions(NodeId,CopyName) 
{  
	//grab the permissions grid for easy access
	var $permissionsGrid = $('#permissions-grid').data('records', {});
	$permissionsGrid.data({
		users: {},
		profiles: {},
		doneLoadingUsers: false,
		doneLoadingProfiles: false
	});
            
    //Get Folder permissions for Edit Permissions popup
    $.getJSON("/apex/MATreeAJAXResources","action=get_folder_permissions&id=" + NodeId,function(json)
    { 
        if(json.success)
        {
            $.each((json.FolderPermissions || []), function(key, FolderPermission) {     
                //add this permission to the list in memory
                $permissionsGrid.data('records')[FolderPermission.Id] = FolderPermission;                    
            });
        }
        else
        {
            //NotifyError("Error Retreiving Folder Permissions",json.error);
            Debug("Error Retreiving Folder Permissions " + json.error);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Retreiving Folder Permissions</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Retreiving Folder Permissions",textStatus + " : " + errorThrown); 
    });
         
    //get profiles
    $('#permissionsfilter-profile').data('autocompleteItems', []);
    $.getJSON("/apex/MAAdminAJAXResources","securityToken="+securityToken+"&action=get_user_profiles_batch&offset=0", function userProfilesResponse(json)
    {
		if (json.success)
      	{                
       		//loop through the returned profiles and add each in memory
          	$.each(json.profiles, function (index, profile) {
          		$permissionsGrid.data('profiles')[profile.Id] = {
          			name: profile.Name,
          			value: profile.Id
          		};
          	});
          	
          	//if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
          	if (json.profiles.length >= 5000) {
           		var newOffset = json.offset + json.profiles.length;
           		$.getJSON("/apex/MAAdminAJAXResources","securityToken="+securityToken+"&action=get_user_profiles_batch&offset="+newOffset,userProfilesResponse);
        	}
           	else {
           		$permissionsGrid.data('doneLoadingProfiles', true);
           	}
		}
        else
        {
        	$permissionsGrid.data('doneLoadingProfiles', true);
        }
	})
	.error(function(jqXHR, textStatus, errorThrown) {
    	$permissionsGrid.data('doneLoadingProfiles', true);        
	});
         
	//set up a poller to determine when the user permissions have fully loaded
	$permissionsGrid.data(
		'loadingInterval',
		setInterval(function () {
    
		    if ($permissionsGrid.data('doneLoadingProfiles'))
		    {
			    //clear this interval because we're done
			    clearInterval($permissionsGrid.data('loadingInterval'));
			    
			    //hide loadmask
			    hideMessage($('#EditPermissionsPopup .loadmask-wrapper'));
    
		        //run a default search to populate the grid
		        search();
	        }
    
    	}, 1000)
    );
    
    //Set defaults and create popup window    
    $('#foldertoedit').attr("folderid",NodeId);    
    $('#foldertoedit').html('<b>' + CopyName + '</b>');
    CreatePopupWindow("EditPermissionsPopup",900);
    showLoading($('#EditPermissionsPopup .loadmask-wrapper'), 'Loading...');
}

//populate a permissions row based on the data inside it.  return the row
function populatePermissionsRow($row)
{
    //populate basic record data
    var record = removeNamespace(namespace, $row.data('record'));
    
    if(!(record.ProfileId__c))
    {
    	$row.find('.permission-type').text('User');
        $row.find('.permission-for').html('').append($("<a target='_blank'></a>").attr('href', '/' + record.User__c).text(record.User__r.Name));
    }
    else
    {
    	$row.find('.permission-type').text('Profile');
        $row.find('.permission-for').html($('#permissions-grid').data('profiles')[record.ProfileId__c].name);
    }
        
    $row.find('.permission-read input').attr('checked', record.Read__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-create input').attr('checked', record.Create__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-modify input').attr('checked', record.Modify__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-delete input').attr('checked', record.Delete__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-setperm input').attr('checked', record.SetPermissions__c ? 'checked' : false).not('.autosave').addClass('autosave');  
    $row.find('.permission-delete a').off('click').attr('onclick','').attr('onclick', 'DeleteFolderPermission(\'' + record.Id + '\');').html('Delete');
        
    //return the row
    return $row;
}

function populateCampaignOptionsRow($row)
{
	//populate basic record data
	var record = $row.data('record');
	var statusOptions = $row.data('statusOptions');
	$row.find('.campaign-name').html($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
	
	//populate status options
	var $statusPicklist = $row.find('.campaign-status select');
	if (statusOptions && statusOptions.length > 0)
	{
		$statusPicklist.find('option').remove();
		$.each(statusOptions, function (index, option) {
			$statusPicklist.append(
				$("<option></option>").attr('value', option).text(option)
			);
		});
	}
	else
	{
		$statusPicklist.replaceWith('No valid statuses');
	}
	
	//return the row
	return $row;
}

function search()
{
    //clear any existing search timeouts
    try { clearTimeout($('#permissions-filters').data('searchTimeout')); } catch (err) { }
    
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Searching...');
    
    //set a search timeout to perform the search when the user is done setting filters
    $('#permissions-filters').data(
        'searchTimeout',
        setTimeout(function () {
            
            //remove existing data for matching records
            var $permissionsGrid = $('#permissions-grid');
            $permissionsGrid.data('matchingRecords', {});
            
            //perform the search
            var matchCount = 0;
            var matchingRecords = $permissionsGrid.data('matchingRecords');
            $.each($permissionsGrid.data('records'), function (recordId, record) {
            
            	//remove namespace
            	removeNamespace(namespace, record);
                
                var match = false;
                
                //Match all results based on filters
                if ($('#permissionsfilter-searchtype').val() == 'Both')
                {
                    if($('#permissionsfilter-searchtext').val() == ''){ match = true; }
                    else if(record.User__c != '' && record.User__c != null) 
                    {
                        if(record.User__r.Name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1) { match = true; }
                    }
                    else if(record.ProfileId__c != '' && record.ProfileId__c != null) 
                    {
                        if($permissionsGrid.data('profiles')[record.ProfileId__c].name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1) { match = true; }
                    }
                    
                }
                //Match only User results
                else if($('#permissionsfilter-searchtype').val() == 'User' && record.User__c != '' && record.User__c != null)                 
                {
                    if(record.User__r.Name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1 || $('#permissionsfilter-searchtext').val() == '') { match = true; }
                }
                else if($('#permissionsfilter-searchtype').val() == 'Profile' && record.ProfileId__c != '' && record.ProfileId__c != null)
                {
                    if ($permissionsGrid.data('profiles')[record.ProfileId__c].name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1 || $('#permissionsfilter-searchtext').val() == '' ) { match = true; }
                }
                
                if(match)
                {
                    //add a record in memory for this match
                    matchingRecords[recordId] = record;
                    matchCount++;
                }
            });
            
            //hold on to the match count for user later
            $permissionsGrid.data('matchingRecordsCount', matchCount);
            
            //show page options
            $('#permissions-page option').remove();
            for (var i = 1; i <= Math.ceil(matchCount / pageSize); i++)
            {
                $('#permissions-page').append("<option value='"+i+"'>"+i+"</option>");
            }
            
            //remove the loadmask
            $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
            
            //load the first page of data
            $('#permissions-page').change();
            
        }, 800)
    );
}

function customMenu(node) {

    var items = null;
    
    var classList = String(node[0].classList);
    
    //Debug("Type:" + node[0].type);
    
    /* 
        Node Types
        ===================
        CorporateRoot
        CorporateFolder
        CorporateSavedQuery
        
        PersonalRoot
        PersonalFolder
        PersonalSavedQuery
        
        RoleRoot
        RoleFolder
        RoleUserFolder
        RoleNameFolder
        RoleSavedQuery
        
        IsCorporateAdmin
    */
    
    /*PersonalRoot, CorporateRoot, RoleRoot, CorporateFolder, PersonalFolder, RoleNameFolder, RoleFolder, RoleUserFolder, CorporateSavedQuery, PersonalSavedQuery, RoleSavedQuery*/
    var NodeType = node.attr("NodeType");
    var NodeId = node.attr("Id"); //Id of Folder or Saved Query
    var NodeIsCustom = node.attr("IsCustom"); /*Custom, NotCustom*/
    var NodeIsLegend = node.attr("QueryType"); /*Legend, Standard*/
        
    if (NodeType == "RoleRoot" || NodeType == "RoleNameFolder" )
    {
        return null;
    }
    else if (NodeType == "CorporateRoot" && !IsCorporateAdmin)
    {
    	//non-corporate admins have no access to the corporate folder context menu
    	return null;
    }
    else if (NodeType == "PersonalFolder" || NodeType == "RoleFolder" )
    {
        items = {
        	createSavedQuery: { 
                label: "Create Saved Query",
                submenu: ReturnSubMenu()
            },
            createItem: {
                label: "Create Folder",
                separator_before: true,
                action: function (obj) 
                { 
                    
                    //DisplayPropertiesOfObject(this._get_parent(obj),0);
                    this.create(obj); 
                }
            },
            copyTo: { // The "Copy To..." menu item
                label: "Copy To...",
                action: function (obj) { CopyNode(obj); }
            },
            renameItem: { // The "rename" menu item
                label: "Rename",
                action: function (obj) { this.rename(obj); }
            },
            deleteItem: { // The "delete" menu item
                label: "Delete",
                action: function (obj) { this.remove(obj); }
            }
        };
    
        //Remove Delete Option if Parent has Children
        if (classList.indexOf("jstree-closed") != -1 || classList.indexOf("jstree-open") != -1)
        {
            delete items.deleteItem;
        }
        
        //Remove Security Option If not Corporate
        if (NodeType == "RoleFolder" || NodeType == "PersonalFolder")
        {
             delete items.Security;
        }
    }
    else if (NodeType == "CorporateFolder")
    {
        items = {
        	createSavedQuery: { 
                label: "Create Saved Query",
                submenu: ReturnSubMenu()
            },
            createItem: {
                label: "Create Folder",
                separator_before: true,
                action: function (obj) 
                { 
                    
                    //DisplayPropertiesOfObject(this._get_parent(obj),0);
                    this.create(obj); 
                }
            },
            copyTo: { // The "Copy To..." menu item
                label: "Copy To...",
                action: function (obj) { CopyNode(obj); }
            },
            renameItem: { // The "rename" menu item
                label: "Rename",
                action: function (obj) { this.rename(obj); }
            },
            editPermissions: { // The "Copy To..." menu item
                label: "Edit Permissions",
                action: function (obj) { EditPermissions(obj.attr("id"),obj.attr("copyname")); }
            },
            deleteItem: { // The "delete" menu item
                label: "Delete",
                action: function (obj) { this.remove(obj); }
            }
        };
        
        //Remove options if Permissions are disallowed
        if(!IsCorporateAdmin && node.attr("create") === "false")
        {
            delete items.createItem;
            delete items.createSavedQuery;
        }
        if(!IsCorporateAdmin && node.attr("modify") === "false")
        {
            delete items.renameItem;
        }
        if(!IsCorporateAdmin && node.attr("setperm") === "false")
        {
            delete items.editPermissions;
        }
        
        //Remove Delete Option if Parent has Children
        if (classList.indexOf("jstree-closed") != -1 || classList.indexOf("jstree-open") != -1)
        {
            delete items.deleteItem;
        }        
    }
    else if ((NodeType == "CorporateRoot") ||
         NodeType == "PersonalRoot" /*|| NodeType == "RoleRoot" */|| NodeType == "RoleUserFolder" /*|| NodeType == "RoleNameFolder" */)
    {
        items = {
        	createSavedQuery: { 
                label: "Create Saved Query",
                submenu: ReturnSubMenu()
            },
            createItem: {
                label: "Create Folder",
                separator_before: true,
                action: function (obj) 
                { 
                    
                    //DisplayPropertiesOfObject(this._get_parent(obj),0);
                    this.create(obj); 
                }
            }
        };
        
        //Remove Security Option If not Corporate
        if (NodeType == "PersonalRoot" || NodeType == "RoleRoot" || NodeType == "RoleUserFolder" || NodeType == "RoleNameFolder")
        {
             delete items.Security;
        }
        
    }
    else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery" || NodeType == "RoleSavedQuery")
    {
        items = {
            plotSavedQuery: {
                label: "Plot",
                action: function (obj) { 
                    Debug("Plot " + NodeId);
                    PlotQuery(NodeId, 'Markers');
                },
                submenu: {
                	plotHeatMap: {
		                label: "Heat Map (Gold Beta)",
		                action: function (obj) { 
	                        Debug("Plot HeatMap " + NodeId);
	                        PlotQuery(NodeId, 'Heatmap');
	                    }
		            },
		            plotCluster: {
		            	label: "Cluster (Gold Beta)",
		                action: function (obj) { 
	                        Debug("Plot Cluster " + NodeId);
	                        PlotQuery(NodeId, 'Cluster');
	                    }
		            }
                }
            },
            plotVisibleSavedQuery: {
                label: "Plot, Visible Area",
                action: function (obj) { 
                    Debug("Plot Visible Area " + NodeId);
                    PlotQuery(NodeId, 'Markers', true);
                },
                submenu: {
                	plotHeatMapVisible: {
		                label: "Heat Map (Gold Beta)",
		                action: function (obj) { 
	                        Debug("Plot HeatMap Visible " + NodeId);
	                        PlotQuery(NodeId, 'Heatmap', true);
	                    }
		            },
		            plotClusterVisible: {
		            	label: "Cluster (Gold Beta)",
		                action: function (obj) { 
	                        Debug("Plot Cluster Visible " + NodeId);
	                        PlotQuery(NodeId, 'Cluster', true);
	                    }
		            }
                }
            },
            plotOnLoad: {
                label: node.is('.jstree-star') ? "Remove Plot On Load" : "Plot On Load",
                action: function (obj) 
                    { 
                        Debug(NodeId + " will now Plot On Load!");
                        AddPlotOnLoadId(NodeId);
                    }
            },
            editSavedQuery: {
                label: ((NodeIsCustom == "true") ? "Edit (Custom Query)" : "Edit"),
                separator_before: true,
                _disabled: (NodeIsCustom == "true"),
                action: function (obj) { 
                    Debug("Edit " + NodeId); 
                    launchQueryEditor('/apex/EditQuery'+pageSuffix+'?q='+NodeId);
                }
            },
            cloneSavedQuery: { 
                label: "Clone",
                action: function (obj) { 
                    Debug("Clone " + NodeId); 
                    launchQueryEditor('/apex/EditQuery'+pageSuffix+'?q=::queryId::&c=true'.replace('::queryId::', NodeId));   
                }
            },
            deleteSavedQuery: {
                label: "Delete",
                action: function (obj) {
                	this.remove(obj); 
                }
            }
        };        
        
        //DisplayPropertiesOfObject(node[0],0);
        
        //Remove options if Permissions are disallowed
        if(!IsCorporateAdmin && node.attr("modify") === "false" && NodeType == "CorporateSavedQuery")
        {
            delete items.editSavedQuery;
        }
        
        if (!IsCorporateAdmin && NodeType == "CorporateSavedQuery")
        {
            delete items.editSavedQuery;
            delete items.cloneSavedQuery;
            delete items.deleteSavedQuery;
        }

    }

    return items;
}

function PlotQuery(requestData, renderAs, visibleAreaOnly)
{
	//we could potentially be sent a saved query id or an object with query data as requestData.  if a saved query id was passed, transform it to an object for consistent use later
	var SavedQryID = '';
	if (typeof requestData == 'string') {
		SavedQryID = requestData;
		requestData = { id: SavedQryID };
	}

    //create a new plotted query from the template
    var $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data(requestData);
    
    //add basic info
    if (SavedQryID == '') {
    	$plottedQuery.find('.basicinfo-name').text('Map It');
	    $plottedQuery.find('.basicinfo-baseobjectname').text('Plotting');
    }
    else {
	    $plottedQuery.find('.basicinfo-name').text($('#SQTree #'+SavedQryID+' a').clone().children().remove().end().text());		//the added complication is just used to get the top-level text element (the actual structure has an ins element that has extra text in it)
	    $plottedQuery.find('.basicinfo-baseobjectname').text($('#SQTree #'+SavedQryID).attr('title'));
	}
    
    //append it to the plotted queries table
    $plottedQuery.find('.status').html('Running query...');
    $('#PlottedQueriesTable').append($plottedQuery);
    
    //show plotted queries
    SlideToPlottedQueries();
    
    //populate default data
    $.extend($plottedQuery.data(), {
    	recordsToGeocode: [],
    	numGeocodeRequestsOut: 0,
    	numSuccessfulGeocodes: 0,
    	numFailedGeocodes: 0,
    	visibleAreaOnly: visibleAreaOnly || false
    });
    
    //analyze the query to get the total number of records
    analyzeQuery($plottedQuery.addClass('testing'), function (success, records) {
    
    	//status
    	$plottedQuery.find('.status').html('Analyzing Query...');
    	UpdateAddToCampaignButton();
    
    	//loop through the returned record ids and send them out for processing in batches
    	var recordBatch = [];
	    $.each(records, function (index, record) {
	    	if (recordBatch.length < 100)
	    	{
	    		recordBatch.push(index);
	    	}
	    	else
	    	{
	    		//this batch is full.  send it to be processed
	    		processBatch($plottedQuery, recordBatch);
	    		
	    		//move on to the next batch
	    		recordBatch = [];
	    		recordBatch.push(index);
	    	}
	    });
	    
	    //send the last batch if needed
	    if (recordBatch.length > 0){
	    	processBatch($plottedQuery, recordBatch);
	    }
	    
	    //all of the batches have been sent for processing.  start a poller that will periodically check if processing is complete
	    $plottedQuery.data(
	    	'processingInterval', 
	    	setInterval(function () {
	    		
	    		//loop through all records.  we're done if everything has been processed
	    		var processingComplete = true;
	    		var numRecords = 0;
	    		var numProcessed = 0;
	    		$.each($plottedQuery.data('records'), function (index, record) {
	    			if (!record.isProcessed) {
	    				processingComplete = false;
	    			}
	    			else {
	    				numProcessed++;
	    			}
	    			numRecords++;
	    		});
	    		
	    		//keep track of the total number of records for use later
	    		$plottedQuery.data('numRecords', numRecords);
	    		
	    		//status
	    		$plottedQuery.find('.status').html('Processing: ' + numProcessed + ' of ' + numRecords);
	    		
	    		//if we're done processing, we need to send geocode requests for those records that do not have lat/long information
	    		if (processingComplete)
	    		{
		    		clearInterval($plottedQuery.data('processingInterval'));
		    		
		    		//status
		    		var needGeocodeCounter = $plottedQuery.data('recordsToGeocode').length;
	    			$plottedQuery.data('numGeocodeRequestsNeeded', needGeocodeCounter).data('numGeocodeRequestsCompleted', 0).find('.status').html('Geocoding: 0 of ' + needGeocodeCounter);
		    		
		    		//build additional request data to be sent with geocode requests
		    		var additionalRequestData = {
		    			savelatlong				: true,
		    			CleanStreetField		: $plottedQuery.data('addressFields').CleanStreet,
						CleanCityField			: $plottedQuery.data('addressFields').CleanCity,
						CleanStateField			: $plottedQuery.data('addressFields').CleanState,
						CleanPostalCodeField	: $plottedQuery.data('addressFields').CleanZip,
						CleanCountryField		: $plottedQuery.data('addressFields').CleanCountry,
						CleanCountyField		: $plottedQuery.data('addressFields').CleanCounty,
						CleanDistrictField		: $plottedQuery.data('addressFields').CleanDistrict,
						LatitudeField			: $plottedQuery.data('coordinateFields').Latitude,
						LongitudeField			: $plottedQuery.data('coordinateFields').Longitude,
						QualityField			: $plottedQuery.data('addressFields').Quality,
						SimilarityField			: $plottedQuery.data('addressFields').Similarity
		    		};
		    		
		    		//build a finish function to be called when geocoding is complete
		    		function geocodingComplete(){
		    			clearInterval($plottedQuery.data('geocodingInterval'));
				    			
		    			//status
		    			$plottedQuery.find('.status').html('Collecting Bad Addresses: ');
		    			
		    			//populate the bad address window with any bad address from this query
		    			updateMissingAddressContent($plottedQuery);
		    			
		    			//status
   						$plottedQuery.find('.status').html('Creating Markers: ');
		    			
		    			//create markers
		    			var markerCount = 0;
		    			$.each($plottedQuery.data('records'), function (index, record) {
		    				if (record.markerLatitude != '' && record.markerLongitude != '') {
		    					record.marker = CreateMarkerFromRecord(record);
		    					markerCount++;
		    				}
		    				
		    				if (markerCount >= (userSettings.maxQuerySize || 10000)) { return false; }
		    			});
		    			
		    			//populate marker labels
		    			$plottedQuery.data('numMarkers', markerCount);
		    			$plottedQuery.find('.legend-row').each(function () {
		    				$(this).find('.visiblemarkers').text('0');
		    				$(this).find('.of').text('of');
		    				$(this).find('.totalmarkers').text($(this).data('numMarkers'));
		    				
		    				//mark and show this legend row based on whether or not it has markers (used for the show more/less functionality)
		    				if ($(this).data('numMarkers') > 0){
		    					$(this).show();
		    				}
		    				else {
		    					$(this).addClass('empty');
		    				}
		    			});
		    			
		    			//update legend show/hide features based on the data
		    			if ($plottedQuery.find('.legend-row').length > 0) {
		    				$plottedQuery.find('.legend-showhide').show();
		    			}
		    			if ($plottedQuery.find('.legend-row.empty').length > 0) {
		    				$plottedQuery.find('.legend-moreless').show();
		    			}
		    			
		    			//status
						$plottedQuery.find('.status').html('Rendering ' + renderAs);
		    			
		    			//render
		    			renderQuery($plottedQuery, renderAs, function () {
		    			
		    				//status
							$plottedQuery.find('.status').html('Data Points: ' + $plottedQuery.data('numRecords'));
							
							//activate the remove button
							$plottedQuery.find('.btn-remove').css('cursor','pointer').click(function(){
								removeQuery($plottedQuery.addClass('unloading'));
		                    });
		                    
		                    //remove loading status
		                    $plottedQuery.removeClass('loading');
		                    
		                    //if this is a Record query, we need to zoom to the record and potentially place a prox circle
		                    if ($plottedQuery.data('id').indexOf('Record-') == 0)
		                    {
		                    	var mapItRecord;
		                    	//update the name of this plotted query to include a link to the first record (should only be one record)
		                    	$.each($plottedQuery.data('records'), function (index, record) {
		                    		$plottedQuery.find('.basicinfo-name').html('Map It - <a href="/'+$plottedQuery.data('RecordId')+'" target="_blank">'+extractTooltipValue($plottedQuery.data('tooltips')[0], record)+'</a>');
   									$plottedQuery.find('.basicinfo-baseobjectname').text($plottedQuery.data('baseObjectLabel'));
				    				mapItRecord = record;
				    				return false;
				    			});
		                    
		                    	if ($('.mapit-proximity-on').is(':checked'))
		                    	{
			                        //this is a map it query and we need to put a prox circle on the marker
			                        try {
			                            AddOval(mapItRecord.markerLatitude, mapItRecord.markerLongitude);
			                            ZoomToFit();
			                        }
			                        catch (err) {
			                        }
			                    }
			                    else
			                    {
			                    	//no need for a prox circle, just zoom to fit
			                 		ZoomToFit();
		                        	if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close   
			                    }
		                    }
		                    
		                    //update the saved query name and the base object label
		                    $plottedQuery.find('.basicinfo-name').html($plottedQuery.data('savedQueryName'));
		                    $plottedQuery.find('.basicinfo-baseobjectname').html($plottedQuery.data('baseObjectLabel'));
		    			
		    			});
		    		}
		    		
		    		//keep sending requests until we're up to 200 or there's nothing left to geocode
    				var initialRequestCounter = 0;
    				var recordsToGeocode = $plottedQuery.data('recordsToGeocode');
    				if (recordsToGeocode.length == 0)
   					{
   						geocodingComplete();
   					}
   					else
   					{
	    				while (recordsToGeocode.length > 0 && initialRequestCounter < 200)
	    				{
	    					initialRequestCounter++;
	    					var recordsToSend = recordsToGeocode.splice(0, 10);
	    					$plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + recordsToSend.length);
		    				geocodeMultiple(recordsToSend, function handleGeocode (numSuccess, numFail) {
		    					$plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - numSuccess - numFail);
		    					$plottedQuery.find('.status').html('Geocoding: ' + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut') - recordsToGeocode.length) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
	    						$plottedQuery.data('numSuccessfulGeocodes', $plottedQuery.data('numSuccessfulGeocodes') + numSuccess);
	    						$plottedQuery.data('numFailedGeocodes', $plottedQuery.data('numFailedGeocodes') + numFail);
		    					
		    					//send out a new request if there are any.  move on to rendering if we're done
		    					if (recordsToGeocode.length > 0) {
		    						var nextRecordsToSend = recordsToGeocode.splice(0, 10);
		    						$plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + nextRecordsToSend.length);
		    						geocodeMultiple(nextRecordsToSend, handleGeocode, additionalRequestData);
		    					}
		    					else if ($plottedQuery.data('numGeocodeRequestsOut') == 0) {
					    			geocodingComplete();
					    		}
		    				}, additionalRequestData);//end geocode record
	    				}//end while
	    			}
		    	}
	    	}, 500)
	    ); 
    }); 
}

function ReturnSubMenu()
{
    return BaseObjectsForSubMenu;
}

function DoOnCompleteNewForSavedQry(NodeName,NodeId,baseObjectLabel,ParentNodeId,pNodeType,pIsCustom,pQueryType,pRel)
{
    //Make New Node
    Debug("DoOnCompleteNewForSavedQry");
    
    $("#SQTree").jstree("create","#" + ParentNodeId,"last",{attr : {id: NodeId, NodeType: pNodeType, rel: pRel, IsCustom: pIsCustom, title: baseObjectLabel}, data: NodeName, QueryType:pQueryType},null,true);
    
    //Hide Popup
    ClosePopupWindow();
}

function DoOnCompleteEditSavedQry(NodeName,NodeId,colorAssignmentType)
{
    //Edit Existing Node
    $("#SQTree").jstree('rename_node', '#' + NodeId , NodeName);
    $("#SQTree #"+NodeId)
        .attr('rel', colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery')
        .attr('querytype', colorAssignmentType == 'Static' ? 'Standard' : 'Legend');
    
    //Hide Popup
    ClosePopupWindow();
}

/////////////////////////
/////////////////////////

function ProcessWayPoints()
{
    try
    {
        Debug("ProcessWayPoints");
        Debug("HasRoutingErrors: " + HasRoutingErrors);
        if (HasRoutingErrors)
        {
            //Cant Process Way Points  
        }
        else
        {
            SlideToDirectionsOutput();
            
            $('#DirectionsOutput').html('<div style="display:block;float:left;width:100%;margin:0;"><img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/><br /><br/><h2 style="display:block;margin:0 auto;width:200px;text-align:center;">Loading Directions</h2></div>');
                        
            
            Debug("WayPointArray Count: " + WayPointArray.length);
            
            if (WayPointArray.length >= 2)
            {
                var WayPoints = new nokia.maps.routing.WaypointParameterList();
                
                //Add Each Waypoint to the WayPoints List
                $.each(WayPointArray, function(key, value) { 
                    
                    Debug("Adding New Element to WayPoints");
                    Debug("Lat: " + value.Lat);
                    Debug("Long: " + value.Long);
                                               
                    WayPoints.addCoordinate(new nokia.maps.geo.Coordinate(parseFloat(value.Lat), parseFloat(value.Long)));
                });
                
                /*
                var modes = [{
                    type: "shortest",
                    transportModes: ["car"],
                    trafficMode: "default"
                }];
                */
                
                var modes = [{
                    type: $('#RouteType').val(),
                    transportModes: [$('#RouteMode').val()],
                    trafficMode: "default"
                }];
                
                var onRouteCalculated = function(observedRouter, key, value)
                    {
                        if (value == "finished") 
                        {
                            try
                            {
                                RouterResponse = observedRouter.getRoutes();
                                //create the default map representation of a route
                                mapRoute = new nokia.maps.routing.component.RouteResultSet(RouterResponse[0]).container;
                                map.objects.add(mapRoute);
                                //Zoom to the bounding box of the route
                                map.zoomTo(mapRoute.getBoundingBox(), false, "default");
                          
                                var TotalTime = 0;
                                var TotalLength = 0;
                                
                                //DisplayPropertiesOfObject(RouterResponse[0],0);
                                
                                Debug("Mode:");
                                DisplayPropertiesOfObject(RouterResponse[0].mode,0);
                                
                                Debug("Summary:");
                                DisplayPropertiesOfObject(RouterResponse[0].summary,0);
                                
                          
                                var div_content = "<div class=\"st\"><table style=\"border-collapse:collapse;width:97%;\">";
                          
                                for (var LegIndex=0;  LegIndex < RouterResponse[0].legs.length ; LegIndex++)
                                {
                                    var DirectionWayPoint = WayPointArray[LegIndex];
                                    
                                    div_content += "<tr class=\"origin-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\"><div class=\"pin-green\"></div></td><td style=\" padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\">Origin:</td></tr><tr class=\"origin-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
                                    
                                    var leg = RouterResponse[0].legs[LegIndex];
                                    
                                    Debug("Length: " + leg.length);
                                    Debug("travelTime: " + leg.travelTime);
                                    
                                    TotalTime += leg.travelTime;
                                    TotalLength += leg.length;
                                    
                                    var Maneuvers = leg["maneuvers"];
                                    
                                    for (var i = 0 ; i < Maneuvers.length; i++)
                                    {
                                        var Maneuver = Maneuvers[i];
                                        
                                        var instructions = Maneuver["instruction"];
                                        if ($('#UnitType').val() == 'km')
                                        {
                                        	if (/Go for (.*) miles/.test(Maneuver["instruction"])) {
                                        		instructions = Maneuver["instruction"].replace(/Go for (.*) miles/, 'Go for '+ (/Go for (.*) miles./i.exec(Maneuver["instruction"])[1] * 1.60934).toFixed(2) +' kilometers');
                                        	}
                                        	else if (/The trip takes (.*) miles/.test(Maneuver["instruction"])) {
                                        		instructions = Maneuver["instruction"].replace(/The trip takes (.*) miles/, 'The trip takes '+ (/The trip takes (.*) miles./i.exec(Maneuver["instruction"])[1] * 1.60934).toFixed(2) +' kilometers');
                                        	}
                                        	else if (/Go for (.*) feet/.test(Maneuver["instruction"])) {
                                        		instructions = Maneuver["instruction"].replace(/Go for (.*) feet/, 'Go for '+ (/Go for (.*) feet/i.exec(Maneuver["instruction"])[1] * 0.3048).toFixed(2) +' meters');
                                        	}
                                        	else if (/The trip takes (.*) feet/.test(Maneuver["instruction"])) {
                                        		instructions = Maneuver["instruction"].replace(/The trip takes (.*) feet/, 'The trip takes '+ (/The trip takes (.*) feet/i.exec(Maneuver["instruction"])[1] * 0.3048).toFixed(2) +' meters');
                                        	}
                                        }
                                        
                                        div_content += "<tr class=\"maneuvers\" style=\"background:none;color:#555;font-family:helvetica,arial,sans-serif;font-size:11px;font-weight:normal;border:1px solid #dddddd;\">";
                                        div_content += "<td class=\"maneuver-number\" style=\"font-family:helvetica,arial,sans-serif;font-size:14px;color:#006DB4;font-weight:bold;padding:9px 12px 9px 6px;vertical-align:top;text-align:center;\">" + (i + 1) + "</td>";
                                        div_content += "<td class=\"maneuver-instruction\" style=\"padding:9px 6px 10px 0;color:#222;font-family:helvetica,arial,sans-serif;font-size:11px;\">" + instructions + "</td>";
                                        div_content += "</tr>";
                                    }
                                    
                                }
                                
                                var DirectionWayPoint = WayPointArray[WayPointArray.length-1];
                                div_content += "<tr class=\"destination-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;border-bottom:4px solid #ccc;\"><div class=\"pin-red\"></div></td><td style=\" padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;\">Destination:</td></tr><tr class=\"destination-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
    
                                div_content += "</table></div>";
        
                                TotalLength = $('#UnitType').val() == 'km'
                                	? (TotalLength / 1000).toFixed(0)
                                	: (TotalLength / 1609.344).toFixed(0);
                                TotalTime = (TotalTime / 3600).toPrecision(3);   
                                
                                var TotalHours = Math.floor(TotalTime);
                                var TotalMinutes = Math.floor((TotalTime % 1) * 60);
    
                                document.getElementById('DirectionsOutput').innerHTML = "<span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Distance</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + (TotalLength - 0) + " " + $('#UnitType option:selected').text().toLowerCase() + "</span>" ;
    							document.getElementById('DirectionsOutput').innerHTML += "<br /><span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Duration</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + TotalHours + " hours " + TotalMinutes + " minutes</span>";
    
                                
        
                                document.getElementById('DirectionsOutput').innerHTML += div_content;
                                
                                
                                //document.getElementById("printLink").style.display = "block";
                  
                                
                                //document.getElementById("clearDirBtn").className = "btn";
                                //document.getElementById("clearDirBtn").disabled = false;
                                
                                $('#DirectionControls').show();
                            }
                            catch(err)
                            {
                                Debug("Error Occured While Processing Routing Results");
                                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                                DisplayPropertiesOfObject(err,0);
                            }
                        }
                        else if (value == "failed") 
                        { 
                            Debug("The routing request failed.");
                            NotifyError("The routing request failed.","The routing request failed.");
                        }
                        else
                        {
                            Debug("Routing Request Status: " +  value);
                        }
                    };
                    
              //add the observer function to the routers "state" property
              router.addObserver("state", onRouteCalculated);
              //calculate the route (and call onRouteCalculated afterwards)
              router.calculateRoute(WayPoints, modes);
            }
            else
            {
                
            }
        }
    }
    catch(err)
    {
        Debug("Error Occured While Processing Route Waypoints");
        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
        DisplayPropertiesOfObject(err,0);
    }
}

       function ToggleMissingAddressContent(obj)
       {
            if ($(obj).html() == "Show")
            {
                $(obj).html('Hide');
            }
            else
            {
                $(obj).html('Show');
            }
            
            $(obj).parent().next().slideToggle('slow', function() {
                // Animation complete.
            });
       }
       
		function ExportMissingAddresses(exportAll)
		{
			//get the list of addresses we need to export depending on whether or not we're exporting all
			var $addressesToExport = exportAll
				? $('#MissingAddressesContent .missingaddress')
				: $('#MissingAddressesContent .missingaddress-checkbox:checked').closest('.missingaddress');
				
			//loop through the addresses and compile a clean list to send
			var missingAddresses = [];
			var uniqueMissingAddressesMap = {};
			$addressesToExport.each(function () {
			
				//make sure we haven't already added this record 
				if (uniqueMissingAddressesMap[$(this).data('exportData').recordId]) { return; }
				
				//add this record
				uniqueMissingAddressesMap[$(this).data('exportData').recordId] = true;
				missingAddresses.push($(this).data('exportData'));
				
			});
			
			//create an export form and post it
			$("<form method='POST' action='/apex/MapAnythingExportMissingAddresses' target='_blank'></form>").append(
				$("<input type='hidden' name='serializedMissingAddresses' />").attr('value', JSON.stringify(missingAddresses))
			).appendTo('body').submit().remove();
		}
  
        function UpdateAddToCampaignButton()
        {
            Debug("Running UpdateAddToCampaignButton");
        
            var showButton = false;
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 

                if ($(this).data('baseObjectName') == 'Contact' || $(this).data('baseObjectName') == 'Lead')
                {
                    showButton = true;
                }
            });
            
            if (showButton) { $('#AddToCampaignButton').show(400); }
            else { $('#AddToCampaignButton').hide(400); }
        }
        
        function AddVisibleToCampaign(recordId)
        {
            //start building lists of valid contact/lead ids to add to a campaign
            var contactIds = [];
            var leadIds = [];
        
        	//was a specific record id passed?
        	if (recordId)
        	{
        		//yes, so just use that id
        		if (recordId.substring(0, 3) == '003') { contactIds.push(recordId); }
                else if (recordId.substring(0, 3) == '00Q') { leadIds.push(recordId); }
        	}
        	else
        	{
	            //no, so loop through all plotted queries looking for visible leads and contacts
	            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
	            
	                //loop through the visible markers for this query
	                $.each($(this).data('records'), function(index, record) { 
	                    if (record.isVisible && record.record.Id.substring(0, 3) == '003')    //contact
	                    {
	                        contactIds.push(record.record.Id);
	                    }
	                    else if (record.isVisible && record.record.Id.substring(0, 3) == '00Q')   //lead
	                    {
	                        leadIds.push(record.record.Id);
	                    }
	                });
	            });
	        }
            
            //make sure we got some valid ids
            if (contactIds.length > 0 || leadIds.length > 0)
            {
            	CreatePopupWindow("AddToCampaignPopup", 800);
            	
            	//store the contact and lead ids for use later
            	$('#AddToCampaignPopup').data({
            		contactIds	: contactIds,
            		leadIds		: leadIds
            	});
            	
            	//show a loading message on the popup
            	$('#addtocampaign-options-wrapper').hide();
            	$('#addtocampaign-select-wrapper').show();
            	$('#addtocampaign-filter-name').val('');
            	$('#addtocampaign-select-selectiondetails span.link.clearselections').click();
            	showLoading($('#addtocampaign-select-grid-wrapper'), 'Loading Campaigns...');
            	
            	//send a request to get the available campaigns
            	$.getJSON("/apex/MATooltipAJAXResources?action=get_campaigns", function (response) {
			        if (response.success)
			        {
			        	var campaigns = {};
			        	$.each(response.campaigns, function (index, campaign) {
			        		campaigns[campaign.Id] = $.extend(campaign, {isSelected: false});
			        	});
						$('#addtocampaign-select-grid').data('records', campaigns);
						
						grid_Search.call($('#addtocampaign-select-grid'));
			        }
			    });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible contacts or leads');
            }
        }
        
        function AddToCampaign_Step2()
        {
        	//show loading
        	showLoading($('#addtocampaign-select-wrapper'));
        	
        	//validation
        	if (!($('#addtocampaign-select-selectiondetails').data('numSelected') > 0))
        	{
        		//need to select a campaign, show error
        		showError($('#addtocampaign-select-wrapper'), 'You must select one or more campaigns before proceeding');
        		return;
        	}
        	
        	//show step 2
        	hideMessage($('#addtocampaign-select-wrapper'));
        	$('#addtocampaign-select-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
       		$('#addtocampaign-options-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
        	
        	//show loading
        	showLoading($('#addtocampaign-options-wrapper'), 'Loading Statuses...');
        	
        	//send request for campaign options
        	var campaignIds = [];
        	var campaignsMap = {};
        	$.each($('#addtocampaign-select-grid').data('records'), function (id, record) {
        		if (record.isSelected) { 
        			campaignIds.push(id);
        			campaignsMap[id] = record; 
        		}
        	});
        	$.getJSON("/apex/MATooltipAJAXResources?action=get_campaign_statuses", { serializedCampaignIds: JSON.stringify(campaignIds) }, function (response) {
		        if (response.success)
		        {
		        	var $grid = $('#addtocampaign-options-grid');
		        	
		        	//populate the options grid
		        	$grid.find('.campaign-options-row').remove();
		        	$.each(campaignsMap, function (id, record) {
		        		
	        			var $row = populateCampaignOptionsRow($('#templates .campaign-options-row').clone().data('record', record).data('statusOptions', response.campaignStatuses[id]));
      					$grid.append($row);
		        		
		        	});
		        	
		        	//hide the loading indicator
		        	hideMessage($('#addtocampaign-options-wrapper'));
		        }
		        else
		        {
		        	showError($('#addtocampaign-options-wrapper'), 'Unable to load statuses');
		        }
		    })
		    .error(function(jqXHR, textStatus, errorThrown) { 
		        showError($('#addtocampaign-options-wrapper'), 'Unable to request statuses');
		    });
        }
        
        function AddToCampaign_Step1()
        {
        	//go back to step 1
        	$('#addtocampaign-select-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
       		$('#addtocampaign-options-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function AddToCampaign_Finish()
        {
        	//show loading
        	showLoading($('#addtocampaign-options-wrapper'), 'Adding...');
        	
        	//prepare request data
        	var requestData = {
        		serializedContactIds	: JSON.stringify($('#AddToCampaignPopup').data('contactIds')),
        		serializedLeadIds		: JSON.stringify($('#AddToCampaignPopup').data('leadIds'))
        	};
        	
        	//send request to add members to each selected campaign
        	$('#addtocampaign-options-grid').data('numRequestsOut', 0);
        	$('#addtocampaign-options-grid').data('numRequestsSuccessful', 0);
        	$('#addtocampaign-options-grid').data('numRequestsFailed', 0);
        	$('#addtocampaign-options-grid .campaign-options-row').each(function () {
        		if ($(this).find('.campaign-status select').length > 0) {
	        		
	        		var $campaignOptionRow = $(this);
	        		var contactIds = [];
	        		var leadIds = [];
	        		
	        		//loop over the contacts and send in batches
	        		$.each($('#AddToCampaignPopup').data('contactIds'), function (index, contactId) {
	        			contactIds.push(contactId);
	        			
	        			//send out this batch if it's ready
	        			if (contactIds.length >= 200) {
	        				AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
	        			} 
	        		});
	        		
	        		//loop over the leads and send in batches
	        		$.each($('#AddToCampaignPopup').data('leadIds'), function (index, leadId) {
	        			leadIds.push(leadId);
	        			
	        			//send out this batch if it's ready
	        			if (contactIds.length + leadIds.length >= 200) {
	        				AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
	        			} 
	        		});
	        		
	        		//send out the last batch if needed
	        		if (contactIds.length + leadIds.length > 0) {
	        			AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
	        		}
        		}
        	});
        	
        	//status update
        	showLoading($('#addtocampaign-options-wrapper'), 'Adding...' + $('#addtocampaign-options-grid').data('numRequestsOut') + ' batches remaining');
        	
        	//set up an interval to poll for completion of all of the requests
        	$('#addtocampaign-options-grid').data(
        		'addToCampaignInterval',
        		setInterval(function () {
        		
        			if ($('#addtocampaign-options-grid').data('numRequestsOut') > 0)
        			{
        				showLoading($('#addtocampaign-options-wrapper'), 'Adding...' + $('#addtocampaign-options-grid').data('numRequestsOut') + ' batches remaining');
        			}
        			else
        			{
        				//done adding, show results
        				clearInterval($('#addtocampaign-options-grid').data('addToCampaignInterval'));
        				var msgFunction = $('#addtocampaign-options-grid').data('numRequestsFailed') == 0 ? showSuccess : showWarning;
        				msgFunction(
        					$('#addtocampaign-options-wrapper'), 
        					$('#addtocampaign-options-grid').data('numRequestsSuccessful') + ' batches successful, ' + $('#addtocampaign-options-grid').data('numRequestsFailed') + ' failures',
        					2000,
        					function () {
        						ClosePopupWindow();
        					}
        				);
        			}
        		
        		}, 500)
        	);
        }
        
        function AddToCampaign_SendBatch(contactIds, leadIds, campaignId, campaignStatus, overrideExistingMemberStatus)
        {
        	//build request data
        	var requestData = {
        		serializedContactIds			: JSON.stringify(contactIds),
        		serializedLeadIds				: JSON.stringify(leadIds),
        		campaignId						: campaignId,
        		campaignStatus					: campaignStatus,
        		overrideExistingMemberStatus	: overrideExistingMemberStatus
        	};
        	
        	//send request
        	$('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') + 1);
       		$.getJSON("/apex/MATooltipAJAXResources?action=add_to_campaign", requestData, function (response) {
		        if (response.success)
		        {
		        	//increment successful batch count
		        	$('#addtocampaign-options-grid').data('numRequestsSuccessful', $('#addtocampaign-options-grid').data('numRequestsSuccessful') + 1);
		        }
		        else
		        {
		        	//increment failed batch count
		        	$('#addtocampaign-options-grid').data('numRequestsFailed', $('#addtocampaign-options-grid').data('numRequestsFailed') + 1);
		        }
		        
		        //decrement pending batch count
		        $('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') - 1);
		    })
		    .error(function(jqXHR, textStatus, errorThrown) {
		    	//increment failed batch count and decrement pending batch count
		        $('#addtocampaign-options-grid').data('numRequestsFailed', $('#addtocampaign-options-grid').data('numRequestsFailed') + 1);
		        $('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') - 1);
		    });
		    
		    //clear out the contacts and leads
		    contactIds.length = 0;
		    leadIds.length = 0;
        }
        
        function ChangeOwnerOfVisible()
        {
        	//loop through all plotted queries looking for visible records
        	var recordIds = [];
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
            
                //loop through the visible markers for this query
                $.each($(this).data('records'), function(index, record) { 
                    if (record.isVisible) {
                        recordIds.push(record.record.Id);
                    }
                });
            });
            
            //go...
            ChangeOwner(recordIds);
	    }
        
        function ChangeOwner(recordIds)
        {     
            //make sure we got some valid ids
            if (recordIds && recordIds.length > 0)
            {
            	CreatePopupWindow("ChangeOwnerPopup", 800);
            	
            	//store the record ids for later use
            	$('#ChangeOwnerPopup').data({
            		recordIds: recordIds
            	});
            	
            	//show a loading message on the popup
            	$('#changeowner-options-wrapper').hide();
            	$('#changeowner-select-wrapper').show();
            	$('#changeowner-filter-name').val('');
            	$('#changeowner-options-wrapper input[type="checkbox"]').attr('checked', 'checked');
            	showLoading($('#changeowner-select-grid-wrapper'), 'Loading Users...');
            	
            	//send a request to get the available users
            	$.getJSON("/apex/MATooltipAJAXResources?action=get_users", function (response) {
			        if (response.success)
			        {
			        	var users = {};
			        	$.each(response.users, function (index, user) {
			        		users[user.Id] = user;
			        	});
						$('#changeowner-select-grid').data('records', users);
						
						grid_Search.call($('#changeowner-select-grid'));
			        }
			    });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible markers');
            }
        }
        
        function ChangeOwner_Step1()
        {
        	//go back to step 1
        	$('#changeowner-select-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
       		$('#changeowner-options-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function ChangeOwner_Finish()
        {
        	//show loading
        	showLoading($('#changeowner-options-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Updating Records...');
        	
        	//loop through records and send out batches
        	var recordIds = [];
        	$.each($('#ChangeOwnerPopup').data('recordIds'), function (index, recordId) {
        		recordIds.push(recordId);
	                        
                //send out this batch if it's ready
                if (recordIds.length > 200)
                {
                	ChangeOwner_SendBatch(recordIds);
                }
        	});
        	
        	//send the last batch if needed
            if (recordIds.length > 0) {
            	ChangeOwner_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($('#changeowner-options-wrapper'), 'Updating...' + $('#changeowner-options-wrapper').data('batchCount') + ' batches remaining');
           	
           	//set an interval to track when all the batches have returned
           	$('#changeowner-options-wrapper').data(
           		'batchInterval',
           		setInterval(function () {
            	
            		if ($('#changeowner-options-wrapper').data('batchCount') == 0) 
            		{
            			//clear this interval because we're done
		            	clearInterval($('#changeowner-options-wrapper').data('batchInterval'));
		            	
            			//show status message and then close the popup
			        	if ($('#changeowner-options-wrapper').data('failureCount') == 0)
			        	{
				        	showSuccess($('#changeowner-options-wrapper'), $('#changeowner-options-wrapper').data('successCount') + ' records updated, 0 failures.', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
				        else
				        {
				        	showWarning($('#changeowner-options-wrapper'), $('#changeowner-options-wrapper').data('successCount') + ' records updated, ' + $('#changeowner-options-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
		            }
		            else
		            {
		            	//status update
		            	showLoading($('#changeowner-options-wrapper'), 'Updating...' + $('#changeowner-options-wrapper').data('batchCount') + ' batches remaining');
		            }
                
               	}, 1000)
			);
        }
        
        function ChangeOwner_SendBatch(recordIds)
        {
        	//prepare request data
        	var requestData = {
        		serializedRecordIds	: JSON.stringify(recordIds),
        		ownerId				: $('#changeowner-select-grid').data('selectedRecord').Id,
        		transferNotes		: $('#changeowner-notes').is(':checked'),
        		transferAttachments	: $('#changeowner-attachments').is(':checked'),
        		transferTasks		: $('#changeowner-tasks').is(':checked'),
        		transferEvents		: $('#changeowner-events').is(':checked')
        	};
        	
        	//send request to change ownership
       		$.getJSON("/apex/MATooltipAJAXResources?action=change_owner", requestData, function (response) {
		        if (response.success)
		        {
		        	//count the number of successful/failed responses
		        	var failures = 0;
		        	var successes = 0;
		        	$.each(response.results, function (index, result) {
		        		if (result.success) {
		        			successes++;
		        		}
		        		else {
		        			failures++;
		        		}
		        	});
		        	
		        	//decrement the batches we have out
	                $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
			        $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + failures);
			        $('#changeowner-options-wrapper').data('successCount',$('#changeowner-options-wrapper').data('successCount') + successes);
		        }
		        else
		        {
		        	//decrement the batches we have out
	                $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
			        $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + recordIds.length);
		        }
		    })
		    .error(function(jqXHR, textStatus, errorThrown) { 
		        //decrement the batches we have out
                $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
		        $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + recordIds.length);
		    });
		    
		    //increment the batches that we have out and restart the id list
		    $('#changeowner-options-wrapper').data('batchCount',$('#changeowner-options-wrapper').data('batchCount') + 1);
		    recordIds.length = 0;
        }
        
        function NewTaskForVisible()
        {
        	//loop through all plotted queries looking for visible records
        	var recordIds = [];
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
            	
            	//make sure this object supports activities
            	if ($(this).data('supportsActivities'))
            	{
	                //loop through the visible markers for this query
	                $.each($(this).data('records'), function(index, record) { 
	                    if (record.isVisible) {
	                        recordIds.push(record.record.Id);
	                    }
	                });
	            }
            });
            
            //go...
            NewTask(recordIds);
        }
        
        function NewTask(recordIds)
        {
        	//make sure we got some valid ids
            if (recordIds && recordIds.length > 0)
            {
            	CreatePopupWindow("NewTaskPopup", 800);
            	
            	//store the record ids for later use
            	$('#NewTaskPopup').data({
            		recordIds: recordIds
            	});
            	
            	//clear out any existing data
            	$('#newtask-details-wrapper').hide();
            	$('#newtask-assignto-wrapper').show();
            	$('#newtask-filter-name').val('');
            	$('#newtask-details-wrapper input, #newtask-details-wrapper textarea').val('');
            	showLoading($('#newtask-select-grid-wrapper'), 'Loading Users...');
            	
            	//send a request to get the available users
            	$.getJSON("/apex/MATooltipAJAXResources?action=get_users", function (response) {
			        if (response.success)
			        {
			        	var users = {};
			        	$.each(response.users, function (index, user) {
			        		users[user.Id] = user;
			        	});
						$('#newtask-select-grid').data('records', users);
						
						grid_Search.call($('#newtask-select-grid'));
			        }
			    });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible markers that support activities');
            }
        }
        
        function NewTask_Step1()
        {
        	//go back to step 1
        	$('#newtask-assignto-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
       		$('#newtask-details-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewTask_Finish()
        {
        	//show loading
        	showLoading($('#newtask-details-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Adding Tasks...');
        	
        	//loop through records and send out batches
        	var recordIds = [];
        	$.each($('#NewTaskPopup').data('recordIds'), function (index, recordId) {
        		recordIds.push(recordId);
	                        
                //send out this batch if it's ready
                if (recordIds.length > 200)
                {
                	NewTask_SendBatch(recordIds);
                }
        	});
        	
        	//send the last batch if needed
            if (recordIds.length > 0) {
            	NewTask_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($('#newtask-details-wrapper'), 'Adding...' + $('#newtask-details-wrapper').data('batchCount') + ' batches remaining');
           	
           	//set an interval to track when all the batches have returned
           	$('#newtask-details-wrapper').data(
           		'batchInterval',
           		setInterval(function () {
           		
            		if ($('#newtask-details-wrapper').data('batchCount') == 0) 
            		{
            			//clear this interval because we're done
		            	clearInterval($('#newtask-details-wrapper').data('batchInterval'));
		            	
            			//show status message and then close the popup
			        	if ($('#newtask-details-wrapper').data('failureCount') == 0)
			        	{
				        	showSuccess($('#newtask-details-wrapper'), $('#newtask-details-wrapper').data('successCount') + ' records added, 0 failures.', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
				        else
				        {
				        	showWarning($('#newtask-details-wrapper'), $('#newtask-details-wrapper').data('successCount') + ' records added, ' + $('#newtask-details-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
		            }
		            else
		            {
		            	//status update
		            	showLoading($('#newtask-details-wrapper'), 'Adding...' + $('#newtask-details-wrapper').data('batchCount') + ' batches remaining');
		            }
                
               	}, 1000)
			);
        }
        
        function NewTask_SendBatch(recordIds)
        {
        	//prepare request data
        	var requestData = {
        		serializedRecordIds	: JSON.stringify(recordIds),
        		ownerId				: $('#newtask-select-grid').data('selectedRecord').Id,
        		subject				: $('#newtask-details-subject').val(),
        		dueDate				: $('#newtask-details-duedate').val(),
        		description			: $('#newtask-details-description').val()
        	};
        	
        	//send request to add tasks
       		$.getJSON("/apex/MATooltipAJAXResources?action=add_tasks", requestData, function (response) {
		        if (response.success)
		        {
		        	//count the number of successful/failed responses
		        	var failures = 0;
		        	var successes = 0;
		        	$.each(response.results, function (index, result) {
		        		if (result.success) {
		        			successes++;
		        		}
		        		else {
		        			failures++;
		        		}
		        	});
		        	
		        	//decrement the batches we have out
	                $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
			        $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + failures);
			        $('#newtask-details-wrapper').data('successCount',$('#newtask-details-wrapper').data('successCount') + successes);
		        }
		        else
		        {
		        	//decrement the batches we have out
	                $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
			        $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + recordIds.length);
		        }
		    })
		    .error(function(jqXHR, textStatus, errorThrown) { 
		        //decrement the batches we have out
                $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
		        $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + recordIds.length);
		    });
		    
		    //increment the batches that we have out and restart the id list
		    $('#newtask-details-wrapper').data('batchCount',$('#newtask-details-wrapper').data('batchCount') + 1);
		    recordIds.length = 0;
        }
        
        function NewEventForVisible()
        {
        	//loop through all plotted queries looking for visible records
        	var recordIds = [];
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
            	
            	//make sure this object supports activities
            	if ($(this).data('supportsActivities'))
            	{
	                //loop through the visible markers for this query
	                $.each($(this).data('records'), function(index, record) { 
	                    if (record.isVisible) {
	                        recordIds.push(record.record.Id);
	                    }
	                });
	            }
            });
            
            //go...
            NewEvent(recordIds);
        }
        
        function NewEvent(recordIds)
        {
        	//make sure we got some valid ids
            if (recordIds && recordIds.length > 0)
            {
            	CreatePopupWindow("NewEventPopup", 800);
            	
            	//store the record ids for later use
            	$('#NewEventPopup').data({
            		recordIds: recordIds
            	});
            	
            	//clear out any existing data
            	$('#newevent-details-wrapper').hide();
            	$('#newevent-assignto-wrapper').show();
            	$('#newevent-filter-name').val('');
            	$('#newevent-details-wrapper input, #newevent-details-wrapper textarea').val('');
            	
            	//set default values
            	var startMoment = moment();
            	var endMoment = moment().add('hours', 1);
            	$('#newevent-details-startdate').val(startMoment.format('MM/DD/YYYY'));
            	$('#newevent-details-starthour').val(startMoment.format('h'));
            	$('#newevent-details-startminute').val(startMoment.format('mm'));
            	$('#newevent-details-startperiod').val(startMoment.format('A'));
            	$('#newevent-details-enddate').val(endMoment.format('MM/DD/YYYY'));
            	$('#newevent-details-endhour').val(endMoment.format('h'));
            	$('#newevent-details-endminute').val(endMoment.format('mm'));
            	$('#newevent-details-endperiod').val(endMoment.format('A'));
            	
            	//show loading
            	showLoading($('#newevent-select-grid-wrapper'), 'Loading Users...');
            	
            	//send a request to get the available users
            	$.getJSON("/apex/MATooltipAJAXResources?action=get_users", function (response) {
			        if (response.success)
			        {
			        	var users = {};
			        	$.each(response.users, function (index, user) {
			        		users[user.Id] = user;
			        	});
						$('#newevent-select-grid').data('records', users);
						
						grid_Search.call($('#newevent-select-grid'));
			        }
			    });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible markers that support activities');
            }
        }
        
        function NewEvent_Step1()
        {
        	//go back to step 1
        	$('#newevent-assignto-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
       		$('#newevent-details-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewEvent_Finish()
        {
        	//validation
        	var startMoment = moment($('#newevent-details-startdate').val() + ' ' + $('#newevent-details-starthour').val() + ':' + $('#newevent-details-startminute').val() + ' ' + $('#newevent-details-startperiod').val());
        	var endMoment = moment($('#newevent-details-enddate').val() + ' ' + $('#newevent-details-endhour').val() + ':' + $('#newevent-details-endminute').val() + ' ' + $('#newevent-details-endperiod').val());
        	if (!(startMoment.isValid() && endMoment.isValid())) {
        		showError($('#newevent-details-wrapper'), 'Invalid Dates');
        		return;
        	}
        	
        	//show loading
        	showLoading($('#newevent-details-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Adding Events...');
        	
        	//loop through records and send out batches
        	var recordIds = [];
        	$.each($('#NewEventPopup').data('recordIds'), function (index, recordId) {
        		recordIds.push(recordId);
	                        
                //send out this batch if it's ready
                if (recordIds.length > 200)
                {
                	NewEvent_SendBatch(recordIds);
                }
        	});
        	
        	//send the last batch if needed
            if (recordIds.length > 0) {
            	NewEvent_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($('#newevent-details-wrapper'), 'Adding...' + $('#newevent-details-wrapper').data('batchCount') + ' batches remaining');
           	
           	//set an interval to track when all the batches have returned
           	$('#newevent-details-wrapper').data(
           		'batchInterval',
           		setInterval(function () {
           		
            		if ($('#newevent-details-wrapper').data('batchCount') == 0) 
            		{
            			//clear this interval because we're done
		            	clearInterval($('#newevent-details-wrapper').data('batchInterval'));
		            	
            			//show status message and then close the popup
			        	if ($('#newevent-details-wrapper').data('failureCount') == 0)
			        	{
				        	showSuccess($('#newevent-details-wrapper'), $('#newevent-details-wrapper').data('successCount') + ' records added, 0 failures.', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
				        else
				        {
				        	showWarning($('#newevent-details-wrapper'), $('#newevent-details-wrapper').data('successCount') + ' records added, ' + $('#newevent-details-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
				        		ClosePopupWindow();
				        	});
				        }
		            }
		            else
		            {
		            	//status update
		            	showLoading($('#newevent-details-wrapper'), 'Adding...' + $('#newevent-details-wrapper').data('batchCount') + ' batches remaining');
		            }
                
               	}, 1000)
			);
        }
        
        function NewEvent_SendBatch(recordIds)
        {
        	//prepare request data
        	var requestData = {
        		serializedRecordIds	: JSON.stringify(recordIds),
        		ownerId				: $('#newevent-select-grid').data('selectedRecord').Id,
        		subject				: $('#newevent-details-subject').val(),
        		startDate			: $('#newevent-details-startdate').val() + ' ' + $('#newevent-details-starthour').val() + ':' + $('#newevent-details-startminute').val() + ' ' + $('#newevent-details-startperiod').val(),
        		endDate				: $('#newevent-details-enddate').val() + ' ' + $('#newevent-details-endhour').val() + ':' + $('#newevent-details-endminute').val() + ' ' + $('#newevent-details-endperiod').val(),
        		description			: $('#newevent-details-description').val()
        	};
        	
        	//send request to add tasks
       		$.getJSON("/apex/MATooltipAJAXResources?action=add_events", requestData, function (response) {
		        if (response.success)
		        {
		        	//count the number of successful/failed responses
		        	var failures = 0;
		        	var successes = 0;
		        	$.each(response.results, function (index, result) {
		        		if (result.success) {
		        			successes++;
		        		}
		        		else {
		        			failures++;
		        		}
		        	});
		        	
		        	//decrement the batches we have out
	                $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
			        $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + failures);
			        $('#newevent-details-wrapper').data('successCount',$('#newevent-details-wrapper').data('successCount') + successes);
		        }
		        else
		        {
		        	//decrement the batches we have out
	                $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
			        $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + recordIds.length);
		        }
		    })
		    .error(function(jqXHR, textStatus, errorThrown) { 
		        //decrement the batches we have out
                $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
		        $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + recordIds.length);
		    });
		    
		    //increment the batches that we have out and restart the id list
		    $('#newevent-details-wrapper').data('batchCount',$('#newevent-details-wrapper').data('batchCount') + 1);
		    recordIds.length = 0;
        }
        
        function updateChatterSubscriptions(shouldFollow)
        {
        	//show a status message
        	var $status = growlLoading($('#growl-wrapper'), 'Updating Subscriptions...')
        		.data({ batchCount: 0, failureCount: 0 });
        
        	//loop through all plotted queries looking for visible records
        	var recordIds = [];
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
            
            	//make sure this objects supports chatter
            	if ($(this).data('supportsChatter')) 
            	{
	                //loop through the visible markers for this query
	                $.each($(this).data('records'), function(index, record) { 
	                    if (record.isVisible) {
	                        recordIds.push(record.record.Id);
	                        
	                        //send out this batch if it's ready
	                        if (recordIds.length > 200)
	                        {
	                        	sendChatterSubscriptionsBatch($status, recordIds, shouldFollow);
	                        }
	                    }
	                });
	            }
            });
            
            //send the last batch if needed
            if (recordIds.length > 0) {
            	sendChatterSubscriptionsBatch($status, recordIds, shouldFollow);
            }
            
            //done sending batches, update status message
           	$status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
           	
           	//set an interval to track when all the batches have returned
           	$status.data(
           		'batchInterval',
           		setInterval(function () {
            	
            		if ($status.data('batchCount') == 0) 
            		{
            			//clear this interval because we're done
		            	clearInterval($status.data('batchInterval'));
		            	
            			//show success
            			$status = growlSuccess($status, 'Updates Successful');
		            }
                
               	}, 1000)
			);
	    }
	    
	    function sendChatterSubscriptionsBatch($status, recordIds, shouldFollow)
	    {
	    	//send request
	    	var recordCount = recordIds.length;
            $.getJSON("/apex/MATooltipAJAXResources?action=update_chatter_subscriptions", { serializedRecordIds: JSON.stringify(recordIds), shouldFollow: shouldFollow }, function (response) {
		        if (response.success)
		        {
		        	
		        }
		        else
		        {
		        	$status.data('failureCount', $status.data('failureCount') + recordCount);
		        }
		        
		        //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
		    })
		    .error(function () {
		    	//decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
		    });
		    
		    //increment the batches that we have out and restart the id list
		    $status.data('batchCount', $status.data('batchCount') + 1);
		    recordIds.length = 0;
	    }

var MaxExportSize;
var MaxQuerySize = 2000;

function StartUpJS()
{
   	//Create a map inside the map container DOM node
    var mapContainer = document.getElementById("mapdiv");
	map = new nokia.maps.map.Display(mapContainer, {
	   // initial center and zoom level of the map
	   center: [37.5740108, -98.4801102],
	   zoomLevel: 4,
	   copyrightAlignment: 'topright',
	   components: [
	       new nokia.maps.map.component.Behavior(),
	       new nokia.maps.map.component.DistanceMeasurement(),
	       new nokia.maps.map.component.Overview(),
	       new nokia.maps.positioning.component.Positioning()
	   ]
	});
    
    $("#mapdiv").css('height', (screen.height-320) + "px");
    $("#sidebar").css('height', (screen.height-331) + "px");
    $("#sidebar-content").css('height', (screen.height-331) + "px");
    $("#left-shadow").css('height', (screen.height-320) + "px");
    $("#right-shadow").css('height', (screen.height-320) + "px");
    $("#bodyTable").css('height', (screen.height-285) + "px");
    $("#Slider-PlottedSavedQueries").css('height', (screen.height-415) + "px");
    $("#SQTree").css('height', (screen.height-416) + "px");
    $("#tabs-nav").css('height', (screen.height-330) + "px");
    $("#tab-queries").css('height', (screen.height-367) + "px"); 
    $("#tab-directions").css('height', (screen.height-367) + "px"); 
    $("#DirectionsInput").css('max-height', (screen.height-465) + "px");
    $("#DirectionsOutput").css('max-height', (screen.height-480) + "px");    
    
    map.components.add(ViewControl);
    map.components.add(ScaleBarComponent);
    map.components.add(InfoBubbles);

    nokia.maps.Config.setDefault("secureConnection", "prefer");
    
    MoveMapComponentsRight();
    
    $GeoCurrentRequestElement = $('#GeoCurrentRequest');
    $GeoSentRequestElement = $('#GeoSentRequest');
    $GeoProcessedRequestElement = $('#GeoProcessedRequest');
    $GeoRequestPendingElement = $('#GeoRequestPending');
    
    UpdateGeoCoderStatus();
    
    //---- PATCH                
    //overwrite broken method with new one
    map.getBestZoomLevel = function (bBoxes) {
            var that = this,
                minZL = that.minZoomLevel,
                maxZL = that.maxZoomLevel,
                bestLevel = maxZL,
                currLevel = that.zoomLevel,
                level,
                topLeft,
                bottomRight,
                padding = that.padding,
                width = that.width,
                height = that.height,
                i = bBoxes.length,
                tmp,
                bBox,
                pixelProjection = that.baseMapType.pixelProjections[maxZL],
                util = nokia.maps.util,
                max = Math.max,
                min = Math.min,
                log = Math.log,
                ceil = Math.ceil,
                LN2 = Math.LN2;
                
            isNaN(i) && util._throwIllegalArgument();
            while (i-- && bestLevel) {
                level = currLevel;
                bBox = bBoxes[i];
                topLeft = pixelProjection.geoToPixel(bBox.topLeft);
                bottomRight = pixelProjection.geoToPixel(bBox.bottomRight);

                // Special case where the bBox size is 0 × 0 pixel
                if (topLeft.equals(bottomRight)) {
                    bottomRight.x++;
                    bottomRight.y++;
                }

                level = maxZL - ceil(max(
                    log(topLeft.x > bottomRight.x ? pixelProjection.w - topLeft.x + bottomRight.x  : bottomRight.x - topLeft.x) / LN2 -
                            log(width - padding.left - padding.right) / LN2,
                    log(bottomRight.y - topLeft.y) / LN2 -
                            log(height - padding.top - padding.bottom) / LN2
                ));
                if (level < bestLevel) {
                    bestLevel = level;
                }
            }
            return max(bestLevel, minZL);
        }
    // ------ END PATCH
    
    
           
    /*Initialize Tabs*/
    $('#tabs-nav').tabs({remote:true}); 
    $('#tabs-SavedQry').tabs({remote:true}); 
    
    
    
    $( "#sortable" ).sortable({
        placeholder: 'ui-state-placeholder',
        cursor: 'move',
        update: function(ev,ui) {
            OrderNumbersOnWapPoints();
        }
    });

    
    $('#TreeTab').click(function(){
        SlideToTree();
    });
    
    $('#PlottedQueriesTab').click(function(){
        SlideToPlottedQueries();
    });  
    
    $('#DirectionsInputTab').click(function(){
        SlideToLocations();
    });
    
    $('#DirectionsOutputTab').click(function(){
        SlideToDirectionsOutput();
    });  
    
    $('#DirectionsOptionsTab').click(function(){
        SlideToDirectionsOptions();
    });

    $('#SQTree ul').children().css('font-weight', 'bold').find('li').css('font-weight','normal');          
                
     $.ajaxSetup ({  
        cache: false  
    });

    $('#AddressesNotFoundButton').click(function() {
        ShowAddressNotFoundPopup();
    });
    $('#ExportButton').click(function() {
        CreatePopupWindow("ExportPopup",600);
    });
    $('#ZoomToFitButton').click(function() {
        ZoomToFit();
    });
    $('#ShowTrafficButton').click(function() {
        ToggleTrafficOverlay();
    });
    $('#SetAsHomeButton').click(function() {
        SetDefaultMapLocation();
    });
    $('#ShowDebugWindowButton').click(function() {
        CreatePopupWindow("DebugWindowPopup",600);
    });
    
    /*Map View Buttons*/
    $('.mapview-button').click(function() {
        map.set("baseMapType", map[$(this).attr('data-baseMapType')]);
        $(this).closest('.menubutton').find('> span').html($(this).attr('data-label'));
    });
    
    /*Initialize Notification Container*/
    $("#container").notify({
        speed: 200,
        expires: false
    });
    
    
    /*Initialize Sidebar Actions*/
    $('#sidebar-button').click(function()
        {
            $('#sidebar').animate(
                {width:'toggle'}, 
                100, 
                function() 
                    {
                        // Animation complete.
                        if (this.style.display == "none")
                        {
                            //Hidden
                            MoveMapComponentsLeft();
                        }
                        else
                        {
                            //Displayed
                            MoveMapComponentsRight();
                        }
                    }
            );
        }
    );
    
    //Get Base Object for Sub Menu
    $.getJSON("/apex/MATreeAJAXResources","action=populate_base_objects",function(json)
    { 
        if(json.success)
        {
            //http://www.mennovanslooten.nl/blog/post/62
            
            BaseObjectsForSubMenu = [];
            $.each(json.records, function (i, record) {
            	
            	//remove namespace
            	removeNamespace(namespace, record);
            
                var SubMenuItem = new Object();
                SubMenuItem["label"] = record.Name__c;
                SubMenuItem["action"] =  (function(value) {
                
                    return function(obj) {
                        launchQueryEditor(
                            '/apex/EditQuery'+pageSuffix+'?b=::baseObjectId::&f=::folderId::&ft=::folderType::'
                                .replace('::baseObjectId::', value.Id)
                                .replace('::folderId::', obj.attr('Id'))
                                .replace('::folderType::', obj.attr('NodeType'))
                        );
                    }
                })(record);
                
                BaseObjectsForSubMenu.push(SubMenuItem);
            });
            
            //if we dont have any base objects, display a message for the user
            if (BaseObjectsForSubMenu.length == 0)
            {
                BaseObjectsForSubMenu = [{ label: 'No base objects available' }];
            }
        }
        else
        {
            //NotifyError("Error Populating Context Menu:Base Object List",json.error);
            Debug("Error Populating Context Menu:Base Object List" + json.error);
            BaseObjectsForSubMenu = [{ label: 'Unknown Error' }];
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Populating Context Menu:Base Object List</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Populating Context Menu:Base Object List",textStatus + " : " + errorThrown); 
    });
    
    $.getJSON("/apex/MAUserAJAXResources","action=get_user_prefs&id=" + UserId,function(json)
    { 
        if(json.success)
        {
        	/*********
        	 *	trying to get rid of these various global vars and just use userSettings, but I haven't looked around for all the uses yet
        	 ******/ 
        
            var record = removeNamespace(namespace, json.record);
            
            Debug("User Query Result: " + record);
            
            IsCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            userSettings.isCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            
            userSettings.defaultMapSettings = {};
            if (record.MADefaultLatitude__c != null && record.MADefaultLongitude__c != null)
            {
                Debug("Setting Center Point");
                CenterLat = parseFloat(record.MADefaultLatitude__c);
                CenterLong = parseFloat(record.MADefaultLongitude__c);
                
                $.extend(userSettings.defaultMapSettings, {
                	latitude	: parseFloat(record.MADefaultLatitude__c),
                	longitude	: parseFloat(record.MADefaultLongitude__c)
                });
                
                map.setCenter(new nokia.maps.geo.Coordinate(parseFloat(record.MADefaultLatitude__c),parseFloat(record.MADefaultLongitude__c)));
            }
            
            if (record.MAMaxQuerySize__c != null)
            {
                Debug("Setting Max Query Size");
                MaxQuerySize = parseInt(record.MAMaxQuerySize__c);
                userSettings.maxQuerySize = parseInt(record.MAMaxQuerySize__c);
                
                if (MaxQuerySize > 10001)
                {
                    MaxQuerySize = 10000;
                    userSettings.maxQuerySize = 10000;
                }
            }
            else
            {
                MaxQuerySize = 2000;
                userSettings.maxQuerySize = 2000;
            }
            
            
            if (record.MADefaultZoomLevel__c != null)
            {
            	userSettings.defaultMapSettings.zoomLevel = parseInt(record.MADefaultZoomLevel__c);
            
                Debug("Setting Default Zoom Level");
                DefaultZoomLevel = parseInt(record.MADefaultZoomLevel__c);
                map.setZoomLevel(parseInt(record.MADefaultZoomLevel__c));
            }
            
            
            if (record.MADefaultType__c != null)
            {
            	userSettings.defaultMapSettings.maptype = record.MADefaultType__c;
            
                Debug("Setting Default Map Type");
                DefaultMapType = record.MADefaultType__c == 'HYBRID' ? 'SATELLITE' : record.MADefaultType__c == 'MAP' ? 'NORMAL' : record.MADefaultType__c;
                map.set("baseMapType", map[record.MADefaultType__c]);
        		$('#mapviewtext').html($('.mapview-button[data-baseMapType='+record.MADefaultType__c+']').attr('data-label'));
            }
            
            if (record.AllowMapAnythingExports__c == false)
            {
                Debug("User Is Not Allowed to Export");
                //document.getElementById("ExportTab").className="tabs-container tabs-hide";
                $('#tabs-nav').tabs( "remove" , 2 );
                MaxExportSize = 0;
                
                userSettings.maxExportSize = 0;
            }
            else
            {
                Debug("user is Allowed to Export");
                if (record.MAMaxExportSize__c == null)
                {
                    Debug("MAMaxExportSize__c is null");
                    MaxExportSize = 1000000;
                    
                    userSettings.maxExportSize = 1000000;
                }
                else
                {
                    Debug("MAMaxExportSize__c is " + parseInt(record.MAMaxExportSize__c));
                    MaxExportSize = parseInt(record.MAMaxExportSize__c);
                    
                    userSettings.maxExportSize = parseInt(record.MAMaxExportSize__c);
                }
                
            }
            
            if (record.DefaultProximityRadius__c == null)
            {
                document.getElementById("ProximityRadius").value = "50";
            }
            else
            {
                document.getElementById("ProximityRadius").value = record.DefaultProximityRadius__c;
            }
            
            if (record.PreferredTypeOfMeasurement__c == null)
            {
                ScaleBarComponent.set("showImperialUnits", true);
                document.getElementById("ProximityRadiusMeasurementType").value = "MILES";
            }
            else
            {
                var MesType = record.PreferredTypeOfMeasurement__c;
                
                if (MesType == "Miles" || MesType == "Feet" || MesType == "Yards")
                {
                    ScaleBarComponent.set("showImperialUnits", true);
                    $('#UnitType').val('mi');
                }
                else
                {
                    ScaleBarComponent.set("showImperialUnits", false);
                    $('#UnitType').val('km');
                }
                
                document.getElementById("ProximityRadiusMeasurementType").value = MesType.toUpperCase();
            }
            
            if(record.MapAnythingSettings__c != null && record.MapAnythingSettings__c !== "")
            {
                try 
                { 
                    var MASettingsObj = JSON.parse(record.MapAnythingSettings__c);
                    
                    //extend our user settings object with these settings (will be used later)
                    $.extend(userSettings, MASettingsObj);
                    
                    if(MASettingsObj.PlotOnLoadQueries)
                    {
                        $.each(MASettingsObj.PlotOnLoadQueries, function(index, id)
                        {
                            $("#" + id).addClass('jstree-star');
                            PlotQuery(id, 'Markers');
                        });
                    }
                    
                    if (typeof MASettingsObj.MapItProximityOn != 'undefined' && MASettingsObj.MapItProximityOn)
                    {
                        $('.mapit-proximity-on').attr('checked', 'checked');
                    }
                }
                catch (err) { }
            }
            
            OnUserLoadEventCompletd = true;
        }
        else
        {
            Debug("Error Querying User, " + json.error);
            DisplayPropertiesOfObject(json.error,0);
            HideLoadingDialog();
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Querying User</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Querying User",textStatus + " : " + errorThrown); 
    });
    
    DOMNode = nokia.maps.dom.EventTarget(map);
                
    CallBackFunction = function(oList ,method,element,idx )
        { 
            
            if (element["_type"] != "circle")
            {
        
                //Debug("method: " + method);
                if (method=="add")
                {
                    HideLoadingDialog();
                }
                else if (method=="remove")
                {
                    HideLoadingDialog();
                }
            }
        };
    
    map.objects.addObserver(CallBackFunction);
    
    //accept default queries (to be used later)        
    try 
    { 
        if(($('[id$="serializedDefaultQueries"]').val() !== null) && ($('[id$="serializedDefaultQueries"]').val() !== ""))
        {
            defaultQueries = JSON.parse($('[id$="serializedDefaultQueries"]').val());
        }
        
        if(defaultQueries) 
        {
            $.each(defaultQueries, function(index, defaultQuery)
            {
                if(defaultQuery.type == 'Record')
                {
                	var requestData = {
                		id:	'Record-'+defaultQuery.id,
                		UserId: '{!$User.Id}',
                		RecordId: defaultQuery.id,
                		BaseObjectId: defaultQuery.baseObjectId,
                		markerColor: defaultQuery.markerColor,
                		tooltipFieldsString: JSON.stringify(defaultQuery.tooltipFields)
                	};
                	
                	PlotQuery(requestData, 'Markers');
                }
                else if(defaultQuery.type == 'Error')
                {
                    Debug("<b>Invalid parameters from Map It!!</b>");
                    Debug("id: " + defaultQuery.id);
                    Debug("baseObjectId: " + defaultQuery.baseObjectId);
                    Debug("tooltipField: " + defaultQuery.tooltipField);
                    Debug("markerColor: " + defaultQuery.markerColor);
                    
                    NotifyError("Map It Error!", "Check Debug log and notify an Administrator.");     
                }
            });
        }
    }
    catch (err) 
    {
        Debug("DefaultQuery Catch!");
        DisplayPropertiesOfObject(err,0);
        NotifyError("Map It Error!", "Check Debug log and notify an Administrator.");  
    }           
}

function UpdateGeoCoderStatus()
{
    $GeoCurrentRequestElement.html(GeoCurrentRequest);
    $GeoSentRequestElement.html(GeoSentRequest);
    $GeoProcessedRequestElement.html(GeoProcessedRequest);
    $GeoRequestPendingElement.html(AddressesToBeGeoCoded.length);
}

// JavaScript Document
function ClearExport()
{
    if (confirm('You are about to delete all exports, do you which to continue?'))
    {
        DeleteExportsAF();
        //DeleteMAExports();
        //ChangeDivStatus("ExportStatus","Exports Deleted!");
    }           
}

function DoExport()
{
	if (userSettings.maxExportSize > 0)
	{
	    if ($('#ExportName').val() == '')
	    {
	    	showError($('#mapdiv').parent(), 'Please enter an export name');
	    }
	    else
	    {
	        if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0)
	        {
	            window.setTimeout(function(){ CreatePopupWindow('LoadingPopup',300); }, 0);
	            
	            //Pause while loading window opens
	            window.setTimeout(function(){  StartExport(); }, 100);
	        }
	        else
	        {
	            showError($('#mapdiv').parent(), 'No visible markers');
	        }
	    }
	}
	else
	{
		showError($('#mapdiv').parent(), 'You do not have permission to export');
	}   
}

function StartExport()
{
    Debug("VisibleQueries: " + $('#PlottedQueriesContainer .PlottedRowUnit').length);
                
    var ExportName = $('#ExportName').val();    
    
    Debug("Export Name: " + ExportName);
    var ExportRows = new Array();
    
    var TotalExportSize = 1;
    
    $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
		
		var $plottedQuery = $(this);
		var addressFields = $plottedQuery.data('addressFields');
		
		//Enter Headers Row
        var ExportHeaderRow = new Object();
         
        $.each($(this).data('tooltips'), function (index, tooltip) {
        	ExportHeaderRow['Tooltip'+(index + 1)+'__c'] = tooltip.FieldLabel;
        });
         
        ExportRows.push(addNamespace(namespace, ExportHeaderRow));
         
        $.each($(this).data('records'), function(index, record) { 
            
            if (!record.isVisible)
            {
            	//this record is not currently visible so skip it
            	return;
            }
            else if (TotalExportSize <= userSettings.maxExportSize)
            {               
                ExportRows.push(
                	addNamespace(namespace, {
	                	RecordId__c		: record.record.Id,
		                SavedQueryName__c	: $plottedQuery.data('savedQueryName'),
		                Latitude__c      	: record.marker.Lat,
		                Longitude__c     	: record.marker.Long,
		                ObjectType__c    	: $plottedQuery.data('baseObjectName'),
		                Street__c        	: extractValue(record.record, addressFields.Street),
		                City__c          	: extractValue(record.record, addressFields.City),
		                State__c         	: extractValue(record.record, addressFields.State),
		                Zip__c           	: extractValue(record.record, addressFields.Zip),
		                Country__c       	: extractValue(record.record, addressFields.Country),
		                Tooltip1__c      	: extractTooltipValue($plottedQuery.data('tooltips')[0], record),
		                Tooltip2__c      	: extractTooltipValue($plottedQuery.data('tooltips')[1], record),
		                Tooltip3__c      	: extractTooltipValue($plottedQuery.data('tooltips')[2], record),
						Tooltip4__c      	: extractTooltipValue($plottedQuery.data('tooltips')[3], record),
		              	Tooltip5__c      	: extractTooltipValue($plottedQuery.data('tooltips')[4], record),
		                Tooltip6__c      	: extractTooltipValue($plottedQuery.data('tooltips')[5], record),
		                Tooltip7__c      	: extractTooltipValue($plottedQuery.data('tooltips')[6], record)
                	})
                );
                 
                TotalExportSize++;
            }
            else
            {
                Debug("Above MaxExportSize");   
                return false;
            }
        });
    });

    var MyJSObject = {
	    action: 'export_all',
	    ExportName: ExportName,
	    ExportRows: ExportRows
    };
    
    $.ajax({
        url: 'MAExportAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                Debug("Done Creating Export!");
                ClosePopupWindow();
                PopulateMAExportsAF();  
            }
            else
            {
                NotifyError("Error Exporting!",obj.error);
                Debug("Error Exporting: " + obj.error);
            }
        }
    }); 
}

// JavaScript Document
function AddGeoCoderObservers()
{
    RoutingGeoCodeIsRunning = false;
    
    RoutingGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    var WayPoint = RoutingGeoCodeList.get(0);
                    
                    Debug("Found Results - " + WayPoint.Index + " Length: " + observedManager.getLocations().length);
                    
                    
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']")
                            .find('input')
                            .addClass('GoodGeocodeForWaypoint')
                            .val(FormattedAddress);
                        
                        //Debug("Address: " + SearchResult.location.address);
    
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                
                        WayPoint.Lat = Latitude;
                        WayPoint.Long = Longitude;
                        WayPoint.WayPointTitle = FormattedAddress;
                        WayPoint.Address = FormattedAddress;
                        
                        WayPointArray[WayPoint.Index] = WayPoint;
                        //WayPointArray.push(WayPoint);
                        
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                    }
                    else
                    {
                        HasRoutingErrors = true;
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']").find('input').addClass('BadGeocodeForWaypoint');
                        NotifyError("Error GeoCoding Address","There was an error geocoding the follow address: " + WayPoint.Address);
                    }
                    
                    RoutingGeoCodeList.removeAt(0);
                }
                else if(value == "started") 
                {
                    //g1StatusElement.innerHTML = "Processing (" + GeoCodeList1.getLength() + ")";
                }
                else if(value == "failed") 
                {
                    //g1StatusElement.innerHTML = "Failed";
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
    
    
     RoutingGeoCodeList.addObserver(
         function(oList,method,element,idx)
         {
             if (method=="add")
             {
                 //Start GeoCoding
                 if (!RoutingGeoCodeIsRunning)
                 {
                    RoutingGeoCodeIsRunning = true;
                    //g1StatusElement.innerHTML = "Starting";
                    RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
             }
             else if (method=="remove")
             {
                 RoutingGeoCoder.clear();
                 if (oList.getLength() > 0)
                 {
                     RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
                 else
                 {
                    RoutingGeoCodeIsRunning = false;
                    ProcessWayPoints();
                 }
             }
         }
     
     );
     
     ProximityGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    Debug("Finished proximity GeoCode!");
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                                    
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                        
                        document.getElementById("ProximityAddress").value = FormattedAddress;
                        AddOval(Latitude,Longitude);
                    }
                    else
                    {
                        ChangeDivStatus("ProximityAddressStatus","<b>ERROR Geocoding</b>");
                    }
                }
                else if(value == "started") 
                {
                    ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
                }
                else if(value == "failed") 
                {
                    ChangeDivStatus("ProximityAddressStatus","Address Not Found!");
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
     
     
          
}
function GenerateSearchRequest(SearchText)
{
    return PrepareAddressForGeoCode(SearchText);
}
function PrepareAddressForGeoCode(strAddress)
{
    return encodeURIComponent(strAddress);
}
function ObjectsToUpdateWithLatLongCleanUp()
{
    if (GeoCodeList1.getLength() == 0 && 
        GeoCodeList2.getLength() == 0 && 
        GeoCodeList3.getLength() == 0 && 
        GeoCodeList4.getLength() == 0)
    {

        Debug("Executing ObjectsToUpdateWithLatLongCleanUp");
                
        for (var key in ObjectsToUpdateWithLatLong)
        {
            if (ObjectsToUpdateWithLatLong[key].length > 0)
            {
                //Debug("<br/>key: " + key);
                //Debug("ObjectsToUpdateWithLatLong[key].length: " + ObjectsToUpdateWithLatLong[key].length);
                //DisplayPropertiesOfObject(ObjectsToUpdateWithLatLong[key]);
                
                if(key != "remove")
                {                
                    var MyJSObject = {
                        action: 'save_lat_long', 
                        ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[key]
                    };
                                    
                    $.ajax({
                    url: 'MAGeoCodeAJAXResources',
                    type: 'POST',
                    dataType: 'JSON',
                    data: { MyJSObject: JSON.stringify(MyJSObject) },
                    complete: function (response)
                    {
                        var obj = $.parseJSON(response.responseText);                      
                        
                        if(obj.success)
                        {
                            //Debug("Successfully saved objects.");
                            ObjectsToUpdateWithLatLong = new Array();
                        }
                        else
                        {
                            NotifyError("ObjectsToUpdateWithLatLongCleanUp Error",obj.error);
                            Debug("ObjectsToUpdateWithLatLongCleanUp Error " + obj.error);
                            HideLoadingDialog();
                        }
                    }
                    });
                }
            }
        }        
    }
    else
    {
        Debug("GeoCodeList1: " + GeoCodeList1.getLength());
        Debug("GeoCodeList2: " + GeoCodeList2.getLength());
        Debug("GeoCodeList3: " + GeoCodeList3.getLength());
        Debug("GeoCodeList4: " + GeoCodeList4.getLength());
    }
}
function SaveLatLong(lat,lng, data, pTp)
{
    //Check if Lat & Long Fields are Set
    if ( pTp.LongitudeField != null && pTp.LatitudeField != null && pTp.sObjectId != null && pTp.sObjectId != "")
    {  
        /*
        $.each(data.getLocations(), function(index, value) { 
            Debug("Index: " + index);
            DisplayPropertiesOfObject(value,0);
            DisplayPropertiesOfObject(value.mapView,0);
            DisplayPropertiesOfObject(value.address,0);
        });
        */     
       
        //var relevance = data.relevance;
        //var matchLevel = data.matchLevel;
        
        var LatLongJSObj = new Object();
        
        var SearchResult = data.getLocations()[0];
        LatLongJSObj.latitude = lat;
        LatLongJSObj.longitude = lng;
        LatLongJSObj.street = SearchResult.address.street;
        LatLongJSObj.city = SearchResult.address.city;
        LatLongJSObj.state = SearchResult.address.state;
        LatLongJSObj.country = SearchResult.address.country;
        LatLongJSObj.county = SearchResult.address.county ;
        LatLongJSObj.district = SearchResult.address.district;
        LatLongJSObj.postalcode = SearchResult.address.postalCode;
        LatLongJSObj.suite = SearchResult.address.suite;
        LatLongJSObj.floor = SearchResult.address.floor;
        LatLongJSObj.houseNumber = SearchResult.address.houseNumber;                       
        LatLongJSObj.compiledStreet = (LatLongJSObj.houseNumber != null ? LatLongJSObj.houseNumber + " " : "") + (LatLongJSObj.floor != null ? "Floor - " + LatLongJSObj.floor + " " + ", " : "") + (LatLongJSObj.street != null ? LatLongJSObj.street + " " : "") + (LatLongJSObj.suite != null ? "Suite - " + LatLongJSObj.suite : ""); 
        LatLongJSObj.pTp = pTp;
        
        var HasUpdates = false;
        
        if ((pTp.LatitudeField != null && pTp.LatitudeField != "") || (pTp.LongitudeField != null && pTp.LongitudeField != "") || (pTp.CleanStreet != null && pTp.CleanStreet != "") 
            || (pTp.CleanCity != null && pTp.CleanCity != "") || (pTp.CleanState != null && pTp.CleanState != "") || (pTp.CleanCounty != null && pTp.CleanCounty != "") 
            || (pTp.CleanCountry != null && pTp.CleanCountry != "") || (pTp.CleanDistrict != null && pTp.CleanDistrict != "") || (pTp.CleanPostalCode != null && pTp.CleanPostalCode != ""))
        {
            HasUpdates = true;
        }
        
        if (HasUpdates)
        {
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject] == null)
            {
                ObjectsToUpdateWithLatLong[pTp.BaseObject] = new Array();
            }
            
            ObjectsToUpdateWithLatLong[pTp.BaseObject].push(LatLongJSObj);
            
            //Debug("ObjectsToUpdateWithLatLong[" + pTp.BaseObject + "]: " + ObjectsToUpdateWithLatLong[pTp.BaseObject].length);            
            //Debug("ObjectsToUpdateWithLatLong: " + ObjectsToUpdateWithLatLong.length);
    
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject].length  >= pTp.BatchAmount)
            {
                Debug("Above Batch Size (" + ObjectsToUpdateWithLatLong[pTp.BaseObject].length + ")");
                
                var MyJSObject = {
                    action: 'save_lat_long',                
                    ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[pTp.BaseObject]
                };
                
                $.ajax({
                url: 'MAGeoCodeAJAXResources',
                type: 'POST',
                dataType: 'JSON',
                data: { MyJSObject: JSON.stringify(MyJSObject) },
                complete: function (response)
                {
                    var obj = $.parseJSON(response.responseText);                      
                    
                    if(obj.success)
                    {
                        //Debug("Successfully saved Lat/Long.");                        
                    }
                    else
                    {
                        NotifyError("Error Saving Lat/Long",obj.error);
                        Debug("Error Saving Lat/Long " + obj.error);
                        HideLoadingDialog();
                    }
                }
                }); 
                
                ObjectsToUpdateWithLatLong[pTp.BaseObject]= new Array();
            }
            else
            {
                //Debug("Not above batch size (" + pTp.BatchAmount + ")");
            }
        }
    }
    else
    {
        Debug("Missing Lat/Long Field");
    }
}
function ReportBadGeoCode(mAddress,lat,long)
{
    try
    {
        var ToAddresses = new Array();
        ToAddresses.push('dkraun@cloudbilt.com');
        
        var sBody = "<InvalidLatLong>";        
            sBody += "<OrgId>[OrgId]</OrgId>";
            sBody += "<OrgName>[OrgName]</OrgName>";
            sBody += "<Address>" + mAddress + "</Address>";
            sBody += "<Latitude>" + lat + "</Latitude>";
            sBody += "<Longitude>" + long + "</Longitude>";
        sBody += "</InvalidLatLong>";
    
        var MyJSObject = {
                action: 'report_bad_geocode',
                replyTo: UserEmailAddress,
                subject: 'Bad GeoCode',
                htmlBody: sBody,
                toAddresses: ToAddresses
        };
        
        $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                showSuccess($('#mapdiv').parent(), 'Your email has been submitted');
            }
            else
            {
                NotifyError("Error Reporting Bad GeoCode",obj.error);
                Debug("Error Reporting Bad GeoCode " + obj.error);
            }
        }
        });
    }
    catch(error)
    {
    	showError($('#mapdiv').parent(), 'Error Sending Email: ' + error.faultcode);
    }
}

function FormatPicklistFieldValue(str)
{
    return  ((str == null) ? null : str.replace(/\s/g,""));
}

function RemoveMarker(pMarker)
{
    map.objects.remove(pMarker);
    delete pMarker.record.plottedQuery.data('records')[pMarker.record.record.Id];
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
function AddPlotOnLoadId(SavedQryID)
{
    $("#" + SavedQryID).toggleClass('jstree-star');
    StoreMASettings();
}

function StoreMASettings ()
{
    var JSONObject = {};
    var PlotOnLoadQueries = [];
    
    $("#SQTree li").each(function(){
        if($(this).hasClass("jstree-star"))
        {
            PlotOnLoadQueries.push($(this).attr("id"));
        }
     });
      
     JSONObject.PlotOnLoadQueries = PlotOnLoadQueries;
     JSONObject.MapItProximityOn = $('.mapit-proximity-on').is(':checked');
     
     $.getJSON("/apex/MAUserAJAXResources","action=store_ma_settings&id=" + UserId + "&jsonstring=" + JSON.stringify(JSONObject),function(json)
        { 
            if(json.success)
            {
                showSuccess($('#mapdiv').parent(), 'Settings Updated');
            }
            else
            {
                NotifyError("Error Updating Map Anything Settings:",json.error);
                Debug("Error Updating Map Anything Settings: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Map Anything Settings</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Map Anything Settings",textStatus + " : " + errorThrown); 
        });
}

var imgLoaderDimensions = {};
var imgLoaderCounts = {};
var imgLoaderIntervals = {};
function imgLoaded () 
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
    imgLoaderDimensions[this.imgId] = {
        width   : this.width,
        height  : this.height 
    };
}
function imgError ()
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
}

function ToggleLegendContent(Obj)
{
     $(Obj).parent().parent().find('#LegendDiv_Content').toggle();
     
     if ($(Obj).html() == '-- Hide Legend --')
     {
         $(Obj).html('-- Show Legend --');
     }
     else
     {
         $(Obj).html('-- Hide Legend --');
     }
}

function ShowMoreOrLessOnLegendDiv(Obj)
{
    //MoreOrLessLink

    
    var $ContentDiv = $(Obj).parent().parent();
    
    if ($(Obj).html() == '-- More --')
    {
        $(Obj).html('-- Less --');
    }
    else
    {
        $(Obj).html('-- More --');
    }
    
    $ContentDiv.find('table').find('#CountIsZero').toggle();
}


function LegenedCheckboxClicked(ElementObj)
{
    try
    {
        Debug("Running checkboxClicked");
        var QryIdArray = ElementObj.value.split("_");
        
        
        if (ProcessedSavedQueries[QryIdArray[0]] != null)
        {
            if (ElementObj.checked)
            {   
                ProcessedSavedQueries[QryIdArray[0]].AddLegendMarkers(QryIdArray[1]);
            }
            else
            {
                ProcessedSavedQueries[QryIdArray[0]].RemoveLegendMarkers(QryIdArray[1]);
            }
        }
    }
    catch (e)
    {
        Debug("Error1 :" + e.message);
        HideLoadingDialog();
    }
}

function ShowHidePosition()
{
    if (nokia.maps.positioning.Manager) 
    {
        if (PositionEnabled)
        {
            HideBubbles();
            HideMyPosition();
        }
        else
        {
            ShowMyPosition();
        }
    }
    else
    {
        var ErrorNote = 'Supported Browsers: <br />';
        ErrorNote += 'On PC/Mac use' + '<br />';
        ErrorNote += 'FireFox 3.5+,' + '<br />';
        ErrorNote += 'Google Chrome 5+,' + '<br />';
        ErrorNote += 'Safari 5+' + '<br />';
        ErrorNote += 'Opera 10+' + '<br />';
        
        NotifyError("Unsupported Browser",ErrorNote);
    }
}

function HideMyPosition()
{
    map.objects.remove(PositionAccuracyCircle);
    map.objects.remove(PositionMarker);
    
    PositionEnabled = false;
    $('#ShowPositionButton').html('Show Position').removeClass('btn-active');
}

function ShowMyPosition()
{
    PositioningMgr.getCurrentPosition(
        function (position) {
            var coords = position.coords;
            
            var MarkerBubbleContent = '<table cellpadding="3">';
            
            MarkerBubbleContent += '<tr><td><b>Latitude</b></td><td>' + coords.latitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Longitude</b></td><td>' + coords.longitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Accuracy</b></td><td>' + coords.accuracy + ' meters</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Address</b></td><td id="PositionAddress">' + ' Loading...</td></tr>';
            
            MarkerBubbleContent += '<tr>';
            MarkerBubbleContent += '<td><a class="button1-white" id="AddToTrip-positioning">Add to Trip</a></td>';
            MarkerBubbleContent += '<td><a class="button1-white" id="SetProxCenter-positioning">Set Proximity Center</a></td>';
            MarkerBubbleContent += '</tr>';
            MarkerBubbleContent += '<table>';
            
            PositionMarker = new nokia.maps.map.StandardMarker(coords,{
                    title: 'My Locaiton',
                    visibility: true,
                    Ignore: false,
                    text: 'P',
                    Lat: coords.latitude,
                    Long: coords.longitude,
                    pMarkerContent: MarkerBubbleContent,
                    eventListener: {
                       "click": [function()
                                   {
                                        InfoBubbles.addBubble(this.pMarkerContent, 
                                            new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));
                                       
                                        var OuterObj = this;
                                       
                                        $('#AddToTrip-positioning').click(function() {
                                            
                                            $(WayPointLI)
                                                .attr('Lat',OuterObj.Lat)
                                                .attr('Long',OuterObj.Long)
                                                .attr('Address','My Position')
                                                .attr('WayPointTitle','My Position')
                                                .appendTo('#sortable')
                                                .find('input').val('My Position').prop('disabled', true).addClass('DisabledWaypoint');
                                            
                                            
                                            OrderNumbersOnWapPoints();
                                            
                                            
                                            ShowDirectionsTab();
                                            HideBubbles();
                                        });
                                        
                                        $('#SetProxCenter-positioning').click(function() {
                                            
                                            AddOval(OuterObj.Lat,OuterObj.Long);
                                            HideBubbles();
                                        });
                                       
                                        Debug("Starting PositionGeoCoder reverseGeocode");
                                        PositionGeoCoder.reverseGeocode(coords);
                                        
                                   }
                               , false, null]
                       }
                }
            );
            
            //PositionMarker = new nokia.maps.map.StandardMarker(coords);
            //PositionAccuracyCircle = new nokia.maps.map.Circle(coords, coords.accuracy);
            //map.objects.addAll([PositionAccuracyCircle, PositionMarker]);
            map.objects.addAll([PositionMarker]);
            
            //map.zoomTo(PositionAccuracyCircle.getBoundingBox(), false, "default");
            map.zoomTo(PositionMarker.getBoundingBox(), false, "default");
            if (map.zoomLevel > 16) map.set("zoomLevel", 16); //zoom out if too close
            
            PositionEnabled = true;
            $('#ShowPositionButton').html('Hide Position').addClass('btn-active');
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            PositionEnabled = false;
            NotifyError("Error Getting Position",errorMsg);
            $('#ShowPositionButton').html('Show Position');
        }
    );
    
}

function GoToHomePosition()
{
    if (CenterLat == undefined && CenterLong == undefined && DefaultZoomLevel == undefined && DefaultMapType == undefined)
    {
        NotifyError("Home Not Set","Please Set Your Home First");
    }
    else
    {
        if (CenterLat != undefined && CenterLong != undefined)
        {
             map.setCenter(new nokia.maps.geo.Coordinate(CenterLat,CenterLong));
        }
        
        if (DefaultZoomLevel != undefined)
        {
            map.setZoomLevel(DefaultZoomLevel);
        }
        
        if (DefaultMapType != undefined)
        {
            map.set("baseMapType", map[DefaultMapType]);
            $('#mapviewtext').html($('.mapview-button[data-baseMapType='+DefaultMapType+']').attr('data-label'));
        }
    }
}


// JavaScript Document
function RemoveProximityCircle()
{
    $('#UpdateProxCircleButton').hide();
    map.objects.remove(ProximityCircle);
} 
        
function UpdateProxCircle()
{
    Debug("Update Proximity Circle");
    AddOval(pc_Lat,pc_Long);
}

function AddOval(Lat,Long)
{

    if (map.objects.getLength() > 10000)
    {
        NotifyError("Error!","Must have less than 10000 markers to use Proximity Circle");
    }
    else
    {

        //Check to see if Proximity Window is Open, if not open it.
        OpenMenuIfOpen('ProximityPopup');
        $('#UpdateProxCircleButton').show();
        //ShowLoadingDialog();
        
        StorePreferredMeasurementType();
        
        if (pc_Added)
        {
            //Remove Current Circle
            map.objects.remove(ProximityCircle);
        }
    
        pc_Lat = Lat;
        pc_Long = Long;
    
        Debug("Set pc_Lat: " + pc_Lat);
        Debug("Set pc_Long: " + pc_Long);
    
        var Radius = parseFloat(document.getElementById("ProximityRadius").value);
        var RadiusInMeters;
       
        Debug("Radius: " + Radius);
        
        //Need to Convert to Meters
        var MesType = document.getElementById("ProximityRadiusMeasurementType").value;
        Debug("Radius is in " + MesType);
        
        if (MesType == "MILES")
        {
            //1 Mile = 1609.344 Meters
            RadiusInMeters = 1609.344 * Radius;
        }
        else if (MesType == "KM")
        {
            //1 Kilometer = 1000 Meters
            RadiusInMeters = 1000 * Radius;
        }
        else if (MesType == "METERS")
        {
            RadiusInMeters = Radius;
        }
        else if (MesType == "YARDS")
        {
            //1 Yard = 0.9144 Meters
             RadiusInMeters = 0.9144 * Radius;
        }
        else if (MesType == "FEET")
        {
            //1 Foot = 0.3048 Meters
            RadiusInMeters = 0.3048 * Radius;
        }
        
        Debug("Radius in Meters: " + RadiusInMeters);
        
        pc_Diameter = RadiusInMeters * 2;
        
        Debug("Diameter: " + pc_Diameter + " meters");
            
        
        //Check to make sure the Enabled Checkbox is Checked
        //This is primarily used when setting a marker as a circle center
        //and when using an address
        if (document.getElementById("ProximityCheckbox").checked == false)
        {
            Debug("Proximity Checkbox was not set");
            document.getElementById("ProximityCheckbox").checked = true;
            DOMNode.addListener("click", ClickToCreateProximityCircle,false);
        }
        
        //ProximityCircle
        
       ProximityCircle = new nokia.maps.map.Circle(
            [parseFloat(Lat), parseFloat(Long)], //place the circle center here
            RadiusInMeters, //radius of 8000 meters
            {
              color: "#823f",
              fillColor: "#2387",
              width: 2
            }
          );
        ProximityCircle.addListener("click", ClickToCreateProximityCircle,false);
        map.objects.add(ProximityCircle);
        pc_Added = true;
        
        ChangeDivStatus("ProximityAddressStatus","");
        ChangeVisibilityWhenCircleIsAdded();
        HideLoadingDialog();
    }
}

function ClickToCreateProximityCircle(event)
{
    ShowLoadingDialog();
    
    if (event.target === map) 
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    else if (event.target == ProximityCircle)
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    
    HideLoadingDialog();
    
}

function ProximityCheckChanged(ElementObj)
{
    //alert("ProximityCheckChanged");
    if (ElementObj.checked)
    {
        Debug("ProximityCheckbox Checked");
        DOMNode.addListener("click", ClickToCreateProximityCircle,false);
    }
    else
    {
        ShowLoadingDialog();
        Debug("ProximityCheckbox UnChecked");
        pc_Added = false;
        DOMNode.removeListener("click", ClickToCreateProximityCircle,false);
        RemoveProximityCircle();
        ChangeVisibilityWhenCircleIsAdded();
    }
}


function CreateProximityAddress()
{
    var Address = document.getElementById("ProximityAddress").value;
    
    if (Address != null && Address != "")
    {
        ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
        
        Address = Address.replace("\n",",");
        
        Debug("Address is " + Address);
        Debug("Address (encodeURI) is " + encodeURI(Address));
        
        ProximityGeoCoder.geocode(Address);
         
    }
    else
   {
        Debug("Address is Blank");
        ChangeDivStatus("ProximityAddressStatus",'<span style="color:red;font-weight:bold;">Address is Blank</span>');
    }

}
        
function ChangeVisibilityWhenCircleIsAdded()
{
    Debug("Proximity Circle Added or Removed");
    
    if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0)
    {
    	if (pc_Added)
        {
            var CenterPoint = new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long));
            var Radius = (pc_Diameter / 2);
        }
    
    	$('#PlottedQueriesContainer .PlottedRowUnit').each(function () {

			var $plottedQuery = $(this);
        	unrenderQuery($plottedQuery, 'Markers', function () {
        		renderQuery($plottedQuery, 'Markers');
        	});
        	
	    });
    }
    else
    {
        HideLoadingDialog();
    }
}

var WayPointLI = '<li class="ui-state-default"><div class="draggable"></div><span id="RowNumber"></span><input type="text" /><a class="button1-white" onclick="RemoveAddressRow(this);" style="float:right;color:#666;margin:-2px 0 0 0;">Remove</a></li>';

function AddMarkerToTrip(pMarker)
{
    Debug("Adding Marker to Trip");
    Debug("Lat: " + pMarker.Lat);
    Debug("Long: " + pMarker.Long);
    Debug("Address: " + pMarker.record.markerAddress);
    Debug("Waypoint Title: " + pMarker.title);
    
    $(WayPointLI)
        .attr('Lat',pMarker.Lat)
        .attr('Long',pMarker.Long)
        .attr('Address',pMarker.record.markerAddress)
        .attr('WayPointTitle',pMarker.title)
        .appendTo('#sortable')
        .find('input').val(pMarker.title).prop('disabled', true).addClass('DisabledWaypoint');
    
    OrderNumbersOnWapPoints();
}

function ShowDirectionsTab()
{
    $('#tabs-nav').tabs( "select" , 1 );
}

function OrderNumbersOnWapPoints()
{
    $.each($( "#sortable" ).children(), function(key, value) { 
        $(this).attr('Index',key).find('#RowNumber').html(key + 1);
    });
}
function AddAddressRow()
{
    $( "#sortable" ).append(WayPointLI);
    OrderNumbersOnWapPoints();
}

function RemoveAddressRow(obj)
{
    $(obj).parent().remove();
    OrderNumbersOnWapPoints();
}

function GetDirections()
{
    ClearDirectionsFromMap();
       
    
    router = new nokia.maps.routing.Manager() //create a route controller
    
    WayPointArray = new Array();
    var GeocodeWayPointArray = new Array();
    HasRoutingErrors = false;
    
    var RequiresGeoCoding = false;
    
    var WPIndex = 0;
    
    $.each($( "#sortable" ).children(), function(key, value) { 
        
        //Does the Attribute Lat Exists?
        if ($(this).attr('Lat') != undefined)
        {
            WayPoint = new Object();
            WayPoint.WayPointTitle = $(this).attr('WayPointTitle');
            WayPoint.Address  = $(this).attr('Address');
            WayPoint.Lat  = $(this).attr('Lat');
            WayPoint.Long  = $(this).attr('Long');
            
            //WayPointArray.push(WayPoint);
            
            WayPointArray[WPIndex] = WayPoint;
            WPIndex++;
        }
        else if ($(this).find('input').val() != "")
        {
            $AddressInput = $(this).find('input');
            
            $AddressInput.removeClass();
            
            Debug("Input Value: " + $AddressInput.val());
            
            RequiresGeoCoding = true;
            
            WayPoint = new Object();
            WayPoint.WayPointTitle = unescape($AddressInput.val());
            WayPoint.Address  = unescape($AddressInput.val());
            WayPoint.Index = WPIndex; //$(this).attr('Index');
            
            //RoutingGeoCodeList.add(WayPoint);
            GeocodeWayPointArray.push(WayPoint);
            WPIndex++;
        }
        else 
        {
            //Remove Element
            $(this).remove();
        }
        
        
    });
    
    if (WPIndex < 2)
    {
    	showError($('#mapdiv'), 'At least 2 points are required for directions');
    }
    else if (RequiresGeoCoding)
    {
    	$.each(GeocodeWayPointArray, function (index, waypoint) {
    		RoutingGeoCodeList.add(waypoint);
    	});
    }
    else
    {
        Debug("Doesn't Require Geocoding");
        ProcessWayPoints();
    }
}

function ClearDirectionsFromMap()
{
    if (mapRoute != null)
    {
        //Remove Map Elements
        map.objects.remove(mapRoute);
        router.clear(); 
    }
    //Clear Directions Text
    $('#DirectionsOutput').empty();
}

function ClearDirections()
{
    if (mapRoute != null)
    {
        map.objects.remove(mapRoute);
        router.clear();
    }
    
    $('#DirectionsOutput').empty();
    $('#DirectionControls').hide();
    
    //Reset Address Elements
    $('#sortable').empty()
    .append(WayPointLI)
    .append(WayPointLI);
    
    OrderNumbersOnWapPoints();
}

function printthis(which) {
                
    var directions = document.getElementById(which).innerHTML;
    
    var newwindow = window.open("","","height=500,width=320,location=0,scrollbars=1");
    directions += '<br><a href="http://www.cloudbilt.com" target="_blank"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
    newwindow.document.write(directions);
    newwindow.focus();
    newwindow.print();
} 

function SendDirectionsEmail()
{
    var EmailAddresses = prompt("Please one or more email addresses separated by ;",UserEmailAddress);
    if (EmailAddresses != null && EmailAddresses != "")
    {        
        var seen = [];
        var LegsArray = [];
        
        for (var LegIndex=0;  LegIndex < RouterResponse[0].legs.length ; LegIndex++)
        {      
            var leg = RouterResponse[0].legs[LegIndex];
            
            var LegObj = new Object();
            LegObj.travelTime = RouterResponse[0].legs[LegIndex].travelTime;
            LegObj.length = RouterResponse[0].legs[LegIndex].length;
                         
            var Maneuvers = leg["maneuvers"];
            var ManeuversArray = [];
                                    
            for (var i = 0 ; i < Maneuvers.length; i++)
            {
                var Maneuver = new Object();
                Maneuver.instruction = Maneuvers[i].instruction;
                ManeuversArray.push(Maneuver);
            }
            
            LegObj.maneuvers = ManeuversArray;            
            LegsArray.push(LegObj);
        }
        
        var RouteObj = new Object();
        RouteObj.legs = LegsArray;
        
        //http://stackoverflow.com/questions/9382167/serializing-object-that-contains-cyclic-object-value 
          
        var MyJSObject = {
                action: 'email_directions',
                replyTo: UserEmailAddress,
                subject: 'Map Anything Directions',
                toAddresses: EmailAddresses.split(";"),
                WayPoints: WayPointArray,
                RouterResponse: RouteObj,
                htmlBody: $('#DirectionsOutput').clone().wrap('<div/>').parent().html()              
        };
        
        $.ajax({
            url: 'MAEmailAJAXResources',
            type: 'POST',
            dataType: 'JSON',
            data: { MyJSObject: JSON.stringify(MyJSObject) },
            complete: function (response)
            {
                var obj = $.parseJSON(response.responseText);                      
                
                if(obj.success)
                {
                	showSuccess($('#mapdiv').parent(), 'Your directions have been sent');
                }
                else
                {
                    NotifyError("Error Sending Directions Email",obj.error);
                    Debug("Error Sending Directions Email " + obj.error);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) { 
                Debug("<b>Error Sending Directions Email</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Sending Directions Email",textStatus + " : " + errorThrown); 
            }
        }); 
    }
}

function SetDefaultMapLocation()
{
    Debug("SetDefaultMapLocation");
    DisplayPropertiesOfObject(map);
    Debug("basemaptype " + map.baseMapType.label);
    
    $.getJSON("/apex/MAUserAJAXResources","action=set_default_map_location&id=" + UserId + "&zoomlvl=" + map.zoomLevel + "&lat=" + map.center.latitude + "&long=" + map.center.longitude + "&type=" + map.baseMapType.label,function(json)
    { 
        if(json.success)
        {
            CenterLat = map.center.latitude;
            CenterLong = map.center.longitude;
            DefaultZoomLevel = map.zoomLevel;
            DefaultMapType = map.baseMapType.label.toUpperCase() == 'HYBRID' ? 'SATELLITE' : map.baseMapType.label.toUpperCase() == 'MAP' ? 'NORMAL' : map.baseMapType.label.toUpperCase();
    
            Debug("Default Location Saved");
            growlSuccess($('#growl-wrapper'), 'Default Location Saved');
        }
        else
        {
            NotifyError("Error Updating Default Location",json.error);
            Debug("Error Updating Default Location " + json.error);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) {        
        Debug("<b>Error Updating Default Location</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Updating Default Location",textStatus + " : " + errorThrown); 
    });
}       
        
function StorePreferredMeasurementType()
{
    if (OnUserLoadEventCompletd)
    {
        $.getJSON("/apex/MAUserAJAXResources","action=store_pref_measure_type&id=" + UserId + "&preftype=" + document.getElementById("ProximityRadiusMeasurementType").value + "&proxrad=" + document.getElementById("ProximityRadius").value,function(json)
        { 
            if(json.success)
            {
                Debug("Updated Preferred Unit of Measurement " + json.id);
            }
            else
            {
                NotifyError("Error Updating Preferred Unit of Measurement:",json.error);
                Debug("Error Updating Preferred Unit of Measurement: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Preferred Unit of Measurement</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Preferred Unit of Measurement",textStatus + " : " + errorThrown); 
        });
    }
}

function ToggleTrafficOverlay()
{
    
    if ($('#ShowTrafficButton').html() == "Show Traffic")
    {
        $('#ShowTrafficButton').html("Hide Traffic").addClass('btn-active');
        map.overlays.add(map.TRAFFIC);
        map.overlays.add(map.TRAFFIC_INCIDENTS);
    }
    else
    {
        $('#ShowTrafficButton').html("Show Traffic").removeClass('btn-active');
        map.overlays.remove(map.TRAFFIC_INCIDENTS);
        map.overlays.remove(map.TRAFFIC);
    }
}

function NotifyError(pTitle,pMessage)
{
    $("#container").notify("create", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: false,
            speed: 100
        }
    );
}

function NotifyWarrning(pTitle,pMessage)
{
    $("#container").notify("create", "Warning-Template", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: 5000,
            speed: 1000
        }
    );
}

function GetAddressFieldResults(record, FieldName)
{
    var rValue = "";
    
    if (FieldName != null)
    {
        //Debug("GetAddressFieldResults - FieldName: " + FieldName);
        //Debug("GetAddressFieldResults - record: " + record);
        
        if (FieldName.indexOf(".") > -1)
        {
            if (record[FieldName.split(".")[0]] != null)
            {
                rValue = (record[FieldName.split(".")[0]][FieldName.split(".")[1]]) ? record[FieldName.split(".")[0]][FieldName.split(".")[1]] : "";
            }
        }
        else
        {
            rValue  = (record[FieldName]) ? record[FieldName] : "";
        }
    }
    
    return rValue;  
}

function GetFieldLabel(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.label;
        }
    }
    return "";
}

function GetFieldType(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.type;
        }
    }
    return "";
}

function GetFieldReferenceTo(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.relationshipName == FieldName)
        {
            return field.referenceTo;
        }
    }
    return "";
}

function GetRelationshipName(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.relationshipName;
        }
    }
    return "";
}

function unique(arrayName)
{
    //Return Unique Array
    var ReturnArray = new Array();
    $.each(arrayName, 
        function(index, value) 
        { 
            if ($.inArray(value, ReturnArray) < 0)
            {
                ReturnArray.push(value);
            } 
        }
    );
    
    return ReturnArray;
}
        
////////////////////  Format Tooltip Types  /////////////////////////////////////
sforce.internal.stringToDateTime = function(source) {
    var bc = false;
    if (source === null || source.length === 0) {
        throw "Unable to parse dateTime1";
    }

    if (source.charAt(0) == '+') {
        source = source.substring(1);
    }
    if (source.charAt(0) == '-') {
        source = source.substring(1);
        bc = true;
    }

    if (source.length < 19) {
        throw ("Unable to parse dateTime2");
    }

    if (source.charAt(4) != '-' || source.charAt(7) != '-' ||
        source.charAt(10) != 'T') {
        throw ("Unable to parse dateTime3");
    }

    if (source.charAt(13) != ':' || source.charAt(16) != ':') {
        throw ("Unable to parse dateTime4");
    }

    var year = source.substring(0, 4);
    var month = source.substring(5, 7);
    var day = source.substring(8, 10);
    var hour = source.substring(11, 13);
    var min = source.substring(14, 16);
    var sec = source.substring(17, 19);

    var date = new Date(year, month-1, day, hour, min, sec);

    var pos = 19;

    // parse optional milliseconds
    if (pos < source.length && source.charAt(pos) == '.') {
        var milliseconds = 0;
        var start = ++pos;
        while (pos < source.length && sforce.internal.isDigit(source.charAt(pos))) {
            pos++;
        }
        var decimal = source.substring(start, pos);
        if (decimal.length == 3) {
            milliseconds = decimal;
        } else if (decimal.length < 3) {
            milliseconds = (decimal + "000").substring(0, 3);
        } else {
            milliseconds = decimal.substring(0, 3);
            if (decimal.charAt(3) >= '5') {
                ++milliseconds;
            }
        }

        date.setMilliseconds(milliseconds);
    }

    var offset = date.getTimezoneOffset() * 60000;
    //offset in milli;

    // parse optional timezone
    if (pos + 4 < source.length &&
    (source.charAt(pos) == '+' || (source.charAt(pos) == '-'))) {
        
        var hours = (source.charAt(pos + 1) - '0') * 10 + source.charAt(pos + 2) - '0';
        var mins = 0;
        if(source.charAt(pos + 3) == ':' )
        {
            mins = (source.charAt(pos + 4) - '0') * 10 + source.charAt(pos + 5) - '0';
            pos += 6;
        }       
        else
        {
            mins = (source.charAt(pos + 3) - '0') * 10 + source.charAt(pos + 4) - '0';
            pos += 5;
        }
        var mseconds = (hours * 60 + mins) * 60 * 1000;

        // subtract milliseconds from current date to obtain GMT
        if (source.charAt(pos) == '+') {
            mseconds = -mseconds;
        }

        date = new Date(date.getTime() - offset + mseconds);        
    }

    if (pos < source.length && source.charAt(pos) == 'Z') {
        pos++;
        date = new Date(date.getTime() - offset);
    }

    if (pos < source.length) {
        throw ("Unable to parse dateTime " + pos + " " + source.length);
    }

    return date;
};

function FormatsObjectValue(v, type, RefId)
{
    if(v == null) v = "";
    if(v != "")
    {
        type = type.toLowerCase();
        if(type == "boolean")
        {
            v = (!v) ? "FALSE" : "TRUE";
        }
        else if(type == "double")
        {
            v = isNaN(v) || v === '' || v === null ? 0 : v;
            
            //var n = v < 0 ? true : false;
            var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                        
            if(parseFloat(a[1]) > 0)
            {
                v = (b + "." + a[1]); 
            }
            else
            {
                v = b; 
            }           
        }
        else if(type == "currency")
        {
            v = isNaN(v) || v === '' || v === null ? 0.00 : v;
            
            //var n = v < 0 ? true : false;
            var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
            
            v = ("$" + b + "." + a[1]);
            
            
            /*
            v = parseFloat(v).toFixed(2);
            
            for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
                if(v.indexOf('.') == v.length - (4 * i + 3))
                {
                    v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
                }
                else
                {
                    v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
                }
            }
            v = "$" + v;
            */
        }
        else if(type == "date")
        {
            /*
            var year = v.substring(0, 4);
            var month = v.substring(5, 7);
            var day = v.substring(8, 10);
            var hrs = v.substring(11, 13);
            var mins = v.substring(14, 16);
            var sec = v.substring(17, 19);
            var d = new Date(year, month, day, hrs, mins, sec);
            d = d.toLocaleDateString();
            v = d;
            */
            v = sforce.internal.stringToDate(v).toLocaleDateString();
        }
        else if(type == "datetime")
        {
            v = sforce.internal.stringToDateTime(v);
            v = v.toLocaleDateString() + " " + v.toLocaleTimeString();
            
            /*
            var year = v.substring(0, 4);
            var month = v.substring(5, 7);
            var day = v.substring(8, 10);
            var hrs = v.substring(11, 13);
            var mins = v.substring(14, 16);
            var sec = v.substring(17, 19);
            var d = new Date(year, month, day, hrs, mins, sec);
            d = d.toLocaleDateString().toLocaleDateString();
            v = d;
            */
        }
        else if (type == "percent")
        {
            v = (v != "") ? v + "%" : "";
        }
        else if (type == "url")
        {
            if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
            {
                v = '<a href="' + v + '" target=_blank>' + v + "</a>";
            }
            else
            {
                v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
            }
        }
        else if(type == "reference")
        {
            v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
        }
        else if (type == "textarea")
        {
        	v = v.replace(/\n/g, '<br />');
        }
        /*
        else
        {
            v = type;
        }
        */
    }
    
    return v;
}

function launchQueryEditor(url)
{
    //scroll to top
    $("html, body").animate({ scrollTop: 0 }, "slow");
    
    //launch editor
    var $dialog = $('#queryeditor-modal');
    $dialog.find('.query-editor-modal-loader').show();
    $dialog.find('.query-editor-modal-content').hide().html('').load(url, function () {
        $dialog.dialog('widget').fadeOut(200, function () {
            $dialog.find('.query-editor-modal-loader').hide(); 
            $dialog.find('.query-editor-modal-content').show();
            $dialog.dialog('widget').fadeIn(200);
            $('#queryeditor-modal').dialog('widget').css({
                left: ($(window).width()/2) - 400,//($('#queryeditor-modal').width()/2),
                top: '30px'
            });
        });
    });
    $dialog.dialog({resizable: false}).css('min-height', '0').dialog('widget').css({
        'width': 'auto',
        'top': '30px'
    });

    //add the fade layer
    $('body').append('<div id="fade"></div>');
    $('#fade').css({
        'filter' : 'alpha(opacity=80)', 
        'z-index': '1000'
    }).fadeIn();
}

function CreatePopupWindow(popID,popWidth,noBackground)
{
    //Fade in the Popup and add close button
    $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) });
    
    //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
    //var popMargTop = ($('#' + popID).height() + 100) / 2;
    var popMargTop = 50;
    var popMargLeft = ($('#' + popID).width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#' + popID).css({ 
        'top' : popMargTop,
        'margin-left' : -popMargLeft
    });
    
    //Fade in Background
    if (typeof noBackground == 'undefined') {
        $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
        $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer
    } 
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ClosePopupWindow()
{
    $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
}

function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug(GenDash(LevelsDeep) + '<b>' + key + '</b>: ' + obj[key]);
        
        if (typeof(obj[key]) == "object")
        {
            //DisplayPropertiesOfObject(obj[key],LevelsDeep+1);
        } 
    }
}
        
function GenDash(LevelsDeep)
{
    if (LevelsDeep == 0)
        return '';
    else if (LevelsDeep == 1)
        return "-";
    else if (LevelsDeep == 2)
        return "--";
    else if (LevelsDeep == 3)
        return "---";
    else if (LevelsDeep == 4)
        return "----";
    else if (LevelsDeep == 5)
        return "-----";
    else if (LevelsDeep == 6)
        return "------";
    else if (LevelsDeep == 7)
        return "-------";
    else
        return "--------";
}

function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function ClearDebugWindow()
{
    $('#DebugOut').html("<b>Log Cleared</b>");
}

function ShowSavedQryPopup()
{

    $('#tabs-SavedQry').tabs({remote:true}); 
    jscolor.init();
    
    $('#LoadingPopup').fadeOut();
    
    $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
    $('#fade').css({'filter' : 'alpha(opacity=80)'}); //Fade in the fade layer 
    
    $('#SavedQueryPopup').fadeIn().css({ 'width': Number( 700 ) });
    

    var popMargLeft = ($('#SavedQueryPopup').width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#SavedQueryPopup').css({ 
        'margin-left' : -popMargLeft,
        'max-height': '550px'
    });
    
    //$('#SavedQueryPopup').css("top", (($(window).height() - $('#SavedQueryPopup').outerHeight()) / 2) + $(window).scrollTop() + "px");
    $('#SavedQueryPopup').css("top", "150px");
}

function MoveMapComponentsRight()
{
    /*
    ZoomBar.node.style.marginLeft           = "310px";
    ZoomRectangle.node.style.marginLeft     = "239px";
    ViewControl.node.style.marginLeft       = "310px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "50px";
    */
}

function MoveMapComponentsLeft()
{    
    /*
    ZoomBar.node.style.marginLeft           = "5px";
    ZoomRectangle.node.style.marginLeft     = "-67px";
    ViewControl.node.style.marginLeft       = "5px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "-250px";
    */
}

function OpenMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":hidden"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function CloseMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":visible"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function DisplayMapViewPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapToolsPopup');

    $('#MapViewPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function DisplayMapToolsPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#MapToolsPopup').slideToggle('normal', function() {
        // Animation complete.
    });  
}

function DisplayProximityPopup()
{
    CloseMenuIfOpen('MapToolsPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#ProximityPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function PreparePickListEntry(str)
{
    return str.replace(/\s/g,"");
}

function ChangeDivStatus(DivId,str)
{
    document.getElementById(DivId).innerHTML = str;
}

function ShowLoadingDialog()
{
    Debug("ShowLoadingDialog");
}

function HideLoadingDialog()
{
    $('#modalPage123').hide();
}

function ZoomToFit()
{ 
    //loop through the plotted queries to see if they are all heat maps
    var allHeatMaps = true;
    $('#PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.on').each(function () {
        if ($(this).attr('data-renderAs') != 'Heatmap') {
            allHeatMaps = false;
            return false;
        }
    });
    
    //if we only have heat maps, zoom out to country level
    if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0 && allHeatMaps) {
        map.setZoomLevel(5);
    }
    else {
        map.zoomTo(map.getBoundingBox(),false,"default");
    }
}

function HideBubbles()
{
    for (var i = 0; InfoBubbles.openBubbleHandles.getLength(); i++)
    {
        InfoBubbles.removeBubble(InfoBubbles.openBubbleHandles.get(0));
    }
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ShowAddressNotFoundPopup()
{
    CreatePopupWindow("AddressNotFoundPopup",600);
}

function SlideToTree()
{
    slider1.goToFirstSlide();
    $('#TreeTab').removeClass('TreeTab-Inactive'); 
    $('#TreeTab').addClass('TreeTab-Active');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Active'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToPlottedQueries()
{
    slider1.goToSlide(1);
    $('#TreeTab').removeClass('TreeTab-Active'); 
    $('#TreeTab').addClass('TreeTab-Inactive');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Active');
}

//DirectionsInputTab
function SlideToLocations()
{
    slider2.goToFirstSlide();
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsInputTab').addClass('TreeTab-Active'); 
}

//DirectionsOutputTab
function SlideToDirectionsOutput()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab,#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Active');
}

//DirectionsOptionsTab
function SlideToDirectionsOptions()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsOptionsTab').addClass('TreeTab-Active'); 
}

function MakeActiveSliderTab(id)
{
    $('#' + id).removeClass('PlottedQueriesTab-Inactive'); 
    $('#' + id).addClass('PlottedQueriesTab-Active');
}

function MakeInactiveSliderTab(id)
{
    $('#' + id).removeClass('TreeTab-Active'); 
    $('#' + id).addClass('TreeTab-Inactive');
}

function CloseDebugWindow()
{
    ClosePopupWindow();
}

function FormatAddressFromNokiaObj(NokiaAddressObj)
{
    var street = NokiaAddressObj.street;
    var city = NokiaAddressObj.city;
    var state = NokiaAddressObj.state;
    var country = NokiaAddressObj.country;
    var county = NokiaAddressObj.county ;
    var district = NokiaAddressObj.district;
    var postalcode = NokiaAddressObj.postalCode;
    var suite = NokiaAddressObj.suite;
    var FloorNumber = NokiaAddressObj.floor;
    var houseNumber = NokiaAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}

function FormateAddressFromJSAPIAddressObj(JSAPIAddressObj)
{
    var street = JSAPIAddressObj.street;
    var city = JSAPIAddressObj.city;
    var state = JSAPIAddressObj.state;
    var country = JSAPIAddressObj.country;
    var county = JSAPIAddressObj.county ;
    var district = JSAPIAddressObj.district;
    var postalcode = JSAPIAddressObj.postalCode;
    var suite = JSAPIAddressObj.suite;
    var FloorNumber = JSAPIAddressObj.floor;
    var houseNumber = JSAPIAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}


function EmailDebugLog()
{
    var DebugLogComments = prompt("Comments:","");
    var EmailDebugLogArray = new Array();
    EmailDebugLogArray.push('bbrantly@cloudbilt.com');
    EmailDebugLogArray.push('dkraun@cloudbilt.com');
    
    var MyJSObject = {
            action: 'email_debug_log',
            replyTo: UserEmailAddress,
            subject: 'Map Anything Debug Log',
            htmlBody: '<b>Comments: </b>' + DebugLogComments + '<br /><br />' + $('#DebugOut').html(),
            toAddresses: EmailDebugLogArray
    };
    
    $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                showSuccess($('#mapdiv').parent(), 'Debug Log Sent');
            }
            else
            {
                NotifyError("Error Sending Debug Log Email",obj.error);
                Debug("Error Sending Debug Log Email " + obj.error);
            }
        }
    });
}

function EnableDisableZoombox()
{
    //Check if DIV with class dragzoomlayer exists
    if ($('.dragzoomlayer').length > 0)
    {
        //Remove DIV
        $('#ZoomBoxButton').html('Enable Zoombox').removeClass('btn-active');
        $('.dragzoomlayer').remove();
    }
    else
    {
        //Add DIV
        $('#ZoomBoxButton').html('Disable Zoombox').addClass('btn-active');
        $('#mapdiv').prepend('<div class="dragzoomlayer"></div>');
        
        //handle dragging across the zoom layer
        $('.dragzoomlayer')
        .drag("start",function( ev, dd ){
    		//return a proxy for this drag
            return $("<div class='dragzoomproxy'></div>").appendTo(document.body);
        })
        .drag(function( ev, dd ){
        	//place the proxy in the correct location with the correct dimensions
        	$( dd.proxy ).css({
             top: Math.min( ev.pageY, dd.startY ),
             left: Math.min( ev.pageX, dd.startX ),
             height: Math.abs( ev.pageY - dd.startY ),
             width: Math.abs( ev.pageX - dd.startX )
            });
        })
        .drag("end",function( ev, dd ){
        	//remove the proxy
        	$( dd.proxy ).remove();
                
            //get the proper offsets    
           	var offset = $('#mapdiv').offset();
            var StartX = dd.startX - offset.left;
            var StartY = dd.startY - offset.top;
            var PageX = ev.pageX - offset.left;
            var PageY = ev.pageY - offset.top;
            
            //figure out the topleft and bottomright corners of our box
            var pointValues = [StartX + StartY, PageX + PageY, StartX + PageY, PageX + StartY];
            var pointValueToGeoMap = {};
            pointValueToGeoMap[StartX + StartY] = map.pixelToGeo(StartX + StartY);
            pointValueToGeoMap[PageX + PageY] = map.pixelToGeo(PageX + PageY);
            pointValueToGeoMap[StartX + PageY] = map.pixelToGeo(StartX + PageY);
            pointValueToGeoMap[PageX + StartY] = map.pixelToGeo(PageX + StartY);
            var TopLeft = pointValueToGeoMap[Math.min.apply(null, pointValues)];
          	var BottomRight = pointValueToGeoMap[Math.max.apply(null, pointValues)];
            
            //figure out the center point of our box
            var DeltaX = dd.deltaX;
            var DeltaY = dd.deltaY;
            var coord = map.pixelToGeo(StartX + Math.floor(DeltaX / 2), StartY + Math.floor(DeltaY / 2));
          	
			//create a bounding box based on the corners and zoom the map to it
            var boundingBox = new nokia.maps.geo.BoundingBox(TopLeft, BottomRight);
            map.setZoomLevel(map.getBestZoomLevel([boundingBox]));
            map.setCenter(coord);
        });
    }
}

function queryEditorClose ()
{
    //$.colorbox.close();
    $('#queryeditor-modal').dialog('destroy');
    $('#fade').fadeOut(function() {
        $('#fade').remove();  
    });
}
function queryEditorSaveComplete (queryId, baseObjectLabel, query)
{
    if (query.id)
    {
        //this was an edit
        DoOnCompleteEditSavedQry(query.name, queryId, query.colorAssignmentType);
    }
    else
    {
        //this was new
        DoOnCompleteNewForSavedQry(
            query.name, 
            queryId,
            baseObjectLabel,
            query.folderId, 
            query.folderType.indexOf('Personal') == -1 ? 'CorporateSavedQuery' : 'PersonalSavedQuery', 
            "false", 
            query.colorAssignmentType == 'Static' ? 'Standard' : 'Legend',
            query.colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery'
        );
    }
    
    //update the icon color
    try
    {
        updateIcon($("#SQTree #"+queryId).attr('IconColor', query.iconColor));
    }
    catch (err) { }
    
    queryEditorClose();
}

//helper method for extracting nested objects using a dot notation field name
function extractValue(obj, field)
{
	try {
		var fieldParts = field.split('.');
		var currentObj = obj;
		for (var i = 0; i < fieldParts.length; i++)
		{
			currentObj = currentObj[fieldParts[i]];
		}
		return currentObj || '';
	}
	catch (err) { }
	
	return '';
}
    
</script>
</apex:component>