<apex:page sidebar="false" controller="sma.MapAnythingLegacy" title="MapAnything" action="{!StartUpAction}">

    <!--<apex:includeScript value="{!$Resource.jquery17}"/> -->

    <!--<apex:includeScript value="{!URLFOR($Resource.MapAnything, 'jstree/_lib/jquery.js')}"/> -->
    
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery-1.7.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jstree/_lib/jquery.cookie.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jstree/_lib/jquery.hotkeys.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jstree/jquery.jstree2.js')}"/>

    
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jscolor/jscolor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'notify/jquery.notify.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jquery/jquery-ui.min.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery.event.drag-2.2.js')}"/>
    
    <!--<script src="https://nokia.maps.lbsp.navteq.com/v1/jsl.js" type="text/javascript" charset="utf-8"></script>-->
    <script type="text/javascript" charset="UTF-8" src="https://api.maps.nlp.nokia.com/2.2.3/jsl.js?with=all"></script>
    
    
    
    <apex:includeScript value="../../soap/ajax/18.0/connection.js"/>
    <apex:includeScript value="/soap/ajax/18.0/apex.js"/>
    <apex:includeScript value="/static/013008/js/functions.js"/>
    
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'notify/ui.notify.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'jquery/jquery-ui.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'style.css')}"/>
    
    <!-- Colorbox (overlay) -->
    <script type="text/javascript" src="{!URLFOR($Resource.MapAnything, 'colorbox/jquery.colorbox-min.js')}"></script>
    <link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.MapAnything, 'colorbox/css4/colorbox.css')}" />
        
    <!-- <apex:includeScript value="{!URLFOR($Resource.MapAnything, 'v2/js/Primary.js')}"/> -->
    <!-- <apex:includeScript value="{!URLFOR($Resource.MapAnything, 'v2/js/SavedQueryTree.js')}"/>  -->
    <!-- <apex:includeScript value="{!URLFOR($Resource.MapAnything, 'v2/js/Utilities.js')}"/> -->
    
    <!-- Date JS--> 
    <script src="{!URLFOR($Resource.QueryEditor, 'js/date.js')}" type="text/javascript"></script>

    <!-- <apex:includeScript value="{!URLFOR($Resource.MapAnything, 'js/SavedQueryTree.js')}"/> -->    
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery.bxSlider.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'js/jquery.hotkeys.js')}"/>
    
    <style>
        
        
        .dragzoomproxy
        {
            position: absolute;
            z-index: 100;
            
            background-color: #666666;
            border: 3px solid #000000;
            opacity: 0.44;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 44);
            filter: alpha(opacity = 44);
        }
        
        /**************** INFO BUBBLE NOKIA ****************/       
        .nm_contentBG 
        {
            background-color: #FFFFFF;
            border-radius: 0.4em 0.4em 0.4em 0.4em;
        }
        
        .nm_bubble_controls 
        {            
            z-index:5;
        }
        
        .nm_bubble_controls a:hover
        {
            border:0px;
            text-decoration: none;
        }
        
        .nm_bubble_controls a
        {
            color:black;
        }
        
        .nm_bubble_content
        {
            left:1.75px;
            top:1.5px;
            position:relative; 
            color:black;
            background:white;
            min-width:400px;
            max-width:500px;
            padding:.25em;
            margin-right:1.25em;
            margin-left:.5em;
        }
                
        .nm_bubble_content a, .nm_bubble_content a:visited
        {
            color:#555555;
        }
               
        .nm_infoBubble .nm_bubble_bg
        {            
            border:2px solid black;
        }
        
        /*************************************************/        
        #SQTree li a 
        {
            font-size:11px !important; 
        }
        
        #SQTree .jstree-star
        {
            padding-right:20px !important;
            background:url('{!URLFOR($Resource.MapAnything, 'images/star_full.png')}') right top no-repeat !important;
        }
        
        
        div#bubble-tabs
        {
            min-width:435px;
        }
        
        .SQLegendDiv
        {
            background:none repeat scroll 0 0 #EEEEEE;
            border:1px solid #DDDDDD;
            border-radius:2px 2px 2px 2px;
            box-shadow:none;
            font-size:12px;
            min-height:25px;
            margin-bottom: 10px;
        }
        .SQLegendDiv h1
        {
            cursor:pointer;
            padding-left:10px;
            font-size: 14px;
            
        }

        .MapDimTd
        {
            font-family:"Helvetica Neue", Helvetica, arial, sans-serif;
            font-size: 10px;
            font-weight:normal;
            line-height:auto;
            color: #555;
        }
        
        .noSidebarCell, .sidebarCell .fixed {
            display: block;
            float: left;
            padding: 10px 0 6px 5px;
            position: relative;
            width:99%;
        }
        
        /* Tooltip */
        #tooltip-content .name {
            margin: 0 0 5px 0;
            padding: 0 0 0 10px;
        }
        #tooltip-content .name a {
            font-family: helvetica,arial,sans-serif;
            font-size: 12px;
            color: black;
            font-weight: bold;
            text-decoration: none;
            white-space: normal;
        }
        #tooltip-content .address {
            margin: 0 0 5px 0;
            padding: 0 0 0 10px;
            font-family: helvetica,arial,sans-serif;
            font-size: 11px;
            font-weight: normal;
            text-decoration: none;
            color: #006DB4;
            white-space: normal;
        }

        /* Tooltip Tabs */
        #tooltip-content .tabs
        {
            background: none;
            border: none;
        }
        #tooltip-content .tabs > ul
        {
            width: auto;
            padding: 0 8px;
            background: none;
            border: none;
            border-bottom: 1px solid #CCC;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        #tooltip-content .tabs > ul li
        {
            background-color: #006DB4;
            background: #006DB4;
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#197BBB), to(#0059A0));
            background: -webkit-linear-gradient(top, #197BBB, #0059A0);
            background: -moz-linear-gradient(center top , #197BBB 20%, #0059A0 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #197BBB, #0059A0);
            background: -o-linear-gradient(top, #197BBB, #0059A0);
            border: medium none;
            border-radius: 3px 3px 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
        }
        #tooltip-content .tabs > ul li.ui-tabs-selected
        {
            background: none;
            border: 1px solid #CCC;
            border-top-right-radius: 3px;
            border-top-left-radius: 3px;
            background: white;
            color: #222;
        }
        #tooltip-content .tabs > ul li a
        {
            color: #ffffff;
            font-size: 10px;
        }
        #tooltip-content .tabs > ul li.ui-tabs-selected a
        {
            color: #2265BB;
        }
        #tooltip-content .tabs > .ui-tabs-panel
        {
            padding: 10px;
            max-height: 300px;
            overflow-x: hidden;
            overflow-y: auto;
        }
        
        /* Tooltip Chatter */
        #tooltip-content .tabs > div.loading {
            background: transparent url('{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}') no-repeat center;
        }

        /* Buttons */
        .MAToolBar a.btn {
            vertical-align: top;
            display: inline-block;
            position: relative;
            font-family: "Helvetica Neue", Helvetica, arial, sans-serif;
            font-size: 10px;
            font-weight: normal;
            line-height: auto;
            margin: 0 10px 0 0;
            padding: 4px 9px;
            height: auto;
            width: auto;
            cursor: pointer;
            background-repeat: repeat-x;
            border: medium none;
            border-radius: 3px 3px 3px 3px;
            border: 1px solid #BBB;
        }
        .MAToolBar a.btn:hover {
            text-decoration:none;
        }
        a.btn.lightgray {
            background-color: #E6E6E6;
            background: #E3E3E3;
            background: url('images/gray-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#F2F2F2), to(#E6E6E6));
            background: -webkit-linear-gradient(top, #F2F2F2, #E6E6E6);
            background: -moz-linear-gradient(center top , #F2F2F2 20%, #E6E6E6 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #F2F2F2, #E6E6E6);
            background: -o-linear-gradient(top, #F2F2F2, #E6E6E6);
            box-shadow: 0 1px 0 white inset, 0 0 4px rgba(255, 255, 255, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
            color: #4D4D4D;
        }
        a.btn.lightgray:hover {
            background:#ededed;
            box-shadow:0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.2);
            color:#4d4d4d;
        }
        a.btn.lightgray.btn-active {
            background-color: #E6E6E6;
            background: #E3E3E3;
            background: url('images/gray-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFFFFF), to(#000000));
            background: -webkit-linear-gradient(top, #FFFFFF, #000000);
            background: -moz-linear-gradient(center top , #FFFFFF 20%, #000000 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #FFFFFF, #000000);
            background: -o-linear-gradient(top, #FFFFFF, #000000);
            box-shadow: 0 1px 0 white inset, 0 0 4px rgba(255, 255, 255, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
            color: #FFFFFF;
        }
        a.btn.lightgray.btn-active:hover {
            background-color: #E6E6E6;
            background: #E3E3E3;
            background: url('images/gray-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FFFFFF), to(#000000));
            background: -webkit-linear-gradient(top, #FFFFFF, #000000);
            background: -moz-linear-gradient(center top , #FFFFFF 20%, #000000 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #FFFFFF, #000000);
            background: -o-linear-gradient(top, #FFFFFF, #000000);
            box-shadow: 0 1px 0 white inset, 0 0 4px rgba(255, 255, 255, 0.3) inset, 0 1px 2px rgba(0, 0, 0, 0.2);
            color: #FFFFFF;
        }
        a.btn.white {
            position: relative;
            display: inline-block;
            background-color: whiteSmoke;
            background: #F8F8F8;
            background: url('images/white-button-bg.png');
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), to(whiteSmoke));
            background: -webkit-linear-gradient(top, white, whiteSmoke);
            background: -moz-linear-gradient(center top , white 20%, whiteSmoke 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, white, whiteSmoke);
            background: -o-linear-gradient(top, white, whiteSmoke);
            box-shadow: 0 1px 0 white inset, 0 0 4px rgba(255, 255, 255, 0.5) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
            color: #555;
            padding: 4px 25px 4px 4px;
        }
        a.btn.white:hover {
            background:#ededed;
            box-shadow:0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.2);
            color:#4d4d4d;
            text-decoration:none;
        }
        a.btn.white .btn-dropdown-arrow-blue {
            background: url("{!URLFOR($Resource.MapAnything, 'images/dropdown_arrow_blue2.png')}") no-repeat scroll 1px 3px transparent;
            border-radius: 3px 3px 3px 3px;
            display: block;
            height: 5px;
            margin: 0 0 0 5px;
            padding: 3px 1px;
            position: absolute;
            top: 5px;
            right: 5px;
            width: 9px;
        }
        div.btn-divider {
            display: inline-block;
            position: relative;
            width: 1px;
            height: 24px;
            border-right: 1px solid blue;
            padding: 0;
            margin: 0 15px 0 5px;
        }

        /* Zoom Bar */
        .tools-zoom
        {
            position: absolute;
            right: 10px;
            top: 50%;
        }
        .zoom-toggle
        {
            width: 16px;
            -moz-border-radius: 4px;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            -moz-box-shadow: 0px 0px 4px #000000;
            -webkit-box-shadow: 0px 0px 4px #000000;
            box-shadow: 0px 0px 4px #000000;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ebebeb', endColorstr = '#b8b3b2');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ebebeb', endColorstr = '#b8b3b2')";
            background-image: -moz-linear-gradient(top, #ebebeb, #b8b3b2);
            background-image: -ms-linear-gradient(top, #ebebeb, #b8b3b2);
            background-image: -o-linear-gradient(top, #ebebeb, #b8b3b2);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#ebebeb), to(#b8b3b2));
            background-image: -webkit-linear-gradient(top, #ebebeb, #b8b3b2);
            background-image: linear-gradient(top, #ebebeb, #b8b3b2);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
            position: relative;
            z-index: 4;
        }
        .zoom-toggle-plus, .zoom-toggle-minus
        {
            height: 20px;
            cursor: pointer;
            position: relative;
        }
        .zoom-toggle-plus-icon
        {
            background: transparent url("{!URLFOR($Resource.MapAnything, 'images/mapsprites.png')}") -195px 0px;
            width: 8px;
            height: 8px;
            position: absolute;
            top: 2px;
            left: 4px;
        }
        .zoom-toggle-plus:hover .zoom-toggle-plus-icon
        {
            background-position: -195px -8px;
        }
        .zoom-toggle-minus-icon
        {
            background: transparent url("{!URLFOR($Resource.MapAnything, 'images/mapsprites.png')}") -195px -27px;
            width: 8px;
            height: 2px;
            position: absolute;
            bottom: 4px;
            left: 4px;      
        }
        .zoom-toggle-minus:hover .zoom-toggle-minus-icon
        {
            background-position: -195px -35px;
        }
        .zoom-bar-wrapper
        {
            position: absolute;
            z-index: 1;
            top: -200px;
            left: -82px;
            height: 240px;
            width: 100px;
            display: none;
        }
        .zoom-bar
        {
            width: 20px;
            height: 200px;
            padding-top: 4px;
            padding-bottom: 40px;
            -moz-border-radius: 4px;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#000000', endColorstr = '#082423');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#000000', endColorstr = '#082423')";
            background-image: -moz-linear-gradient(top, #000000, #082423);
            background-image: -ms-linear-gradient(top, #000000, #082423);
            background-image: -o-linear-gradient(top, #000000, #082423);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#000000), to(#082423));
            background-image: -webkit-linear-gradient(top, #000000, #082423);
            background-image: linear-gradient(top, #000000, #082423);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
            opacity: 0.92;
            position: absolute;
            z-index: 3;
            right: 0;
        }
        .zoom-bar .zoom-bar-level
        {
            height: 0;
            width: 8px;
            border-top: 1px solid white;
            margin-top: 10px;
            position: relative;
            left: 6px;
        }
        .zoom-bar-slider
        {
            height: 180px;
            background: transparent;
            border: none;
            position: absolute;
            left: 2px;
        }
        .zoom-bar-slider .ui-slider-range
        {
            background: transparent;
            border: none;
        }
        .zoom-bar-slider .ui-slider-handle
        {
            width: 10px;
            height: 10px;
            z-index: 5;
            left: 2px;
            cursor: pointer;
            -moz-border-radius: 99px;
            -webkit-border-radius: 99px;
            border-radius: 99px;
            -moz-box-shadow: 0px 0px 4px #000000;
            -webkit-box-shadow: 0px 0px 4px #000000;
            box-shadow: 0px 0px 4px #000000;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fff3f0', endColorstr = '#e0dfde');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#fff3f0', endColorstr = '#e0dfde')";
            background-image: -moz-linear-gradient(top, #fff3f0, #e0dfde);
            background-image: -ms-linear-gradient(top, #fff3f0, #e0dfde);
            background-image: -o-linear-gradient(top, #fff3f0, #e0dfde);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#fff3f0), to(#e0dfde));
            background-image: -webkit-linear-gradient(top, #fff3f0, #e0dfde);
            background-image: linear-gradient(top, #fff3f0, #e0dfde);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }
        .zoom-bar-slider .ui-slider-handle:hover
        {
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#3bf3ff', endColorstr = '#2ed1cb');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#3bf3ff', endColorstr = '#2ed1cb')";
            background-image: -moz-linear-gradient(top, #3bf3ff, #2ed1cb);
            background-image: -ms-linear-gradient(top, #3bf3ff, #2ed1cb);
            background-image: -o-linear-gradient(top, #3bf3ff, #2ed1cb);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#3bf3ff), to(#2ed1cb));
            background-image: -webkit-linear-gradient(top, #3bf3ff, #2ed1cb);
            background-image: linear-gradient(top, #3bf3ff, #2ed1cb);
        }
        
        .zoom-level
        {
            width: 92px;
            position: absolute;
            z-index: 4;
            padding-left: 3px;
        }
        .zoom-level-highlight
        {
            width: 10px;
            height: 12px;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#73c9ff', endColorstr = '#8cd5ff');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#73c9ff', endColorstr = '#8cd5ff')";
            background-image: -moz-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -ms-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -o-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#73c9ff), to(#8cd5ff));
            background-image: -webkit-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: linear-gradient(top, #73c9ff, #8cd5ff);
            opacity: 0.64;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 64);
            filter: alpha(opacity = 64);
            position: absolute;
            right: 0;
            display: none;
        }
        .zoom-level-label
        {
            display: inline-block;
            position: absolute;
            left: 0;
            -moz-border-radius: 4px;
            -webkit-border-radius: 4px;
            border-radius: 4px;
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#000000', endColorstr = '#082423');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#000000', endColorstr = '#082423')";
            background-image: -moz-linear-gradient(top, #000000, #082423);
            background-image: -ms-linear-gradient(top, #000000, #082423);
            background-image: -o-linear-gradient(top, #000000, #082423);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#000000), to(#082423));
            background-image: -webkit-linear-gradient(top, #000000, #082423);
            background-image: linear-gradient(top, #000000, #082423);
            -moz-background-clip: padding;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
            opacity: 0.92;
            color: white;
            padding: 2px 6px;
            margin-left: 10px;
            width: 50px;
            font-size: 10px;
            height: 12px;
            cursor: pointer;
        }
        .zoom-level-label:hover
        {
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#73c9ff', endColorstr = '#8cd5ff');
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#73c9ff', endColorstr = '#8cd5ff')";
            background-image: -moz-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -ms-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -o-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: -webkit-gradient(linear, center top, center bottom, from(#73c9ff), to(#8cd5ff));
            background-image: -webkit-linear-gradient(top, #73c9ff, #8cd5ff);
            background-image: linear-gradient(top, #73c9ff, #8cd5ff);
        }
        .zoom-level.street
        {
            top: 30px;
        }
        .zoom-level.city
        {
            top: 83px;
        }
        .zoom-level.state
        {
            top: 110px;
        }
        .zoom-level.country
        {
            top: 137px;
        }
        
        /* Query Editor */
        #cboxClose {
            display: none;
        }
        #cboxLoadedContent {
            
        }
        #cboxLoadingOverlay {
            background: white url('{!$Resource.MapLoadingGif}') no-repeat center;
        }
        #LoadingPopup {
            z-index: 99999;
        }
        #queryeditor-modal .query-editor-modal-loader {
            background: white url('{!$Resource.MapLoadingGif}') no-repeat;
            padding-left: 132px;
            height: 118px;
            line-height: 118px;
            font-size: 18px;
            font-weight: bold;
        }
        .ui-dialog {
            -moz-box-shadow: 0px 0px 20px #000000;
            -webkit-box-shadow: 0px 0px 20px #000000;
            box-shadow: 0px 0px 20px #000000;
        }
        .ui-dialog-titlebar {
            display: none;
        }
    
    </style>
    
    <!-- EditQuery CSS -->
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/combobox/jquery.combobox.css')}" />
	<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.css')}" />
	<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.filter.css')}" />
    <style type='text/css' class='editquery-css'>
        html, body {
            width: 100%;
            height: 100%;
        }
        .modal-layer {
        	display: none;
            position: absolute;
            z-index: 1;
            width: 100%;
            height: 100%;
            background-color: #000000;
            opacity: 0.5;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 50);
            filter: alpha(opacity = 50);
        }
    
        /* Basics */
        #savedqueryeditor-error {
        	padding: 15px;
            width: 800px;
            overflow: hidden;
        }
        #savedqueryeditor-error h3 {
        	display: block;
        	margin: 10px 0;
        	color: #757575;
        }
        #savedqueryeditor { 
            padding: 15px;
            width: 800px;
            height: 600px;
            overflow: hidden;
        }
        #savedqueryeditor div {
        	padding: 0;
        	margin: 0;
        }
        #savedqueryeditor-templates {
        	display: none;
        }
        span.link
        {
            color: blue;
            cursor: pointer;
        }
        span.link.small
        {
            font-size: 10px;
            font-weight: bold;
        }
        .dateliteralpicker
        {
            cursor: pointer;
        }
        .value input.invalid
        {
            background: transparent url({!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-cross-16.png')}) no-repeat right center;
        }
        .ui-autocomplete
        {
            z-index: 99999 !important;
            max-height: 300px !important;
        	overflow-y: auto;
        	overflow-x: hidden;
        }
        .PICKLIST > ul, .filterbyowner ul
        {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .PICKLIST li, .filterbyowner li
        {
            padding: 0;
            margin: 0;
        }
        #savedqueryeditor tr > td.actions > div, #savedqueryeditor tr > td.crossfilteractions > div, #savedqueryeditor tr > td.activitysubfilteractions > div
        {
        	display: none;
        }
        #savedqueryeditor tr:hover > td.actions > div, #savedqueryeditor tr:hover > td.crossfilteractions > div, #savedqueryeditor tr:hover > td.activitysubfilteractions > div
        {
        	display: block;
        }
        
        /* Tabs */
        #savedqueryeditor .tabs
        {
            background: none;
            border: none;
        }
        #savedqueryeditor .tabs > ul
        {
            width: auto;
            padding: 0 8px;
            background: none;
            border: none;
            border-bottom: 1px solid #CCC;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        #savedqueryeditor .tabs > ul li
        {
            background-color: #006DB4;
            background: #006DB4;
            background: url('images/blue-tab-bg.png');
            background-repeat: repeat-x;
            background-position: top;
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#197BBB), to(#0059A0));
            background: -webkit-linear-gradient(top, #197BBB, #0059A0);
            background: -moz-linear-gradient(center top , #197BBB 20%, #0059A0 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #197BBB, #0059A0);
            background: -o-linear-gradient(top, #197BBB, #0059A0);
            border: medium none;
            border-radius: 3px 3px 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0')";
        }
        #savedqueryeditor .tabs > ul li.ui-tabs-selected
        {
            background: none;
            border: 1px solid #CCC;
            border-top-right-radius: 3px;
            border-top-left-radius: 3px;
            background: white;
            color: #222;
            
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FFFFFF', endColorstr = '#FFFFFF');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FFFFFF', endColorstr = '#FFFFFF')";
        }
        #savedqueryeditor .tabs > ul li a
        {
            color: #ffffff;
            font-size: 12px;
        }
        #savedqueryeditor .tabs > ul li.ui-tabs-selected a
        {
            color: #2265BB;
        }
        #savedqueryeditor .tabs > .ui-tabs-panel
        {
        	padding: 15px;
        	margin-bottom: 10px;
        	border-bottom: 1px solid silver;
        	max-height: 420px;
        	overflow-x: hidden;
        	overflow-y: auto;
        }
        
        /* Boxes */
        #savedqueryeditor .box.gray {
            border: 1px solid #C7C7C7;
            padding:5px;
            margin:5px 0 10px 0;
            background:#efefef;
        }
        
        /* Sections */
        #savedqueryeditor .section {
        	position: relative;
        }
        #savedqueryeditor .section .section-header {
            color: #2265BB;
        }
        #savedqueryeditor .section .section-buttons {
        	position: absolute;
        	top: 5px;
        	right: 5px;
        }
        #savedqueryeditor .section .section-buttons .section-button {
        	padding-left: 18px;
            height: 16px;
        	line-height: 18px;
        	font-size: 10px;
        	cursor: pointer;
        }
        #savedqueryeditor .section .section-buttons .section-button.add {
        	background: transparent url("{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-plus-16.png')}") left center no-repeat;
        }
        
        /* Hide filter by owner section if this object is not ownable */
        #savedqueryeditor .filterbyowner
        {
        }
        
        /* Forms */
        #savedqueryeditor table.form td:first-child {
            font-weight: bold;
            padding-right: 15px;
        }
        
        /* Buttons */
        #savedqueryeditor .buttons {
        	padding: 0 10px;
        }
        #savedqueryeditor .buttons .btn {
        	width: 50px;
        }
        
        /* Comboboxes */
        #savedqueryeditor .ui-combobox
        {
        	padding-right: 0;
        }
        #savedqueryeditor .ui-combobox input
        {
        	background-color: white;
        	padding-right: 30px;
        	font-weight: bold;
        }
        #savedqueryeditor .ui-combobox a
        {
        	background: transparent;
			border: none;
			position: absolute;
			right: 0;
        }
        #savedqueryeditor .ui-combobox a .ui-button-icon-primary
        {
        	background: transparent url("{!URLFOR($Resource.QueryEditor, 'images/icons/combobox-arrow-16.png')}") no-repeat center;
        }
        
        .crossobjectoptions input.ui-autocomplete-input {
        	width: 300px;
        }
        
        /* Date pickers */
        #savedqueryeditor .ui-datepicker {
        	z-index: 9999999999 !important;
        }
        /*
        div.DATE { 
        	position: relative;
        }
        div.DATE input.datejs {
        	padding-right: 35px;
        }
        div.DATE .ui-datepicker-trigger {
        	position: absolute;
        	right: 24px;
        	top: 5px;
        	cursor: pointer;
        }
        div.DATE .dateliteralpicker {
        	position: absolute;
        	right: 4px;
        	top: 5px;
        }
        */
        
        /* Tree Icons */
        .jstree-0 li[rel="SavedQuery"] > a > .jstree-icon {
			background: url("{!URLFOR($Resource.MapAnything, 'jstree/themes/default/d.png')}") -80px -57px no-repeat !important;
		}
		.jstree-0 li[rel="LegendSavedQuery"] > a > .jstree-icon {
			background: url("{!URLFOR($Resource.MapAnything, 'jstree/themes/default/d.png')}") -108px -57px no-repeat !important;
		}
        
        #savedqueryeditor .crossfilter .subfilters .indexlabel {
        	display: none;
        }
        
        /* Hide features we don't want to use yet */
        #savedqueryeditor .crossfilter .subfilters, #savedqueryeditor .crossfilter .addfilter {  }
    </style>
    
    
    <!--
    <apex:includeScript value="{!$Resource.Plotting}"/>
    <apex:includeScript value="{!$Resource.Primary}"/>
    <apex:includeScript value="{!$Resource.SavedQueryTree}"/>
    <apex:includeScript value="{!$Resource.Export}"/>
    <apex:includeScript value="{!$Resource.Geocode}"/>
    <apex:includeScript value="{!$Resource.Proximity}"/>
    <apex:includeScript value="{!$Resource.Routing}"/>
    <apex:includeScript value="{!$Resource.ToolTip}"/>
    <apex:includeScript value="{!$Resource.Plotting}"/>
    <apex:includeScript value="{!$Resource.Utilities}"/>
    <apex:includeScript value="{!$Resource.bxSlider}"/>
    <apex:includeScript value="{!$Resource.hotkeys}"/>
    <apex:includeScript value="{!$Resource.Positioning}"/>
    -->


<c:JSHelperFunctions />  
<script type='text/javascript'>

	nokia.Settings.set("appId", "cL2-LKZ0bcVr0BcDu7P-"); 
	nokia.Settings.set("authenticationToken", "ygeWiBoAwmMHKgSwNCgxQw");
	(document.location.protocol == "https:") && nokia.Settings.set("secureConnection", "force");
	
var pageSuffix = '{!pageSuffix}';

var IsCorporateAdmin = true;
    
var BaseObjectsForSubMenu = [{ label: 'Loading...' }];

//var ZoomBar           = new nokia.maps.map.component.ZoomBar();
//var ZoomRectangle   = new nokia.maps.map.component.ZoomRectangle();
var ViewControl       = new nokia.maps.map.component.ViewControl();
var InfoBubbles       = new nokia.maps.map.component.InfoBubbles();
var ScaleBarComponent = new nokia.maps.map.component.ScaleBar();

if (nokia.maps.positioning.Manager) 
{
    var PositioningMgr    = new nokia.maps.positioning.Manager();
}
else
{
    $('#ShowPositionButton').hide();
}

var UserId = '{!$User.Id}';

var LoadingGIFUrl = '{!URLFOR($Resource.sma__MapAnything, 'ajax-loader.gif')}';
var MALoaddingGIFUrl = '{!URLFOR($Resource.MapAnything, 'MapLoadingGif.gif')}';

var LicenseType = '{!LicenseType}';

var VisibleQueries = new Array(); //Used to Determine Which Queries are Visible (List of Ids)
var SavedQueriesObjectIdArray = new Array(); //Used to Store Information about Processed Saved Queries


var ProcessedSavedQueries = new Array();

var UserEmailAddress = "{!$User.Email}";

var OnUserLoadEventCompletd = false;
var map = null;
var ProximityCircle = null;
var DOMNode = null;
var router = null;
var mapRoute = null;
var RouterResponse = null;

var AllLocationMarkers = new Array();

var RangeColorIndex = new Array();
var NumberField=null;
var MinIndex;
var MaxIndex;
var RangeEnabled;

var VisibleLocationMarkers = new Array();

var ObjectsToUpdateWithLatLong = new Array();

//Proximity Search Vars
var pc_Added    = false;
var pc_Lat      = 0;
var pc_Long     = 0;
var pc_Diameter = 0;

//Position Vars
var PositionMarker;
var PositionAccuracyCircle;
var PositionEnabled = false;
var PositionGeoCoder = new nokia.maps.search.Manager();

//Home Vars
var CenterLat;
var CenterLong;
var DefaultZoomLevel;


var DebugMode = false;

var GeoCodePointsIsRunning = false; //No Longer Needed

var CallBackFunction;



var ProximityGeoCoder = new nokia.maps.search.Manager();
var RoutingGeoCoder = new nokia.maps.search.Manager();
var RoutingGeoCodeList = new nokia.maps.util.OList();
var RoutingGeoCodeIsRunning;
var WayPointArray = new Array();
var HasRoutingErrors = false;


var GeoCoder1IsRunning;
var GeoCoder2IsRunning;
var GeoCoder3IsRunning;
var GeoCoder4IsRunning;


var GeoCurrentRequest = 0;
var GeoSentRequest = 0;
var GeoProcessedRequest = 0;
var MaxRequestOut = 200;

var GeoCurrentRequest_HeatMap = 0;
var GeoSentRequest_HeatMap = 0;
var GeoProcessedRequest_HeatMap = 0;
var MaxRequestOut_HeatMap = 200;
var heatMapColorSettings = {
    interpolate : true,
    
    stops       : {
        
        0       : '#00B',
        0.2     : '#0b0',
        0.5     : '#ff0',
        0.7     : '#f00'
        /*
        0           : '#00BB00',
        0.33        : '#000EAD',
        0.66        : '#FF0000'
        */
        
        /*
        0           : '#000EAD',
        0.21        : '#028482',
        0.41        : '#00BB00',
        0.61        : '#FFFF00',
        0.81        : '#FFA000',
        0.91        : '#FF0000'
        */
    }
};

var $GeoCurrentRequestElement = 0;
var $GeoSentRequestElement = 0;
var $GeoProcessedRequestElement = 0;
var $GeoRequestPendingElement = 0;

var AddressesToBeGeoCoded = new Array();
var AddressesToBeGeoCoded_HeatMap = new Array();

var PlottedLegendSavedQryId = "";

var GeocOdeListIndex = 1;

var GeoCoderCounter = 0;

var ObjectsToUpdateWithLatLongCleanUpIsRunning = false;


var slider1;

var slider2;

var defaultQueries = [];
var userSettings = {};

$(document).bind('keydown', 'Shift+f1',function (evt){ CreatePopupWindow("DebugWindowPopup",600); });
$(document).bind('keydown', 'Shift+f2',function (evt){ ZoomToFit(); });



$(function() 
{
    document.getElementById("exportedTable").style.height =(screen.height-460) + "px";
    sforce.connection.sessionId = '{!$Api.Session_ID}';
    
    //Leave Slider in VF Page
    slider1 = $('#slider1').bxSlider({
        controls: false,
        infiniteLoop: false,
        speed: 200
    });
    
    slider2 = $('#slider2').bxSlider({
        controls: false,
        infiniteLoop: false,
        speed: 200
    }); 
    
    if (LicenseType == 'bronze')
    {
        $('#ShowTrafficButton').hide();
    }
    
    //Remove Copyright Link
    $("#nm_crimg a").attr('disabled','disabled');
         
    
    StartUpJS();
    
    //map.setCopyrightAligment('topright');
    
    InitializeTree();
    AddGeoCoderObservers();
    
    var processResults = function(observedManager, key, value) {
        if (value == "finished") 
        {
            if (observedManager.getLocations().length > 0) 
            {
                Debug("Location Found!"); 
                
                var SearchResult = observedManager.getLocations()[0];
                
                var street = SearchResult.address.street;
                var city = SearchResult.address.city;
                var state = SearchResult.address.state;
                var country = SearchResult.address.country;
                var county = SearchResult.address.county ;
                var district = SearchResult.address.district;
                var postalcode = SearchResult.address.postalCode;
                var suite = SearchResult.address.suite;
                var floor = SearchResult.address.floor;
                var houseNumber = SearchResult.address.houseNumber;
                               
                var compiledStreet = (houseNumber != null ? houseNumber+" ":"") + (floor != null?"Floor - " + floor+" " + ", ":"") + (street!=null?street+" ":"") + (suite != null ? "Suite - " + suite:""); 
                        
                var CompiledAddress  = new Array();
                CompiledAddress.push($.trim(compiledStreet));
                CompiledAddress.push(city);
                CompiledAddress.push(state);
                CompiledAddress.push(postalcode);                
                
                $('#PositionAddress').html(CompiledAddress.join(', '));                   
            }
            else
            {
                $('#PositionAddress').html("Unable to Locate Address");
                Debug("Location Not Found!");
            }
        } 
        else if (value == "failed") 
        {
            alert("The request failed.");
        }
        else
        {
            Debug("PositionGeoCoder State: " + value);
        }
    };
    
    
    // Attach the observer function to our search manager
    PositionGeoCoder.addObserver("state", processResults);
    
    //var copy = function (obj, key, value, oldValue) { UpdateViewableArea(); };
    //map.set("observers", { center: copy, zoomLevel: copy, heading: copy });
    
    //add an observer that will update the zoom bar if something else changes the zoom level
    map.addObserver('zoomLevel', function (obj, key, newValue, oldValue) { $( ".zoom-bar-slider" ).slider('option', 'value', newValue); });
    
    //zoom-toggle click handlers
    $('.zoom-toggle-plus').click(function () { map.setZoomLevel(map.zoomLevel + 1, 'default'); });
    $('.zoom-toggle-minus').click(function () { map.setZoomLevel(map.zoomLevel - 1, 'default'); });
    
    //zoom-toggle slider
    $( ".zoom-bar-slider" ).slider({
        orientation: "vertical",
        range: "min",
        min: 0,
        max: 20,
        value: map.zoomLevel,
        slide: function( event, ui ) {
            map.setZoomLevel(ui.value, 'default')
        }
    });
    
    //show the zoom bar when mousing over the zoom toggle and remember if we are hovered over the toggle (used to avoid hiding too soon)
    $('.zoom-toggle').hover(
        function () {
            $('.zoom-bar-wrapper').show();
            $(this).data('hovered', true);
        },
        function () {
            $(this).data('hovered', false);
            //$('.zoom-bar-wrapper').mouseout();
        }
    );
    
    //hide the zoom bar after waiting to see if we mouse back over it
    $('.zoom-bar-wrapper').hover(
        function () {
            $(this).data('hovered', true);
        },
        function () {
            $(this).data('hovered', false);
            try { clearTimeout($(this).data('timeout')); } catch (err) { }
            
            $(this).data(
                'timeout', 
                setTimeout(
                    function () { 
                        if ($('.zoom-bar-wrapper').data('hovered') == false && $('.zoom-toggle').data('hovered') == false) {
                            $('.zoom-bar-wrapper').hide();
                        }
                    }, 800
                )
            );
        }
    );
    
    //highlight zoom levels on mouseover
    $('.zoom-level-label').hover(
        function () {
            $(this).closest('.zoom-level').find('.zoom-level-highlight').css('display', 'inline-block');
        },
        function () {
            $(this).closest('.zoom-level').find('.zoom-level-highlight').css('display', 'none');
        }
    );
    
    //handle zoom level clicks
    $('.zoom-level-label').click(function () {
        map.setZoomLevel($(this).closest('.zoom-level').attr('data-zoom-level'), 'default');
    });
    
    //preload images
    var images = new Array();
    var preloaders = ["{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}"];
    for (i = 0; i < preloaders.length; i++) {
        images[i] = new Image();
        images[i].src = preloaders[i];
    }    
}); //end onready

function UpdateViewableArea()
{
    //squaremeters
    //bottomRight
    //topLeft
    
    var bottomRight = map.getViewBounds().bottomRight;
    var topLeft = map.getViewBounds().topLeft;

    $('#bottomRight').html(bottomRight.toString());
    $('#topLeft').html(topLeft.toString());
    
    var height = bottomRight.distance(new nokia.maps.geo.Coordinate(topLeft.latitude,bottomRight.longitude));
    var width = bottomRight.distance(new nokia.maps.geo.Coordinate(bottomRight.latitude,topLeft.longitude));
    
    var a = parseFloat((height /1609.344 ) * (width / 1609.344)).toFixed(2).toString().split(".");
    var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
    
    
    $('#squaremeters').html(b + "." + a[1]);
}

/////////////////////////
//  SavedQueryTree.js  //

function InitializeTree()
{
    /*
        
        Folder
            Type~~Id
            
        Saved Query
            Type~~Id~~Custom~~Type
        
    */
    
    $("#SQTree").bind("create.jstree", function (event, data) 
    { 
        try
        {
            Debug("create.jstree");
            
            /*    
                data.rslt.obj[0] - the node created
                Array Breakdown
                
                0 - NodeType (PersonalRoot, CorporateRoot, CorporateFolder, PersonalFolder, CorporateSavedQuery, PersonalSavedQuery)
                1 - Id (Id of Folder or Saved Query)
                2 - Custom (Custom, NotCustom)
                3 - Type (LegendSavedQuery, SavedQuery)
            */ 
            
            if (data.rslt.obj.attr("Id") == undefined || data.rslt.obj.attr("Id") == "")
            {
                 Debug("create.jstree - Folder");
                 Debug("ParentId: " + data.rslt.parent.attr("Id"));
                 Debug("Name: " + data.rslt["name"]);
                 
                 var ParentNodeType = data.rslt.parent.attr("NodeType");
                 Debug('Parent is ' + ParentNodeType);  
                 
                 if (ParentNodeType == "PersonalFolder" || ParentNodeType == "PersonalRoot")
                 {                         
                    data.rslt.obj.attr("NodeType", "PersonalFolder");
                 }
                 else if (ParentNodeType == "CorporateFolder" || ParentNodeType == "CorporateRoot")
                 {
                    data.rslt.obj.attr("NodeType", "CorporateFolder");
                 }
                    
                $.getJSON("/apex/MATreeAJAXResources","action=new_folder&pid=" + data.rslt.parent.attr("Id") + "&name=" + data.rslt["name"] + "&pos=" + data.rslt["position"] + "&NodeType=" + data.rslt.parent.attr("NodeType"),function(json)
                { 
                    if(json.success)
                    {
                        var newnode = data.rslt.obj;
                        newnode.attr("id", json.FolderId);
                        Debug("Node Created in Database! " + json.FolderId);
                    }
                    else
                    {
                        //REMOVE CREATED FOLDER DUE TO ERROR HERE
                        NotifyError("Error Creating Node in Database",json.error);
                        Debug("Error Creating Node in Database " + json.error);
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    Debug("<b>Error Creating Node in Database</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                    NotifyError("Error Creating Node in Database",textStatus + " : " + errorThrown); 
                });
            }
        }
        catch(err)
        {
            Debug("Error, create.jstree");
            DisplayPropertiesOfObject(err,0);
        }
    }); //End create.jstree
    
    
    $("#SQTree").bind("select_node.jstree", function (event, data) 
        { 
            Debug("Node Selected");
            //var Node = $.jstree._reference('#SQTree')._get_node('#' + data.rslt.obj[0].id);
            //DisplayPropertiesOfObject(data.rslt.obj[0],0);
            
            Debug("Id:" + data.rslt.obj.attr('ID'));
            Debug("NodeType:" + data.rslt.obj.attr('NodeType'));
            Debug("IsCustom:" + data.rslt.obj.attr('IsCustom'));
            Debug("QueryType:" + data.rslt.obj.attr('QueryType'));
            
            
            
            
            
            //Debug("Type: " + data.rslt.obj[0]["type"]);
        }
    ); //End select_node.jstree    
    
    $("#SQTree").bind("rename.jstree", function (event, data) 
    { 
        Debug("rename.jstree");
        Debug("Id: " + data.rslt.obj.attr('ID'));
        
        $.getJSON("/apex/MATreeAJAXResources","action=rename_folder&id=" + data.rslt.obj.attr("Id") + "&name=" + data.rslt["new_name"],function(json)
        { 
            if(json.success)
            {
                Debug("Updated Node " + json.id);
            }
            else
            {
                NotifyError("Error Updating Node",json.error);
                Debug("Error Updating Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Node",textStatus + " : " + errorThrown); 
        }); 
    }); //End rename.jstree
    
    
    $("#SQTree").bind("remove.jstree", function (event, data) 
    { 
        Debug("remove.jstree");
        Debug("Id: " + data.rslt.obj.attr("Id"));
        
        var NodeType = data.rslt.obj.attr("NodeType");
        
        if (NodeType == "CorporateFolder" || NodeType == "PersonalFolder")
        {
            Debug("Removing Folder");
        }
        else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery")
        {
            Debug("Removing Saved Query");
        }
        
        $.getJSON("/apex/MATreeAJAXResources","action=delete_node&id=" + data.rslt.obj.attr("Id"),function(json)
        { 
            if(json.success)
            {
                Debug("Deleted Node " + json.id);
            }
            else
            {
                NotifyError("Error Deleting Node",json.error);
                Debug("Error Deleting Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Deleting Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Deleting Node",textStatus + " : " + errorThrown); 
        });
    }); //End remove.jstree
    
    
    
   $("#SQTree").bind("move_node.jstree", function (event, data) 
        { 
            Debug("move_node.jstree");
            
            /*
                .o - the node being moved (m.o[0])
                .np - the new parent (m.np[0])
                .op - the former parent (m.op[0])
            */            

            var NewParentNodeType = data.rslt.np.attr("NodeType");
            //var OldParentNodeType = data.rslt.op.attr("NodeType");
            
            var NewParentId = data.rslt.np.attr("Id");
            var OldParentId = data.rslt.op.attr("Id");

            Debug("Current Node Type: " + data.rslt.o.attr("NodeType"));
            Debug("<b>New Parent Id: </b>" + NewParentId );
            Debug("<b>Old Parent Id: </b>" + OldParentId );
            
            //DisplayPropertiesOfObject(data.rslt.np,0);
            
            var SavedQueryParam = '';
            var FolderParam = '';
            
            //Populate URL Params for children
            Debug("New Parent Children Ids");
            $.each($.jstree._reference('#SQTree')._get_children('#' + data.rslt.np.attr("Id")), function(index, value) { 
                
                Debug(index + ": " + $(value).attr("Id") + " (" + $(value).attr("NodeType") + ")" );
                
                var NodeType = $(value).attr("NodeType");
                
                //Set attribute on node for parent NodeType
                if (NodeType == 'PersonalSavedQuery' || NodeType == 'CorporateSavedQuery')
                {   
                    if (NewParentNodeType == 'CorporateRoot' || NewParentNodeType == 'CorporateFolder' )
                    {                   
                        $(value).attr("NodeType","CorporateSavedQuery");
                    }
                    else if (NewParentNodeType == 'PersonalRoot' || NewParentNodeType == 'PersonalFolder' )
                    {                   
                        $(value).attr("NodeType","PersonalSavedQuery");
                    }
                    
                    SavedQueryParam += $(value).attr("Id") + " " + NodeType + ",";
                }
                else
                {
                    FolderParam += $(value).attr("Id") + " " + NodeType + ",";
                }
            });
            
            //Remove last comma
            SavedQueryParam = SavedQueryParam.slice(0, -1);
            FolderParam = FolderParam.slice(0, -1);
                    
            Debug("SavedQueryParam: " + SavedQueryParam);
            Debug("FolderParam: " + FolderParam);       
            
            $.getJSON("/apex/MATreeAJAXResources","action=move_node&sqry=" + encodeURIComponent(SavedQueryParam) + "&folders=" + encodeURIComponent(FolderParam) + "&npid=" + NewParentId + "&npnt=" + NewParentNodeType,function(json)
            { 
                if(json.success)
                {
                    //Success
                }
                else
                {
                    NotifyError("Error Ordering Node(s)",json.error);
                    Debug("Error Ordering Node(s) " + json.error);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                Debug("<b>Error Ordering Node(s)</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Ordering Node(s)",textStatus + " : " + errorThrown); 
            });
        }
    ); //End move_node.jstree
    
    $("#SQTree").bind("load_node.jstree", function (event, data) 
    {         
        //update icons
        $('#SQTree li[rel="SavedQuery"]').each(function () {
        	
        	updateIcon($(this));
        	
        });
        
    }); //End create_node.jstree
    
    $("#SQTree")
        // call `.jstree` with the options object
        .jstree({
            "xml_data" : {
           "data": "",
            "ajax" : {
                "url" : "/apex/MapAnythingTree2",
                "data" : function (n) { 
                    
                    return { 
                        id : n.attr ? n.attr("id") : 0, 
                        rand : new Date().getTime(),
                        type: n.attr ? n.attr("NodeType") : 0
                    }; 
                }
            },
            "xsl" : "nest"
        },
        "types" : {
            
            "types" : {
                "savedquery" : {
                    "icon" : { 
                        "image" : "http://static.jstree.com/v.1.0rc/_docs/_drive.png" 
                    }
                }
            }
        },
        "core": { 
            "animation" : 10, 
            "strings": 
                {
                    "loading" : "Loading...",
                    "new_node" : "New Folder" 
                }
        
        },
        "crrm" : { 
            "move" : {
                "check_move" : function (m) 
                { 
                    /*
                        .o - the node being moved (m.o[0])
                        .np - the new parent (m.np[0])
                        .op - the former parent (m.op[0])
                    */
                    

                    var ShowRuleInDebug = true;

                    if (m.np.attr("id") == "SQTree")
                    {
                        if (ShowRuleInDebug) { Debug("Prevent Move: Can't Move To Root Level"); }
                        return false;
                    }
                    else if (m.o.attr("NodeType") == "CorporateRoot" || m.o.attr("NodeType") == "PersonalRoot")
                    {
                        //Prevent Moving Root Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent Moving Root Folders"); }
                        return false;
                    }
                    else if (m.np.attr("NodeType") == 'CorporateSavedQuery' || m.np.attr("NodeType") == 'PersonalSavedQuery')
                    {
                        //Prevent Cascading of Saved Queries
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent Cascading of Saved Queries"); }
                        return false;
                    }
                    else if ((m.o.attr("NodeType") == "PersonalFolder" || m.o.attr("NodeType") == "CorporateFolder") 
                            && (m.op.attr("NodeType") == "CorporateFolder" || m.op.attr("NodeType") == "CorporateRoot")
                            && (m.np.attr("NodeType") == 'PersonalFolder' || m.np.attr("NodeType") == 'PersonalRoot'))
                    {
                        //Prevent moving Corporate Folders to Personal Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Corporate Folders to Personal Folders"); }
                        return false;
                    }
                    else if ((m.o.attr("NodeType") == "PersonalFolder" || m.o.attr("NodeType") == "CorporateFolder") 
                            && (m.op.attr("NodeType") == "PersonalFolder" || m.op.attr("NodeType") == "PersonalRoot")
                            && (m.np.attr("NodeType") == 'CorporateFolder' || m.np.attr("NodeType") == 'CorporateRoot'))
                    {
                        //Prevent moving Personal Folders to Corporate Folders
                        if (ShowRuleInDebug) { Debug("Prevent Move: Prevent moving Personal Folders to Corporate Folders"); }
                        return false;
                    }
                    else if (!IsCorporateAdmin && (m.o.attr("NodeType") == "CorporateSavedQuery" && 
                                      (m.np.attr("NodeType") == 'PersonalFolder' || m.np.attr("NodeType") == 'PersonalRoot')))
                    {
                        //Prevent moving Corporate Queries to Personal Queries
                        return false;
                    }
                    else if (!IsCorporateAdmin && (m.o.attr("NodeType") == "PersonalSavedQuery" && 
                                      (m.np.attr("NodeType") == 'CorporateRoot' || m.np.attr("NodeType") == 'CorporateFolder')))
                    {
                        //Prevent moving Personal Queries to Corporate Queries
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
        },
        "dnd" : {
            "copy_modifier" : false,
            "drop_target" : false,
            "drag_target" : false
        },
            "plugins" : ["themes","xml_data","ui","crrm","hotkeys","contextmenu", "dnd", "types", "cookies"],
            "contextmenu": {items: customMenu}
            
        }) //End jstree
}

function updateIcon($node)
{
	try 
   	{
   		if ($node.attr('rel') == 'SavedQuery')
   		{
	    	var iconColor = $node.attr('IconColor');
	    	if (iconColor.indexOf('#') == 0)
	    	{
	    		$node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: '+iconColor+' !important; background-position: -80px -77px !important;'));
	    	}
	    	else if (iconColor.indexOf('image:') == 0)
	    	{
	    		var imageURL = "/servlet/servlet.FileDownload?file="+iconColor.split('image:')[1];
	    		$node.find('a .jstree-icon, a img').replaceWith($("<img style='width: 19px; height: 19px; margin-right: 3px; vertical-align: middle;' />").attr('src', imageURL));
	    	}
	    }
	    else if ($node.attr('rel') == 'LegendSavedQuery')
	    {
	    	$node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>"));
	    }
    } catch (err) { }
}

function customMenu(node) {

    var items = null;
    
    var classList = String(node[0].classList);
    
    //Debug("Type:" + node[0].type);
    
    /* 
        Node Types
        ===================
        CorporateRoot
        CorporateFolder
        CorporateSavedQuery
        
        PersonalRoot
        PersonalFolder
        PersonalSavedQuery
        
        IsCorporateAdmin
    */
    
    /*PersonalRoot, CorporateRoot, CorporateFolder, PersonalFolder, CorporateSavedQuery, PersonalSavedQuery*/
    var NodeType = node.attr("NodeType");
    var NodeId = node.attr("Id"); //Id of Folder or Saved Query
    var NodeIsCustom = node.attr("IsCustom"); /*Custom, NotCustom*/
    var NodeIsLegend = node.attr("QueryType"); /*Legend, Standard*/
    
    
    if (!IsCorporateAdmin && (NodeType == "CorporateRoot" || NodeType == "CorporateFolder") )
    {
        items = {
            NotAuthorizedItem: {
                label: "Not Authorized",
                _disabled: true
            }
        };
    }
    else if (((NodeType == "CorporateRoot" || NodeType == "CorporateFolder") && IsCorporateAdmin) ||
         NodeType == "PersonalRoot" || NodeType == "PersonalFolder")
    {
        items = {
            createItem: {
                label: "Create",
                action: function (obj) 
                { 
                    
                    //DisplayPropertiesOfObject(this._get_parent(obj),0);
                    this.create(obj); 
                }
            },
            renameItem: { // The "rename" menu item
                label: "Rename",
                action: function (obj) { this.rename(obj); }
            },
            deleteItem: { // The "delete" menu item
                label: "Delete",
                action: function (obj) { this.remove(obj); }
            },
            createSavedQuery: { 
                label: "Create Saved Query",
                separator_before: true,
                submenu: ReturnSubMenu()
            }
        };
        

        
        //Remove Delete Option if Parent has Children
        if (classList.indexOf("jstree-closed") != -1 || classList.indexOf("jstree-open") != -1)
        {
            delete items.deleteItem;
        }
        
        //Remove Security Option If not Corporate
        if (NodeType == "PersonalRoot" || NodeType == "PersonalFolder")
        {
             delete items.Security;
        }
        
    }
    else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery")
    {
        //
        //RemoveSavedQuery(SavedQryId);
        //    ModifyPlottedSavedQueryCount();
            
            
            
            
        
        items = {
            plotSavedQuery: {
                label: "Plot",
                _disabled: !AbleToPlot(NodeId),
                action: function (obj) 
                    { 
                        Debug("Plot " + NodeId);
                        PlotSavedQuery(NodeId,false);
                    }
            },
            plotVisibleSavedQuery: {
                label: "Plot, Visible Area",
                _disabled: !AbleToPlot(NodeId),
                action: function (obj) 
                    { 
                        Debug("Plot Visible Area " + NodeId);
                        PlotSavedQuery(NodeId,true);
                    }
            },
            plotOnLoad: {
                label: node.is('.jstree-star') ? "Remove Plot On Load" : "Plot On Load",
                action: function (obj) 
                    { 
                        Debug(NodeId + " will now Plot On Load!");
                        AddPlotOnLoadId(NodeId);
                    }
            },            
            plotHeatMap: {
                label: "Plot, Heat Map (Gold Beta)",
                action: function (obj) 
                    { 
                        Debug("Plot HeatMap " + NodeId);
                        PlotHeatmap(NodeId);
                    }
            },
            editSavedQuery: {
                label: ((NodeIsCustom == "true") ? "Edit (Custom Query)" : "Edit"),
                separator_before: true,
                _disabled: (NodeIsCustom == "true"),
                action: function (obj) 
                    { 
                        Debug("Edit " + NodeId); 
                        
                        if (AbleToPlot(NodeId))
                        {
                            launchQueryEditor('/apex/EditQuery?q='+NodeId);
                        }
                        else
                        {
                            NotifyError("I'm Sorry....","Please Remove the Query Before Editing");
                        }
                    }
            },
            cloneSavedQuery: { 
                label: "Clone",
                action: function (obj) 
                    { 
                        Debug("Clone " + NodeId); 
                     
                        launchQueryEditor('/apex/EditQuery?q=::queryId::&c=true'.replace('::queryId::', NodeId));   
                    }
            },
            deleteSavedQuery: {
                label: "Delete",
                action: function (obj) 
                    { 
                        if (AbleToPlot(NodeId))
                        {
                            this.remove(obj); 
                        }
                        else
                        {
                            NotifyError("I'm Sorry....","Please Remove the Query Before Deleting");
                        }
                    }
            }
        };
    
        
        
        //DisplayPropertiesOfObject(node[0],0);
        
        
        if (!IsCorporateAdmin && NodeType == "CorporateSavedQuery")
        {
            delete items.editSavedQuery;
            delete items.cloneSavedQuery;
            delete items.deleteSavedQuery;
        }

    }
    
    



    return items;
}

function PlotHeatmap(SavedQryID)
{
    //create a new plotted query from the template and append it to the plotted queries table
    var $newPlottedQuery = $('#templates tr.PlottedRowUnit.HeatMap').clone();
    $newPlottedQuery.find('.LoadingGif').attr('src', LoadingGIFUrl);
    $newPlottedQuery.find('.title').text('Heat Map - ' + $('#SQTree #'+SavedQryID+' a').text());
    $newPlottedQuery.find('.subtitle').text($('#SQTree #'+SavedQryID).attr('title'));
    $newPlottedQuery.find('.HeatMap_Total').html('Running query...');
    $('#PlottedQueriesTable').append($newPlottedQuery);

    //show plotted queries
    SlideToPlottedQueries();
    
    $.getJSON("/apex/MAHeatMapAJAXResources?action=analyze_query&SavedQueryId=" + SavedQryID + "&UserId=" + UserId, function (response) {
        if (response.success)
        {
            //send batches of 10000
            $newPlottedQuery.data('batchesToProcess', Math.ceil(response.data / 10000.0));
            $newPlottedQuery.data('expectedResultsSize', response.data);
            $newPlottedQuery.data('processedResultsSize', 0);
            $newPlottedQuery.data('heatmapDataPoints', []);
            $newPlottedQuery.data('addressesToGeocode', []);
            $newPlottedQuery.data('badAddresses', 0);
            $newPlottedQuery.data('maxRequestsOut', 200);
            $newPlottedQuery.data('currentRequestsOut', 0);
            $newPlottedQuery.data('geocodeResponseCount', 0);
            
            var numDataPoints = response.data;
            if (numDataPoints == 0)
            {
                //just show Plotted: 0
                $newPlottedQuery.find('.HeatMap_Total').html('Plotted: 0');
                var heatmapProvider = new nokia.maps.heatmap.Overlay({
                    max: 20,
                    opacity: 1,
                    type: "density",
                    coarseness: 2,
                    sampleDepth: 4,
                    colors: heatMapColorSettings
                });

                heatmapProvider.addData($newPlottedQuery.data('heatmapDataPoints'));
                map.overlays.add(heatmapProvider);
                
                //remove the existing heat map if there is one (this is a quick fix for bad async handling)
                if ($newPlottedQuery.data('heatmapProvider'))
                {
                	map.overlays.remove($newPlottedQuery.data('heatmapProvider'));
                }
                
                $newPlottedQuery.data('heatmapProvider', heatmapProvider);
               
                
                $newPlottedQuery.find('.btn-remove').html("X").css('cursor','pointer').click(function(){
                    map.overlays.remove($(this).closest('tr.PlottedRowUnit').data('heatmapProvider'));
                    $(this).closest('tr.PlottedRowUnit').remove();
                });
            }
            else
            {
                var dataPointsIndex = 0;
                while (dataPointsIndex < numDataPoints)
                {
                    $.getJSON("/apex/MAHeatMapAJAXResources?action=plot_query&SavedQueryId=" + SavedQryID + "&UserId=" + UserId + "&offset=" + dataPointsIndex, function(json) {
                        $newPlottedQuery.data('batchesToProcess', $newPlottedQuery.data('batchesToProcess') - 1);
                        ProcessPlotQueryResults_HeatMap(json, $newPlottedQuery, SavedQryID);
                    })
                    .error(function(jqXHR, textStatus, errorThrown) {
                         $newPlottedQuery.data('batchesToProcess', $newPlottedQuery.data('batchesToProcess') - 1);
                    });
                    dataPointsIndex += 10000;
                }
            }
        }
        else
        {
            
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Plotting</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Plotting",textStatus + " : " + errorThrown); 
        
        $newPlottedQuery.find('.btn-remove').html("X").css('cursor','pointer').click(function(){
            map.overlays.remove($(this).closest('tr.PlottedRowUnit').data('heatmapProvider'));
            $(this).closest('tr.PlottedRowUnit').remove();
        });  
    });    
}

function ProcessPlotQueryResults_HeatMap (json, $plottedQuery, SavedQryID) 
{
    if(json.success)
        {                    
            Debug("WholeQry: " + json.WholeQry);
            
            //remove namespace
            removeNamespace('{!namespace}', json.SavedQryObj);              
            
            var SavedQryJSObj = new Object();
            
            SavedQryJSObj.QryId           = SavedQryID;
            SavedQryJSObj.ToolTip1        = json.SavedQryObj.Tooltip1__c;
            SavedQryJSObj.ToolTip2        = json.SavedQryObj.Tooltip2__c;
            SavedQryJSObj.ToolTip3        = json.SavedQryObj.Tooltip3__c;
            SavedQryJSObj.ToolTip4        = json.SavedQryObj.Tooltip4__c;
            SavedQryJSObj.ToolTip5        = json.SavedQryObj.Tooltip5__c;
            SavedQryJSObj.ToolTip6        = json.SavedQryObj.Tooltip6__c;
            SavedQryJSObj.ToolTip7        = json.SavedQryObj.Tooltip7__c;
            SavedQryJSObj.aStreet         = json.SavedQryObj.BaseObject__r.Street__c;
            SavedQryJSObj.aCity           = json.SavedQryObj.BaseObject__r.City__c;
            SavedQryJSObj.aState          = json.SavedQryObj.BaseObject__r.State__c;
            SavedQryJSObj.aZip            = json.SavedQryObj.BaseObject__r.PostalCode__c;
            SavedQryJSObj.aCountry        = json.SavedQryObj.BaseObject__r.Country__c;
            SavedQryJSObj.BaseObject      = json.SavedQryObj.BaseObject__r.Name;
            //SavedQryJSObj.ImageURL      = ImageURL;
            SavedQryJSObj.StoredQry       = json.SavedQryObj.Query__c;
            SavedQryJSObj.Latitude        = json.SavedQryObj.BaseObject__r.Latitude__c;
            SavedQryJSObj.Longitude       = json.SavedQryObj.BaseObject__r.Longitude__c;
            SavedQryJSObj.WholeQry        = json.WholeQry;
            SavedQryJSObj.QryType         = json.QueryType;
            SavedQryJSObj.SavedQryName    = json.SavedQryObj.Name;
            SavedQryJSObj.IconColor       = json.SavedQryObj.IconColor__c;
            SavedQryJSObj.CleanCity       = json.SavedQryObj.BaseObject__r.CleanCity__c;
            SavedQryJSObj.CleanStreet     = json.SavedQryObj.BaseObject__r.CleanStreet__c;
            SavedQryJSObj.CleanState      = json.SavedQryObj.BaseObject__r.CleanState__c;
            SavedQryJSObj.CleanCounty     = json.SavedQryObj.BaseObject__r.CleanCounty__c;
            SavedQryJSObj.CleanCountry    = json.SavedQryObj.BaseObject__r.CleanCountry__c;
            SavedQryJSObj.CleanPostalCode = json.SavedQryObj.BaseObject__r.CleanPostalCode__c;
            SavedQryJSObj.CleanDistrict   = json.SavedQryObj.BaseObject__r.CleanDistrict__c;
            SavedQryJSObj.CleanQuality    = json.SavedQryObj.BaseObject__r.Quality__c;
            SavedQryJSObj.CleanSimilarity = json.SavedQryObj.BaseObject__r.Similarity__c;         
            
            SavedQryJSObj.RelatedListCount = json.SavedQryObj.RelatedListCount__c;
            
            Debug("Query Type: " + SavedQryJSObj.QryType);  
            
            if (SavedQryJSObj.BaseObject == 'Contact' || SavedQryJSObj.BaseObject == 'Lead')
            {
                //$('#AddToCampaignButton').show(400);
            }                 

            SavedQryJSObj.BatchAmount = (json.SavedQryObj.BaseObject__r.BatchSize__c == null) ? 50 : json.SavedQryObj.BaseObject__r.BatchSize__c;
            
            ProcessSavedQryJSObject_HeatMap(SavedQryJSObj,json,$plottedQuery);
        }
        else
        {
            /*
            Debug("ProcessSavedQryJSObject " + json.error);
            NotifyError("Error Plotting " + SavedQryRecord.Name + "!",json.error);                  
            
            $newPlottedQuery.find('.btn-remove').html("X").css('cursor','pointer').click(function(){
                map.overlays.remove($(this).closest('tr.PlottedRowUnit').data('heatmapProvider'));
                $(this).closest('tr.PlottedRowUnit').remove();
            });
            */           
        }
}

function ReturnSubMenu()
{
    return BaseObjectsForSubMenu;
}

function DoOnCompleteNewForSavedQry(NodeName,NodeId,ParentNodeId,pNodeType,pIsCustom,pQueryType,pRel)
{
    //Make New Node
    Debug("DoOnCompleteNewForSavedQry");
    
    $("#SQTree").jstree("create","#" + ParentNodeId,"last",{attr : {id: NodeId, NodeType: pNodeType, rel: pRel, IsCustom: pIsCustom}, data: NodeName, QueryType:pQueryType},null,true);
    
    //Hide Popup
    ClosePopupWindow();
}

function DoOnCompleteEditSavedQry(NodeName,NodeId,colorAssignmentType)
{
    //Edit Existing Node
    $("#SQTree").jstree('rename_node', '#' + NodeId , NodeName);
    $("#SQTree #"+NodeId)
        .attr('rel', colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery')
        .attr('querytype', colorAssignmentType == 'Static' ? 'Standard' : 'Legend');
    
    //Hide Popup
    ClosePopupWindow();
}

/////////////////////////
/////////////////////////

function ProcessWayPoints()
{
    try
    {
        Debug("ProcessWayPoints");
        Debug("HasRoutingErrors: " + HasRoutingErrors);
        if (HasRoutingErrors)
        {
            //Cant Process Way Points  
        }
        else
        {
            SlideToDirectionsOutput();
            
            $('#DirectionsOutput').html('<div style="display:block;float:left;width:100%;margin:0;"><img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/><br /><br/><h2 style="display:block;margin:0 auto;width:200px;text-align:center;">Loading Directions</h2></div>');
                        
            
            Debug("WayPointArray Count: " + WayPointArray.length);
            
            if (WayPointArray.length >= 2)
            {
                var WayPoints = new nokia.maps.routing.WaypointParameterList();
                
                //Add Each Waypoint to the WayPoints List
                $.each(WayPointArray, function(key, value) { 
                    
                    Debug("Adding New Element to WayPoints");
                    Debug("Lat: " + value.Lat);
                    Debug("Long: " + value.Long);
                                               
                    WayPoints.addCoordinate(new nokia.maps.geo.Coordinate(parseFloat(value.Lat), parseFloat(value.Long)));
                });
                
                /*
                var modes = [{
                    type: "shortest",
                    transportModes: ["car"],
                    trafficMode: "default"
                }];
                */
                
                var modes = [{
                    type: $('#RouteType').val(),
                    transportModes: [$('#RouteMode').val()],
                    trafficMode: "default"
                }];
                
                var onRouteCalculated = function(observedRouter, key, value)
                    {
                        if (value == "finished") 
                        {
                            try
                            {
                                RouterResponse = observedRouter.getRoutes();
                                //create the default map representation of a route
                                mapRoute = new nokia.maps.routing.component.RouteResultSet(RouterResponse[0]).container;
                                map.objects.add(mapRoute);
                                //Zoom to the bounding box of the route
                                map.zoomTo(mapRoute.getBoundingBox(), false, "default");
                          
                                var TotalTime = 0;
                                var TotalLength = 0;
                                
                                //DisplayPropertiesOfObject(RouterResponse[0],0);
                                
                                Debug("Mode:");
                                DisplayPropertiesOfObject(RouterResponse[0].mode,0);
                                
                                Debug("Summary:");
                                DisplayPropertiesOfObject(RouterResponse[0].summary,0);
                                
                          
                                var div_content = "<div class=\"st\"><table style=\"border-collapse:collapse;width:97%;\">";
                          
                                for (var LegIndex=0;  LegIndex < RouterResponse[0].legs.length ; LegIndex++)
                                {
                                    var DirectionWayPoint = WayPointArray[LegIndex];
                                    
                                    div_content += "<tr class=\"origin-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\"><div class=\"pin-green\"></div></td><td style=\" padding:3px 3px 3px 0;color: #006600;font-family: helvetica,arial,sans-serif;font-size: 11px;\">Origin:</td></tr><tr class=\"origin-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
                                    
                                    var leg = RouterResponse[0].legs[LegIndex];
                                    
                                    Debug("Length: " + leg.length);
                                    Debug("travelTime: " + leg.travelTime);
                                    
                                    TotalTime += leg.travelTime;
                                    TotalLength += leg.length;
                                    
                                    var Maneuvers = leg["maneuvers"];
                                    
                                    for (var i = 0 ; i < Maneuvers.length; i++)
                                    {
                                        var Maneuver = Maneuvers[i];
                                        
                                        div_content += "<tr class=\"maneuvers\" style=\"background:none;color:#555;font-family:helvetica,arial,sans-serif;font-size:11px;font-weight:normal;border:1px solid #dddddd;\">";
                                        div_content += "<td class=\"maneuver-number\" style=\"font-family:helvetica,arial,sans-serif;font-size:14px;color:#006DB4;font-weight:bold;padding:9px 12px 9px 6px;vertical-align:top;text-align:center;\">" + (i + 1) + "</td>";
                                        div_content += "<td class=\"maneuver-instruction\" style=\"padding:9px 6px 10px 0;color:#222;font-family:helvetica,arial,sans-serif;font-size:11px;\">" + Maneuver["instruction"] + "</td>";
                                        div_content += "</tr>";
                                    }
                                    
                                }
                                
                                var DirectionWayPoint = WayPointArray[WayPointArray.length-1];
                                div_content += "<tr class=\"destination-top\" style=\"font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-top:1px solid #ddd;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td class=\"pin\" rowspan=\"2\" style=\"padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;border-bottom:4px solid #ccc;\"><div class=\"pin-red\"></div></td><td style=\" padding:3px 3px 3px 0;color: #660000;font-family:helvetica,arial,sans-serif;font-size: 11px;\">Destination:</td></tr><tr class=\"destination-bottom\" style=\" font-family:helvetica,arial,sans-serif;font-size:12px;background:#ededed;border-bottom:4px solid #ccc;border-right:1px solid #ddd;border-left:1px solid #ddd;\"><td style=\"padding:0 3px 5px 0;\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></tr>";
    
                                div_content += "</table></div>";
        
                                TotalLength = (TotalLength / 1609.344).toPrecision(4);
                                TotalTime = (TotalTime / 3600).toPrecision(3);                               
    
                                document.getElementById('DirectionsOutput').innerHTML = "<span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Distance</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + (TotalLength - 0) + " miles</span>" ;
                                document.getElementById('DirectionsOutput').innerHTML += "<br /><span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#006DB4;\">Duration</span>: <span style=\"font-family:helvetica,arial,sans-serif;font-size:12px;font-weight:bold;color:#000;\">" + TotalTime + " hours</span>";
    
                                
        
                                document.getElementById('DirectionsOutput').innerHTML += div_content;
                                
                                
                                //document.getElementById("printLink").style.display = "block";
                  
                                
                                //document.getElementById("clearDirBtn").className = "btn";
                                //document.getElementById("clearDirBtn").disabled = false;
                                
                                $('#DirectionControls').show();
                            }
                            catch(err)
                            {
                                Debug("Error Occured While Processing Routing Results");
                                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                                DisplayPropertiesOfObject(err,0);
                            }
                        }
                        else if (value == "failed") 
                        { 
                            Debug("The routing request failed.");
                            NotifyError("The routing request failed.","The routing request failed.");
                        }
                        else
                        {
                            Debug("Routing Request Status: " +  value);
                        }
                    };
                    
              //add the observer function to the routers "state" property
              router.addObserver("state", onRouteCalculated);
              //calculate the route (and call onRouteCalculated afterwards)
              router.calculateRoute(WayPoints, modes);
            }
            else
            {
                
            }
        }
    }
    catch(err)
    {
        Debug("Error Occured While Processing Route Waypoints");
        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
        DisplayPropertiesOfObject(err,0);
    }
}




function AppendSavedQueryToPlottedTable(SavedQryID,SavedQryRecord)
{
    //PlottedQueriesTable
    
    var HTMLToAppend = '';
    
    HTMLToAppend += '<tr id="Row_' + SavedQryID + '" class="PlottedRowUnit"><td>'; //Start of Row
    HTMLToAppend += '<div id="PrimaryDIV" style="margin:0;padding:0;">'
    
    //Start Information Table
    HTMLToAppend += '<table style="width:270px;">'
    

    HTMLToAppend += '<td rowspan="2" style="width:16px;"><div style="padding:0px 0px 0px 0px;" id="' + SavedQryRecord.Id  + '"><img src="' +LoadingGIFUrl +'"/></div></td>';         
    
    HTMLToAppend += '<td colspan="2"><b>' + SavedQryRecord.Name + '</b></td>';
    
    if (SavedQryRecord.PicklistField__c != null)
    {
        HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><table border="0" cellspacing="0" cellpadding="0" align="right"><tr height="5px;"><td width="5px;" style="background-color:red;"></td><td width="5px;" style="background-color:green;"></td></tr><tr height="5px;"><td width="5px;" style="background-color:blue;"></td><td width="5px;"style="background-color:yellow;"></td></tr></table></td>';
    }
    else
    {
    	if (SavedQryRecord.IconColor__c && SavedQryRecord.IconColor__c.indexOf('image:') == 0) {
    		HTMLToAppend += '<td rowspan="2" style="text-align:center;"><img src="/servlet/servlet.FileDownload?file='+SavedQryRecord.IconColor__c.split('image:')[1]+'" style="height: 20px; max-width: 30px;" /></td>';
    	}
    	else {
        	HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><div style="padding:0px 0px 0px 0px; width: 10px; height: 10px; background-color:' + SavedQryRecord.IconColor__c +';"></div></td>';
        }
    }
    
    
    
    HTMLToAppend += '</tr><tr id="Row_' + SavedQryID + '">';
    HTMLToAppend += '<td style="color:gray;">' + SavedQryRecord.BaseObject__r.Name__c + '</td>';
    HTMLToAppend += '<td style="text-align:left;"><span id="' + SavedQryID + '_Stats" style="display:none;">';
    HTMLToAppend += '<table cellpadding="2" cellspacing="0" align="left"><tr>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Count"></span></td>';
    HTMLToAppend += '<td>of</td>';
    HTMLToAppend += '<td><span id="' + SavedQryID + '_Total"></span></td>';
    HTMLToAppend += '</tr></table></span></td>';
    


    HTMLToAppend += "</tr>";
    HTMLToAppend += '</table>' //End Information Table
       
    HTMLToAppend += '</div>'
    HTMLToAppend += '</td></tr>'; //End of Row
    
    $('#PlottedQueriesTable').append(HTMLToAppend);
}


    
        
        
       function ToggleMissingAddressContent(obj)
       {
            if ($(obj).html() == "Show")
            {
                $(obj).html('Hide');
                
            }
            else
            {
                $(obj).html('Show');
            }
            
            
            
            $(obj).parent().find('div').slideToggle('slow', function() {
                // Animation complete.
              });
            
       }
       

        
      
        
        function AddToMissingAddressesTab(pTp,sReason)
        {
            try
            {
                //Debug("AddToMissingAddressesTab " + pTp.QryId);
                
                ProcessedSavedQueries[pTp.QryId].AddressesNotFound++;
                
                if (ProcessedSavedQueries[pTp.QryId].AddressesNotFound == 1)
                {
                    var HTMLToAdd = '';
                    
                    HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Header" >';
                        HTMLToAdd += pTp.queryName + ' <span id="count">(1)</span> <a onclick="ToggleMissingAddressContent(this);">Hide</a>';
                        
                        HTMLToAdd += '<div id="' + pTp.QryId + '_MissingAddresses_Content">';
                            HTMLToAdd += '<table cellpadding="3" id="' + pTp.QryId + '_MissingAddresses_Table" style="width:100%;">';
                            
                            HTMLToAdd += '<tr>';
                                HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObjectId + '">' + pTp.ToolTip1V + '</a></td>';
                                HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                                HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
                            HTMLToAdd += '</tr>';
                            
                            HTMLToAdd += '</table>';
                        HTMLToAdd += '</div>';
                    HTMLToAdd += '</div>';
                    
                    $('#MissingAddressesContent').append(HTMLToAdd);
                }
                else
                {
                    HTMLToAdd = '<tr>';
                        HTMLToAdd += '<td><a target="_blank" href="/' + pTp.sObjectId + '">' + pTp.ToolTip1V + '</a></td>';
                        HTMLToAdd += '<td>' + pTp.MarkerAddress + '</td>';
                        HTMLToAdd += '<td style="text-align:right;">' + sReason + '</td>';
                    HTMLToAdd += '</tr>';
                    
                    $('#' + pTp.QryId + '_MissingAddresses_Table').append(HTMLToAdd);
                    
                    $('#' + pTp.QryId + '_MissingAddresses_Header > span').html('(' + ProcessedSavedQueries[pTp.QryId].AddressesNotFound + ')');
                    
                    
                }
                
               
                
                if (ProcessedSavedQueries[pTp.QryId] == undefined)
                {
                    DisplayPropertiesOfObject(ProcessedSavedQueries,0);
                    Debug('<span style="color:red;">ProcessedSavedQueries[' + pTp.QryId + '] Is Undefined');
                }
                else
                {
                    //Debug("Object Id: " + pTp.RecordId);
                    ProcessedSavedQueries[pTp.QryId].ProcessedMarkersCount++;
                    ProcessedSavedQueries[pTp.QryId].SetProccessingStatus();
                }
                
            }
            catch(err)
            {
                Debug("Error, AddToMissingAddressesTab, " + err.description);
                
                DisplayPropertiesOfObject(err,0);
                
                DisplayPropertiesOfObject(pTp,0);
            }
            
        }
        
        
        
        
        
       
        
        
       
        
        
        
        

        
        

       /* 
       function ProduceMarkerContent(obj)
       {       
            var MarkerContent = '';
            
            //Marker Name
            MarkerContent += '<div id="MarkerName">';
            MarkerContent += '<a href="/' + obj.pTp.RecordId + '" target="_blank">' + obj.pTp.ToolTip1V + '</a>';
            MarkerContent += '</div>';
            
            //Marker Address
            MarkerContent += '<div id="MarkerAddress">';
            MarkerContent += obj.pTp.MarkerAddress;
            MarkerContent += '</div>';
            
            
            
            
            MarkerContent += '<div id="bubble-tabs" ContentKey="' + obj.pTp.ContentKey + '">';
            MarkerContent += "<ul>";
            MarkerContent += '<li><a href="#tab-info-' + obj.pTp.ContentKey + '">Info</a></li>';
            MarkerContent += '<li><a href="#tab-actions-' + obj.pTp.ContentKey + '">Actions</a></li>';
            
            if (obj.pTp.RelatedListCount > 0)
            {
                MarkerContent += '<li><a href="#tab-relatedlist-' + obj.pTp.ContentKey + '">Related List</a></li>';
            }
            MarkerContent += "</ul>";
            
            //Information Tab
            MarkerContent += '<div id="tab-info-' + obj.pTp.ContentKey + '">';
            
                //Put Picklist Field Information 
                if (obj.pTp.PicklistFieldLabel != "" && obj.pTp.PicklistFieldLabel != undefined)
                {
                    MarkerContent += '<div id="MarkerPickListInfo">';
                    MarkerContent += '<b>Legend Information</b>';
                    MarkerContent += '<table>';
                    MarkerContent += '<tr>';
                    MarkerContent += '<td><b>' + obj.pTp.PicklistFieldLabel + ':</b></td>';
                    MarkerContent += '<td>' + obj.pTp.PicklistFieldValue + '</td>';
                    MarkerContent += '</tr>';
                    MarkerContent += '</table>';
                    MarkerContent += '</div>';
                }
            
            
                //Tool Tips
                MarkerContent += '<div id="MarkerToolTips">';
                MarkerContent += '<table>';                
                
                if (obj.pTp.ToolTip2L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip2L,obj.pTp.ToolTip2V); }
                if (obj.pTp.ToolTip3L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip3L,obj.pTp.ToolTip3V); }
                if (obj.pTp.ToolTip4L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip4L,obj.pTp.ToolTip4V); }
                if (obj.pTp.ToolTip5L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip5L,obj.pTp.ToolTip5V); }
                if (obj.pTp.ToolTip6L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip6L,obj.pTp.ToolTip6V); }
                if (obj.pTp.ToolTip7L != undefined) { MarkerContent += AddToolTipToMarkerContent(obj.pTp.ToolTip7L,obj.pTp.ToolTip7V); }
                
                MarkerContent += '</table>';
                MarkerContent += '</div>';
            MarkerContent += '</div>'; //End Information Tab
            
            //Actions Tab
            MarkerContent += '<div id="tab-actions-' + obj.pTp.ContentKey + '">';
                MarkerContent += '<table style="text-align:center;vertical-align:middle;">';
                    MarkerContent += '<tr>';                        
                    MarkerContent += '<td style="width:33%;"><a class="button1-white" style="width:100px;" id="AddToTrip-' + obj.pTp.ContentKey + '">Add to Trip</a></td>';                        
                    MarkerContent += '<td style="width:33%;"><a class="button1-white" style="width:100px;" id="SetProxCenter-' + obj.pTp.ContentKey+ '">Set Proximity Center</a></td>';
                    MarkerContent += '<td style="width:33%;"><a class="button1-white" style="width:100px;" id="RemoveMarker-' + obj.pTp.ContentKey+ '">Remove Marker</a></td>';
                    MarkerContent += '</tr>';
                    MarkerContent += '<tr style="height:5px;"><td></td></tr>';
                    
                    if (ProcessedSavedQueries[obj.SavedQryId].SupportsActivities)
                    {
                        MarkerContent += '<tr>';
                        MarkerContent += '<td style="width:33%;"><a class="button1-white" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=log_call&id=' + obj.pTp.RecordId + '">Log a Call</a></td>';
                        MarkerContent += '<td style="width:33%;"><a class="button1-white" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_task&id=' + obj.pTp.RecordId + '">New Task</a></td>';
                        MarkerContent += '<td style="width:33%;"><a class="button1-white" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_event&id=' + obj.pTp.RecordId + '">New Event</a></td>';
                        MarkerContent += '</tr>';
                    } 
                MarkerContent += '</table>';
            MarkerContent += '</div>'; //End Acitons Tab
            
            
            if (obj.pTp.RelatedListCount > 0)
            {
                MarkerContent += '<div id="tab-relatedlist-' + obj.pTp.ContentKey + '">';
                    MarkerContent += '<div id="ajax-' + obj.pTp.ContentKey + '"></div>';
                MarkerContent += '</div>'; //End Related List Tab               
            }
                
            MarkerContent += '</div>'; //End Tabs            
            
            return MarkerContent;
            
            
             //Discard For Now
            //MarkerContent += '<a id="Report-' + obj.pTp.ContentKey + '">Report</a>';
            
       }*/
       
       
       
       
       function AddToolTipToMarkerContent(pLabel,pValue)
       {
            var out = '';
            if (pLabel != "")
            {
                out += '<tr>';
                out += '<td><b>' + pLabel + ':</b></td>';
                out += '<td>' + pValue + '</td>';
                out += '</tr>';
            }
            return out;
       }
        
            
        function UpdateAddToCampaignButton()
        {
            Debug("Running UpdateAddToCampaignButton");
        
            var showButton = false;
            $.each(VisibleQueries, function(index, value) {
                
                
                //DisplayPropertiesOfObject(ProcessedSavedQueries[value],0);
                
                
                
                //make sure this query has been processed
                if (ProcessedSavedQueries[value] != null) 
                {
                    if (ProcessedSavedQueries[value].BaseObject == 'Contact' || ProcessedSavedQueries[value].BaseObject == 'Lead')
                    {
                        showButton = true;
                    }
                }
            });
            
            if (showButton) { $('#AddToCampaignButton').show(400); }
            else { $('#AddToCampaignButton').hide(400); }
        }
        
        function AddVisibleToCampaign()
        {
            if (VisibleQueries.length > 0)
            {
                        
                //window.setTimeout(function(){ CreatePopupWindow('LoadingPopup',300); }, 0);
                
                //Pause while loading window opens
                //window.setTimeout(function(){  StartExport(); }, 100);
            
                //start building lists of valid contact/lead ids to add to a campaign
                var contactIds = [];
                var leadIds = [];
            
                //loop through all visible queries
                $.each(VisibleQueries, function(index, value) {
                
                    //make sure this query has been processed
                    if (ProcessedSavedQueries[value] != null) 
                    {
                        //loop through the visible markers for this query
                        $.each(ProcessedSavedQueries[value].VisibleMarkersArray, function(index, value) {
                            if (value.pTp.RecordId.substring(0, 3) == '003')    //contact
                            {
                                contactIds.push(value.pTp.RecordId);
                            }
                            else if (value.pTp.RecordId.substring(0, 3) == '00Q')   //lead
                            {
                                leadIds.push(value.pTp.RecordId);
                            }
                        });
                    }
                });
                
                //make sure we got some valid ids
                if (contactIds.length > 0 || leadIds.length > 0)
                {       
                    /*          
                    jQuery.colorbox({
                        width: "700px",
                        height: "390px",
                        html: "<iframe name='addtocampaignframe' frameborder='0' class='cboxIframe'></iframe>"
                    });
                    */
                    
                    var $addtocampaignform = $("<form id='massaddtocampaignform' method='POST' action='/apex/MassAddToCampaign' target='massaddwindow' onsubmit=\"window.open('', this.target, 'width=700,height=300');return true;\"><input type='hidden' id='contactrecords' name='cr' /><input type='hidden' id='leadrecords' name='lr' /></form>");
                    $addtocampaignform.find('#contactrecords').val(JSON.stringify(contactIds));
                    $addtocampaignform.find('#leadrecords').val(JSON.stringify(leadIds));
                    $addtocampaignform.appendTo($('body')[0]).submit().remove();
                }
                else
                {
                    alert("No visible contacts or leads!");
                }
            }
            else
            {
                alert("No Plotted Queries!");
            }
        }
  // JavaScript Document

var MaxExportSize;
var MaxQuerySize = 2000;


function StartUpJS()
{
    
    //nokia.Settings.set( "authenticationToken", "b29a9c22a00246767669315caa0c462a171cbdf320a31eec");
    

    var mapContainer = document.getElementById("mapdiv");
// Create a map inside the map container DOM node
 map = new nokia.maps.map.Display(mapContainer, {
    // initial center and zoom level of the map
    center: [37.5740108, -98.4801102],
    zoomLevel: 4,
    copyrightAlignment: 'topright',
    components: [
        
        // ZoomBar provides a UI to zoom the map in & out
        //new nokia.maps.map.component.ZoomBar(), 
        // We add the behavior component to allow panning / zooming of the map
        new nokia.maps.map.component.Behavior(),
        // Creates UI to easily switch between street map satellite and terrain mapview modes
        //new nokia.maps.map.component.TypeSelector(),
        // Creates a toggle button to show/hide traffic information on the map
        //new nokia.maps.map.component.Traffic(),
        // Creates a toggle button to show/hide public transport lines on the map
        //new nokia.maps.map.component.PublicTransport(),
        // Creates a toggle button to enable the distance measurement tool
        new nokia.maps.map.component.DistanceMeasurement(),
        // Shows a min-map in the bottom right corner of the map
        new nokia.maps.map.component.Overview(),
        /* Shows a scale bar in the bottom right corner of the map depicting
         * ratio of a distance on the map to the corresponding distance in the real world
         * in either kilometers or miles
         */ 
        //new nokia.maps.map.component.ScaleBar(),
        /* Positioning will show a set "map to my GPS position" UI button
         * Note: this component will only be visible if W3C geolocation API
         * is supported by the browser and if you agree to share your location.
         * If you location can not be found the positioning button will reset
         * itself to its initial state
         */
        new nokia.maps.positioning.component.Positioning()
    ]
});
    
    document.getElementById("mapdiv").style.height =(screen.height-320) + "px";
    document.getElementById("sidebar").style.height =(screen.height-331) + "px";
    document.getElementById("sidebar-content").style.height =(screen.height-331) + "px";
    document.getElementById("left-shadow").style.height =(screen.height-320) + "px";
    document.getElementById("right-shadow").style.height =(screen.height-320) + "px";
    document.getElementById("bodyTable").style.height =(screen.height-285) + "px";
    document.getElementById("Slider-PlottedSavedQueries").style.height =(screen.height-415) + "px";
    document.getElementById("SQTree").style.height =(screen.height-416) + "px";
    document.getElementById("tabs-nav").style.height =(screen.height-330) + "px";
    document.getElementById("tab-queries").style.height =(screen.height-367) + "px"; 
    document.getElementById("tab-directions").style.height =(screen.height-367) + "px"; 
    //document.getElementById("tab-legend").style.height =(screen.height-367) + "px";
    document.getElementById("DirectionsInput").style.maxHeight =(screen.height-465) + "px";
    //document.getElementById("DirectionsOutput").style.maxHeight =(screen.height-460) + "px";
      document.getElementById("DirectionsOutput").style.maxHeight =(screen.height-480) + "px";    
    
    //map.components.add(new nokia.maps.map.component.Overview());
    //map.components.add(new nokia.maps.map.component.Behavior());
    //map.components.add(ZoomBar);
    map.components.add(ViewControl);
    //map.components.add(ZoomRectangle);
    map.components.add(ScaleBarComponent);
    map.components.add(InfoBubbles);

    nokia.maps.Config.setDefault("secureConnection", "prefer");
    
    MoveMapComponentsRight();
    
    $GeoCurrentRequestElement = $('#GeoCurrentRequest');
    $GeoSentRequestElement = $('#GeoSentRequest');
    $GeoProcessedRequestElement = $('#GeoProcessedRequest');
    $GeoRequestPendingElement = $('#GeoRequestPending');
    
    UpdateGeoCoderStatus();
    
    //---- PATCH                
    //overwrite broken method with new one
    map.getBestZoomLevel = function (bBoxes) {
            var that = this,
                minZL = that.minZoomLevel,
                maxZL = that.maxZoomLevel,
                bestLevel = maxZL,
                currLevel = that.zoomLevel,
                level,
                topLeft,
                bottomRight,
                padding = that.padding,
                width = that.width,
                height = that.height,
                i = bBoxes.length,
                tmp,
                bBox,
                pixelProjection = that.baseMapType.pixelProjections[maxZL],
                util = nokia.maps.util,
                max = Math.max,
                min = Math.min,
                log = Math.log,
                ceil = Math.ceil,
                LN2 = Math.LN2;
                
            isNaN(i) && util._throwIllegalArgument();
            while (i-- && bestLevel) {
                level = currLevel;
                bBox = bBoxes[i];
                topLeft = pixelProjection.geoToPixel(bBox.topLeft);
                bottomRight = pixelProjection.geoToPixel(bBox.bottomRight);

                // Special case where the bBox size is 0 × 0 pixel
                if (topLeft.equals(bottomRight)) {
                    bottomRight.x++;
                    bottomRight.y++;
                }

                level = maxZL - ceil(max(
                    log(topLeft.x > bottomRight.x ? pixelProjection.w - topLeft.x + bottomRight.x  : bottomRight.x - topLeft.x) / LN2 -
                            log(width - padding.left - padding.right) / LN2,
                    log(bottomRight.y - topLeft.y) / LN2 -
                            log(height - padding.top - padding.bottom) / LN2
                ));
                if (level < bestLevel) {
                    bestLevel = level;
                }
            }
            return max(bestLevel, minZL);
        }
    // ------ END PATCH
    
    
           
    /*Initialize Tabs*/
    $('#tabs-nav').tabs({remote:true}); 
    $('#tabs-SavedQry').tabs({remote:true}); 
    
    
    
    $( "#sortable" ).sortable({
        placeholder: 'ui-state-placeholder',
        cursor: 'move',
        update: function(ev,ui) {
            OrderNumbersOnWapPoints();
        }
    });

    
    $('#TreeTab').click(function(){
        SlideToTree();
    });
    
    $('#PlottedQueriesTab').click(function(){
        SlideToPlottedQueries();
    });  
    
    $('#DirectionsInputTab').click(function(){
        SlideToLocations();
    });
    
    $('#DirectionsOutputTab').click(function(){
        SlideToDirectionsOutput();
    });  
    
    $('#DirectionsOptionsTab').click(function(){
        SlideToDirectionsOptions();
    });

    $('#SQTree ul').children().css('font-weight', 'bold').find('li').css('font-weight','normal');          
                
     $.ajaxSetup ({  
        cache: false  
    });

    $('#AddressesNotFoundButton').click(function() {
        ShowAddressNotFoundPopup();
    });
    $('#ExportButton').click(function() {
        CreatePopupWindow("ExportPopup",600);
    });
    $('#ZoomToFitButton').click(function() {
        ZoomToFit();
    });
    $('#ShowTrafficButton').click(function() {
        ToggleTrafficOverlay();
    });
    $('#SetAsHomeButton').click(function() {
        SetDefaultMapLocation();
    });
    $('#ShowDebugWindowButton').click(function() {
        CreatePopupWindow("DebugWindowPopup",600);
    });
    
    /*Map View Buttons*/
    $('#NormalMapView').click(function() {
        map.overlays.remove(map.LABELS);
        map.set("baseMapType", map.NORMAL);
        $('#MapViewSpan').html("Normal View");
        CloseMenuIfOpen('MapViewPopup');
    });
    
    $('#SatelliteMapView').click(function() {
        map.overlays.remove(map.LABELS);
        map.set("baseMapType", map.SATELLITE);
        $('#MapViewSpan').html("Satellite View");
        CloseMenuIfOpen('MapViewPopup');
    });
    
    $('#TerrainMapView').click(function() {
        //map.overlays.remove(map.LABELS);
        map.set("baseMapType", map.TERRAIN);
        map.overlays.add(map.LABELS);
        $('#MapViewSpan').html("Terrain View");
        CloseMenuIfOpen('MapViewPopup');
    });
    
    
    
    /*Initialize Notification Container*/
    $("#container").notify({
        speed: 200,
        expires: false
    });
    
    
    /*Initialize Sidebar Actions*/
    $('#sidebar-button').click(function()
        {
            $('#sidebar').animate(
                {width:'toggle'}, 
                100, 
                function() 
                    {
                        // Animation complete.
                        if (this.style.display == "none")
                        {
                            //Hidden
                            MoveMapComponentsLeft();
                        }
                        else
                        {
                            //Displayed
                            MoveMapComponentsRight();
                        }
                    }
            );
        }
    );
    
    //Get Base Object for Sub Menu
    $.getJSON("/apex/MATreeAJAXResources","action=populate_base_objects",function(json)
    { 
        if(json.success)
        {
            //http://www.mennovanslooten.nl/blog/post/62
            
            BaseObjectsForSubMenu = [];
            $.each(json.records, function (i, record) {
            
            	//remove namespace
            	removeNamespace('{!namespace}', record);
            
                var SubMenuItem = new Object();
                SubMenuItem["label"] = record.Name__c;
                SubMenuItem["action"] =  (function(value) {
                
                    return function(obj) {
                        launchQueryEditor(
                            '/apex/EditQuery?b=::baseObjectId::&f=::folderId::&ft=::folderType::'
                                .replace('::baseObjectId::', value.Id)
                                .replace('::folderId::', obj.attr('Id'))
                                .replace('::folderType::', obj.attr('NodeType'))
                        );
                    }
                })(record);
                
                BaseObjectsForSubMenu.push(SubMenuItem);
            });
            
            //if we dont have any base objects, display a message for the user
            if (BaseObjectsForSubMenu.length == 0)
            {
                BaseObjectsForSubMenu = [{ label: 'No base objects available' }];
            }
        }
        else
        {
            //NotifyError("Error Populating Context Menu:Base Object List",json.error);
            Debug("Error Populating Context Menu:Base Object List" + json.error);
            BaseObjectsForSubMenu = [{ label: 'Unknown Error' }];
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Populating Context Menu:Base Object List</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Populating Context Menu:Base Object List",textStatus + " : " + errorThrown); 
    });
    
    $.getJSON("/apex/MAUserAJAXResources","action=get_user_prefs&id=" + UserId,function(json)
    { 
        if(json.success)
        {
            var record = removeNamespace('{!namespace}', json.record);
            
            Debug("User Query Result: " + record);
            
            IsCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            
            
            if (record.MADefaultLatitude__c != null && record.MADefaultLongitude__c != null)
            {
                Debug("Setting Center Point");
                CenterLat = parseFloat(record.MADefaultLatitude__c);
                CenterLong = parseFloat(record.MADefaultLongitude__c);
                
                map.setCenter(new nokia.maps.geo.Coordinate(parseFloat(record.MADefaultLatitude__c),parseFloat(record.MADefaultLongitude__c)));
            }
            
            if (record.MAMaxQuerySize__c != null)
            {
                Debug("Setting Max Query Size");
                MaxQuerySize = parseInt(record.MAMaxQuerySize__c);
                
                if (MaxQuerySize > 10001)
                {
                    MaxQuerySize = 10000;    
                }
            }
            else
            {
                MaxQuerySize = 2000;
            }
            
            
            if (record.MADefaultZoomLevel__c != null)
            {
                Debug("Setting Default Zoom Level");
                DefaultZoomLevel = parseInt(record.MADefaultZoomLevel__c);
                map.setZoomLevel(parseInt(record.MADefaultZoomLevel__c));
            }
            
            if (record.AllowMapAnythingExports__c == 'false')
            {
                Debug("User Is Not Allowed to Export");
                //document.getElementById("ExportTab").className="tabs-container tabs-hide";
                $('#tabs-nav').tabs( "remove" , 2 );
                MaxExportSize = 0;
            }
            else
            {
                Debug("user is Allowed to Export");
                if (record.MAMaxExportSize__c == null)
                {
                    Debug("MAMaxExportSize__c is null");
                    MaxExportSize = 1000000;
                }
                else
                {
                    Debug("MAMaxExportSize__c is " + parseInt(record.MAMaxExportSize__c));
                    MaxExportSize = parseInt(record.MAMaxExportSize__c);
                }
                
            }
            
            if (record.DefaultProximityRadius__c == null)
            {
                document.getElementById("ProximityRadius").value = "50";
            }
            else
            {
                document.getElementById("ProximityRadius").value = record.DefaultProximityRadius__c;
            }
            
            if (record.PreferredTypeOfMeasurement__c == null)
            {
                ScaleBarComponent.set("showImperialUnits", true);
                document.getElementById("ProximityRadiusMeasurementType").value = "MILES";
            }
            else
            {
                var MesType = record.PreferredTypeOfMeasurement__c;
                
                if (MesType == "Miles" || MesType == "Feet" || MesType == "Yards")
                {
                    ScaleBarComponent.set("showImperialUnits", true);
                }
                else
                {
                    ScaleBarComponent.set("showImperialUnits", false);
                }
                
                document.getElementById("ProximityRadiusMeasurementType").value = MesType.toUpperCase();
            }
            
            if(record.MapAnythingSettings__c != null && record.MapAnythingSettings__c !== "")
            {
                try 
                { 
                    var MASettingsObj = JSON.parse(record.MapAnythingSettings__c);
                    
                    //extend our user settings object with these settings (will be used later)
                    $.extend(userSettings, MASettingsObj);
                    
                    if(MASettingsObj.PlotOnLoadQueries)
                    {
                        $.each(MASettingsObj.PlotOnLoadQueries, function(index, id)
                        {
                            $("#" + id).addClass('jstree-star');
                            PlotSavedQuery(id,false);
                        });
                    }
                    
                    if (typeof MASettingsObj.MapItProximityOn != 'undefined' && MASettingsObj.MapItProximityOn)
                    {
                        $('.mapit-proximity-on').attr('checked', 'checked');
                    }
                }
                catch (err) { }
            }
            
            OnUserLoadEventCompletd = true;
        }
        else
        {
            Debug("Error Querying User, " + json.error);
            DisplayPropertiesOfObject(json.error,0);
            HideLoadingDialog();
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Querying User</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Querying User",textStatus + " : " + errorThrown); 
    });
    
    
    
    DOMNode = nokia.maps.dom.EventTarget(map);
                
                
    CallBackFunction = function(oList ,method,element,idx )
        { 
            
            if (element["_type"] != "circle")
            {
        
                //Debug("method: " + method);
                if (method=="add")
                {
                    HideLoadingDialog();
                }
                else if (method=="remove")
                {
                    HideLoadingDialog();
                }
            }
        };
    
    map.objects.addObserver(CallBackFunction);
    
    //accept default queries (to be used later)        
    try 
    { 
        if(($('[id$="serializedDefaultQueries"]').val() !== null) && ($('[id$="serializedDefaultQueries"]').val() !== ""))
        {
            defaultQueries = JSON.parse($('[id$="serializedDefaultQueries"]').val());
        }
        
        if(defaultQueries.length > 0 && defaultQueries !== []) 
        {
            $.each(defaultQueries, function(intIndex, aElement)
            {
                if(aElement.type==="Record")
                {
                    $.getJSON("/apex/MASavedQueryAJAXResources"+pageSuffix+"?action=plot_default_query&BaseObjectId=" + aElement.baseObjectId + "&RecordId=" + aElement.id + "&TooltipFields=" + JSON.stringify(aElement.tooltipFields),function(json)
                    { 
                        if(json.success)
                        {                    
                            Debug("WholeQry: " + json.WholeQry); 
    
                            window.setTimeout(function(){ SlideToPlottedQueries(); }, 0);
                            
                            //Add Default Query to Plotted Queries Table
                            var HTMLToAppend = '';
        
                            HTMLToAppend += '<tr id="Row_Default" class="PlottedRowUnit"><td>'; //Start of Row
                            HTMLToAppend += '<div id="PrimaryDIV" style="margin:0;padding:0;">'
                            
                            //Start Information Table
                            HTMLToAppend += '<table style="width:270px;">'
    
                            HTMLToAppend += '<td rowspan="2" style="width:16px;"><div style="padding:0px 0px 0px 0px;" id="Default"><img src="' + LoadingGIFUrl +'"/></div></td>';         
                            
                            HTMLToAppend += '<td colspan="2"><b>Map It - ' + json.BaseObject.Name + ' - <a href ="/' + aElement.id + '" target="_blank">' + json.Markers[0].Name + '</a></b></td>';
                            
                            //Pass color in and set at some point
                            HTMLToAppend += '<td rowspan="2" style="width:12px;text-align:left;"><div style="padding:0px 0px 0px 0px; width: 10px; height: 10px; background-color:#FFFFFF;"></div></td>';
                                                    
                            HTMLToAppend += '</tr><tr id="Row_Default">';
                            HTMLToAppend += '<td style="color:gray;">' + json.BaseObject.Name + '</td>';
                            HTMLToAppend += '<td style="text-align:left;"><span id="Default_Stats" style="display:none;">';
                            HTMLToAppend += '<table cellpadding="2" cellspacing="0" align="left"><tr>';
                            HTMLToAppend += '<td><span id="Default_Count"></span></td>';
                            HTMLToAppend += '<td>of</td>';
                            HTMLToAppend += '<td><span id="Default_Total"></span></td>';
                            HTMLToAppend += '</tr></table></span></td>';
                            
                            HTMLToAppend += "</tr>";
                            HTMLToAppend += '</table>' //End Information Table
                               
                            HTMLToAppend += '</div>'
                            HTMLToAppend += '</td></tr>'; //End of Row
                            
                            $('#PlottedQueriesTable').append(HTMLToAppend);
    
                            var SavedQryID = 'Default';
                            ProcessedSavedQueries[SavedQryID] = new ProcessedSavedQry(SavedQryID);
                            ProcessedSavedQueries[SavedQryID].BaseObject = json.BaseObject;
                            //ProcessedSavedQueries[SavedQryID].SupportsActivities = result.supportsActivities;
                            ProcessedSavedQueries[SavedQryID].SetExpectedMarkersCount(json.ResultsSize);
                            
                            var records = json.Markers;
                            var ToolTipInfoList = json.ToolTipInfoList;
    
                            Debug("ToolTipInfoList.length " + ToolTipInfoList.length );
    
                            /*
                            if(ToolTipInfoList.length != 7)
                            {
                                Debug("ToolTipInfoList is smaller than 7!");
                                return;
                            }
                            */
                            
                            //remove namespace
                            removeNamespace('{!namespace}', json.BaseObject);
    
                            var ToolTip1      = new ToolTip(ToolTipInfoList[0]);
                            var ToolTip2      = ((ToolTipInfoList[1] != null) ? (new ToolTip(ToolTipInfoList[1])) : null);
                            var ToolTip3      = ((ToolTipInfoList[2] != null) ? (new ToolTip(ToolTipInfoList[2])) : null);
                            var ToolTip4      = ((ToolTipInfoList[3] != null) ? (new ToolTip(ToolTipInfoList[3])) : null);
                            var ToolTip5      = ((ToolTipInfoList[4] != null) ? (new ToolTip(ToolTipInfoList[4])) : null);
                            var ToolTip6      = ((ToolTipInfoList[5] != null) ? (new ToolTip(ToolTipInfoList[5])) : null);
                            var ToolTip7      = ((ToolTipInfoList[6] != null) ? (new ToolTip(ToolTipInfoList[6])) : null);
                            var aStreet       = json.BaseObject.Street__c;
                            var aCity         = json.BaseObject.City__c;
                            var aState        = json.BaseObject.State__c;
                            var aZip          = json.BaseObject.PostalCode__c;
                            var aCountry      = json.BaseObject.Country__c;
                            var BaseObject    = json.BaseObject.Name;
                            var Latitude      = json.BaseObject.Latitude__c;
                            var Longitude     = json.BaseObject.Longitude__c;
                            var CleanCity       = json.BaseObject.CleanCity__c;
                            var CleanStreet     = json.BaseObject.CleanStreet__c;
                            var CleanState      = json.BaseObject.CleanState__c;
                            var CleanCounty     = json.BaseObject.CleanCounty__c;
                            var CleanCountry    = json.BaseObject.CleanCountry__c;
                            var CleanPostalCode = json.BaseObject.CleanPostalCode__c;
                            var CleanDistrict   = json.BaseObject.CleanDistrict__c;
                            var SavedQryID        = 'Default'
                            ProcessedSavedQueries[SavedQryID].SupportsActivities = json.supportsActivities;
                            ProcessedSavedQueries[SavedQryID].SupportsChatter = json.supportsChatter;
                            ProcessedSavedQueries[SavedQryID].ToolTip1Label  = ToolTip1.FieldLabel;
                            if(ToolTip2 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip2Label  = ToolTip2.FieldLabel;
                            }
                            if(ToolTip3 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip3Label  = ToolTip3.FieldLabel;
                            }
                            if(ToolTip4 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip4Label  = ToolTip4.FieldLabel;
                            }
                            if(ToolTip5 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip5Label  = ToolTip5.FieldLabel;
                            }
                            if(ToolTip6 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip6Label  = ToolTip6.FieldLabel;
                            }
                            if(ToolTip7 != null)
                            {
                                ProcessedSavedQueries[SavedQryID].ToolTip7Label  = ToolTip7.FieldLabel;
                            }
                            
                            Debug("11BaseObject: " + BaseObject);        
                            if (Longitude.indexOf(".") > -1)
                            {
                                BaseObject = json.NewBaseObject;
                            } 
                            Debug("22BaseObject: " + BaseObject);
                            
                            var chunk = 100;
                            var index = 0;
                            
                            function doSavedQueryChunk()
                            {
                                var cnt = chunk;
                                while (cnt-- && index < ProcessedSavedQueries[SavedQryID].ExpectedMarkersCount) 
                                {
                                    var record = records[index];                        
                                    //Debug('Record Name: ' + record.Name);                        
                                                            
                                    ToolTip1.PopulateValues(record, ToolTipInfoList[0].Accessible);
                                    if(ToolTip2 != null)
                                    {
                                        ToolTip2.PopulateValues(record, ToolTipInfoList[1].Accessible);
                                    }
                                    if(ToolTip3 != null)
                                    {
                                        ToolTip3.PopulateValues(record, ToolTipInfoList[2].Accessible);
                                    }
                                    if(ToolTip4 != null)
                                    {
                                        ToolTip4.PopulateValues(record, ToolTipInfoList[3].Accessible);
                                    }
                                    if(ToolTip5 != null)
                                    {
                                        ToolTip5.PopulateValues(record, ToolTipInfoList[4].Accessible);
                                    }
                                    if(ToolTip6 != null)
                                    {
                                        ToolTip6.PopulateValues(record, ToolTipInfoList[5].Accessible);
                                    }
                                    if(ToolTip7 != null)
                                    {
                                        ToolTip7.PopulateValues(record, ToolTipInfoList[6].Accessible);
                                    }
                                    //var aStreetResult   = GetAddressFieldResults(record,aStreet).replace(/\n\r?/g, '<br />');
                                    var aStreetResult   = GetAddressFieldResults(record,aStreet);
                                    var aCityResult     = GetAddressFieldResults(record,aCity);
                                    var aStateResult    = GetAddressFieldResults(record,aState);
                                    var aZipResult      = GetAddressFieldResults(record,aZip);
                                    var aCountryResult  = GetAddressFieldResults(record,aCountry);                        
                                                
                                   
                                    /////////////////////////////////////
                                    var text="";    
                                    
                                    var MarkerAddress = "";
                                    var FormatedMarkerAddress = "";
                                                
                                    if (aCountryResult == "")
                                    {
                                        FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult;
                                    }
                                    else
                                    {
                                        FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult + "<br />" + aCountryResult;
                                    }
                                    
                                    if (aCountryResult == "")
                                    {
                                        MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult;
                                    }
                                    else
                                    {
                                        MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult + "," + aCountryResult;
                                    }
                                    
                                    var ContentKey = SavedQryID + '-' + record.Id;                       
                                    
                                    
                                    var pTp = new Object();
                                    //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
                                    pTp.MarkerAddress   = MarkerAddress;
                                    pTp.FormatedMarkerAddress = FormatedMarkerAddress;
                                    pTp.MarkerStreet    = aStreetResult;
                                    pTp.MarkerCity      = aCityResult;
                                    pTp.MarkerState     = aStateResult;
                                    pTp.MarkerZip       = aZipResult;
                                    pTp.MarkerCountry   = aCountryResult;                                    
                                    
                                    if(ToolTip2 != null)
                                    {
                                        pTp.ToolTip2L       = ToolTip2.FieldLabel;
                                    }
                                    if(ToolTip3 != null)
                                    {
                                        pTp.ToolTip3L       = ToolTip3.FieldLabel;
                                    }
                                    if(ToolTip4 != null)
                                    {
                                        pTp.ToolTip4L       = ToolTip4.FieldLabel;
                                    }
                                    if(ToolTip5 != null)
                                    {
                                        pTp.ToolTip5L       = ToolTip5.FieldLabel;
                                    }
                                    if(ToolTip6 != null)
                                    {
                                        pTp.ToolTip6L       = ToolTip6.FieldLabel;
                                    }
                                    if(ToolTip7 != null)
                                    {
                                        pTp.ToolTip7L       = ToolTip7.FieldLabel;
                                    }
                                    
                                    pTp.ToolTip1V       = ToolTip1.Value;                                    
                                    if(ToolTip2 != null)
                                    {
                                        pTp.ToolTip2V       = ToolTip2.Value;
                                    }
                                    if(ToolTip3 != null)
                                    {
                                        pTp.ToolTip3V       = ToolTip3.Value;
                                    }
                                    if(ToolTip4 != null)
                                    {
                                        pTp.ToolTip4V       = ToolTip4.Value;
                                    }
                                    if(ToolTip5 != null)
                                    {
                                        pTp.ToolTip5V       = ToolTip5.Value;
                                    }
                                    if(ToolTip6 != null)
                                    {
                                        pTp.ToolTip6V       = ToolTip6.Value;
                                    }
                                    if(ToolTip7 != null)
                                    {
                                        pTp.ToolTip7V       = ToolTip7.Value;
                                    }                                    
                                    
                                    pTp.sObjectId       = record.Id;
                                    pTp.Latitude        = GetAddressFieldResults(record,Latitude); //record.Latitude;
                                    pTp.Longitude       = GetAddressFieldResults(record,Longitude); //record.Longitude
                                    pTp.LatitudeField   = Latitude;
                                    pTp.LongitudeField  = Longitude;
                                    pTp.BaseObject      = BaseObject;
                                    pTp.BatchAmount     = 100;
                                    pTp.queryName       = 'Default';
                                    pTp.QryId           = SavedQryID;
                                    pTp.IconColor       = aElement.markerColor;
                                    
                                    pTp.CleanCity       = CleanCity;
                                    pTp.CleanStreet     = CleanStreet;
                                    pTp.CleanCounty     = CleanCounty;
                                    pTp.CleanDistrict   = CleanDistrict;
                                    pTp.CleanState      = CleanState;   
                                    pTp.CleanPostalCode = CleanPostalCode;
                                    pTp.CleanCountry    = CleanCountry;
                                    //pTp.CleanQuality    = CleanQuality;
                                    //pTp.CleanSimilarity = CleanSimilarity;
                                    pTp.MarkerIconText  = text;
                                    pTp.ContentKey      = ContentKey;
                                    pTp.RecordId        = record.Id;
                                    //pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
                                    //pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
                                    //pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
                                    //pTp.PicklistFieldValue = PicklistFieldValue;
                                    //pTp.RelatedListCount = RelatedListCount;
                                    //pTp.PicklistFieldValueEncoded = PicklistFieldValueEncoded;
                                            
                                    if (Longitude.indexOf(".") > -1)
                                    {
                                        if (record[Longitude.split(".")[0]] != null)
                                        {
                                            pTp.sObjectId = record[Longitude.split(".")[0]]["Id"];
                                            
                                            if (Longitude != null)       { pTp.LongitudeField   = Longitude.split(".")[1]; }
                                            if (Latitude != null)        { pTp.LatitudeField    = Latitude.split(".")[1]; }
                                            
                                            
                                            if (CleanCity != null)       { pTp.CleanCity     = CleanCity.split(".")[1]; }
                                            if (CleanStreet != null)     { pTp.CleanStreet   = CleanStreet.split(".")[1]; }
                                            if (CleanCounty != null)     { pTp.CleanCounty   = CleanCounty.split(".")[1]; }
                                            if (CleanDistrict != null)   { pTp.CleanDistrict = CleanDistrict.split(".")[1]; }
                                            if (CleanState != null)      { pTp.CleanState    = CleanState.split(".")[1]; }
                                            if (CleanPostalCode != null) { pTp.CleanPostalCode = CleanPostalCode.split(".")[1]; }
                                            if (CleanCountry != null)    { pTp.CleanCountry  = CleanCountry.split(".")[1]; }
                                            //if (CleanQuality != null)    { pTp.CleanQuality  = CleanQuality.split(".")[1]; }
                                            //if (CleanSimilarity != null) { pTp.CleanSimilarity = CleanSimilarity.split(".")[1]; }
    
                                        }
                                        else
                                        {
                                            //pTp.sObjectId = null;
                                        }
                                    }            
                                    
                                    var rLatitude = GetAddressFieldResults(record,Latitude);
                                    var rLongitude = GetAddressFieldResults(record,Longitude);
                                   
                                    /*
                                    if (pTp.ToolTip1V == "VERNON & EVELYN DORSEY")
                                    {
                                        Debug("Account Found");
                                        Debug("aStreetResult: " + aStreetResult);
                                        Debug("aCityResult: " + aCityResult);
                                        Debug("aStateResult: " + aStateResult);
                                        Debug("aZipResult: " + aZipResult);
                                        Debug("aCountryResult: " + aCountryResult);
                                    }
                                    */
                                    
                                    //Does Record have a Lat/Long?
                                    if (rLatitude == "" || rLongitude == "")
                                    {
                                        //Does Record have an Address?
                                        if (aStreetResult == "" && aCityResult == "" && aStateResult == "" && aZipResult == "" && aCountryResult == "")
                                        {
                                            AddToMissingAddressesTab(pTp,"Missing Address");
                                            //ProcessedSavedQueries[SavedQryID].ProcessedMarkersCount++;
                                        }
                                        else if (MarkerAddress.length < 3)
                                        {                                
                                            AddToMissingAddressesTab(pTp,"Missing Address");
                                            //ProcessedSavedQueries[SavedQryID].ProcessedMarkersCount++;
                                        }
                                        else
                                        {
                                            //Add to GeoCodeList
                                            AddressesToBeGeoCoded.push(pTp);
                                   
                                            if (GeoCurrentRequest < MaxRequestOut)
                                            {
                                                SendMarkerGeoCodeRequest(AddressesToBeGeoCoded.shift());
                                            }
                                            
                                            UpdateGeoCoderStatus();                                            
                                        }
    
                                    }
                                    else
                                    {                
                                        var marker = CreateMarkerFromPointToPoint(pTp);
                                        
                                        ProcessedSavedQueries[SavedQryID].AddMarker(marker);
                                        
                                        if (pc_Added)
                                        {
                                            var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(pTp.Latitude), parseFloat(pTp.Longitude));
                                            if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
                                            {
                                                ProcessedSavedQueries[SavedQryID].AddVisibleMarker(marker);
                                            }
                                        }
                                        else
                                        {
                                            ProcessedSavedQueries[SavedQryID].AddVisibleMarker(marker);
                                            //map.objects.add(marker);
                                            //ProcessedSavedQueries[SavedQryID].UpdateVisibleMarkersCount();    
                                        }                
                                    }   
    
    
                                    ++index;
                                }
    
                                ProcessedSavedQueries[SavedQryID].UpdateVisibleMarkersCount();
    
                                if (index < ProcessedSavedQueries[SavedQryID].ExpectedMarkersCount) 
                                {
                                    setTimeout(doSavedQueryChunk, 50);
                                }
                                else
                                {
                                    //Finished Running Array
                                    
                                    Debug("Running Finished Function");
                                    
                                    ProcessedSavedQueries[SavedQryID].SetProccessingStatus();                          
                                    ProcessedSavedQueries[SavedQryID].PlotVisibleMarkers();
                                    
                                    //Zoom to marker(s)
                                    /* this is handled by the SetProccessingStatus call
                                    var myContainer = new nokia.maps.map.Container();
                                    myContainer.objects.addAll(ProcessedSavedQueries[SavedQryID].VisibleMarkersArray);
                                    map.zoomTo(myContainer.getBoundingBox(),false,true);
                                    if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close
                                    */
                                    
                                    HideLoadingDialog(); 
                                }
                            }
                            
                            doSavedQueryChunk();
                        }
                        else
                        {
                            Debug("DefaultQuery Error: " + json.error);
                            NotifyError("Map It Error!", "Check Debug log and notify an Administrator."); 
                        }
                    });
                }
                else if(aElement.type==="Error")
                {
                    Debug("<b>Invalid parameters from Map It!!</b>");
                    Debug("id: " + aElement.id);
                    Debug("baseObjectId: " + aElement.baseObjectId);
                    Debug("tooltipField: " + aElement.tooltipField);
                    Debug("markerColor: " + aElement.markerColor);
                    
                    NotifyError("Map It Error!", "Check Debug log and notify an Administrator.");     
                }                
            });
        }
        else
        {
            //Debug("defaultQueries is null!");
            //NotifyError("Map It Error!", "Check Debug log and notify an Administrator."); 
        } 
    }
    catch (err) 
    {
        Debug("DefaultQuery Catch!");
        DisplayPropertiesOfObject(err,0);
        NotifyError("Map It Error!", "Check Debug log and notify an Administrator.");  
    }


           
}

function UpdateGeoCoderStatus()
{
    $GeoCurrentRequestElement.html(GeoCurrentRequest);
    $GeoSentRequestElement.html(GeoSentRequest);
    $GeoProcessedRequestElement.html(GeoProcessedRequest);
    $GeoRequestPendingElement.html(AddressesToBeGeoCoded.length);
}

// JavaScript Document
function ClearExport()
{
    if (confirm('You are about to delete all exports, do you which to continue?'))
    {
        DeleteExportsAF();
        //DeleteMAExports();
        //ChangeDivStatus("ExportStatus","Exports Deleted!");
    }           
}

function DoExport()
{
    if ($('#ExportName').val() == '')
    {
        alert("Please Enter an Export Name");
    }
    else
    {
        if (VisibleQueries.length > 0)
        {
            
            window.setTimeout(function(){ CreatePopupWindow('LoadingPopup',300); }, 0);
            
            //Pause while loading window opens
            window.setTimeout(function(){  StartExport(); }, 100);
            
        }
        else
        {
            alert("No Plotted Queries!");
        }
    }
    
}

function StartExport()
{
    Debug("VisibleQueries: " + VisibleQueries.length);
                
    var ExportName = $('#ExportName').val();    
    
    Debug("Export Name: " + ExportName);
    var ExportRows = new Array();
    
    var TotalExportSize = 1;
    
    $.each(VisibleQueries, function(index, value) { 
        if (ProcessedSavedQueries[value] != null)
        {
            //Enter Headers Row
            
            var ProcessedSavedQryObj = ProcessedSavedQueries[value];            
            
            var ExportHeaderRow = new Object();
            
            ExportHeaderRow.Tooltip1__c = ProcessedSavedQryObj.ToolTip1Label;
            ExportHeaderRow.Tooltip2__c = ProcessedSavedQryObj.ToolTip2Label;
            ExportHeaderRow.Tooltip3__c = ProcessedSavedQryObj.ToolTip3Label;
            ExportHeaderRow.Tooltip4__c = ProcessedSavedQryObj.ToolTip4Label;
            ExportHeaderRow.Tooltip5__c = ProcessedSavedQryObj.ToolTip5Label;
            ExportHeaderRow.Tooltip6__c = ProcessedSavedQryObj.ToolTip6Label;
            ExportHeaderRow.Tooltip7__c = ProcessedSavedQryObj.ToolTip7Label;          
            
            ExportRows.push(addNamespace('{!namespace}', ExportHeaderRow));
            
            $.each(ProcessedSavedQueries[value].VisibleMarkersArray, function(index, value) { 
                    
                if (TotalExportSize <= MaxExportSize)
                {               
                    var ExportRow = new Object();
                
                    ExportRow.SavedQueryName__c = value.pTp.queryName;
                    ExportRow.Street__c        = value.pTp.MarkerStreet
                    ExportRow.City__c          = value.pTp.MarkerCity
                    ExportRow.State__c         = value.pTp.MarkerState
                    ExportRow.Zip__c           = value.pTp.MarkerZip
                    ExportRow.Country__c       = value.pTp.MarkerCountry
                    
                    ExportRow.Latitude__c      = value.pTp.Latitude;
                    ExportRow.Longitude__c     = value.pTp.Longitude;
                    ExportRow.ObjectType__c    = value.pTp.BaseObject;
                    
                    //tooltips
                    for (var i = 1;i < 8;i++)
                    {
                    	var tooltipProperty = 'ToolTip' + i + 'V';
                    	var exportRowTooltipProperty = 'Tooltip' + i + '__c';
                    	ExportRow[exportRowTooltipProperty] = null;
                    	if (value.pTp[tooltipProperty])
                    	{
                    		ExportRow[exportRowTooltipProperty] = value.pTp[tooltipProperty].length > 255
                    			? value.pTp[tooltipProperty].substr(0, 252) + '...'
                    			: value.pTp[tooltipProperty];
                    	}
                    }
                    
                    ExportRows.push(addNamespace('{!namespace}', ExportRow));
                    
                    TotalExportSize++;
                }
                else
                {
                    Debug("Above MaxExportSize");   
                    return false;
                }
                
            });
        }
    
    });

    var MyJSObject = {
            action: 'export_all',
            ExportName: ExportName,
            ExportRows: ExportRows
    };
    
    $.ajax({
        url: 'MAExportAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                Debug("Done Creating Export!");
                ClosePopupWindow();
                PopulateMAExportsAF();  
            }
            else
            {
                NotifyError("Error Exporting!",obj.error);
                Debug("Error Exporting: " + obj.error);
            }
        }
    }); 
}

// JavaScript Document
function AddGeoCoderObservers()
{
    
    

    RoutingGeoCodeIsRunning = false;
    
    RoutingGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    var WayPoint = RoutingGeoCodeList.get(0);
                    
                    Debug("Found Results - " + WayPoint.Index + " Length: " + observedManager.getLocations().length);
                    
                    
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']")
                            .find('input')
                            .addClass('GoodGeocodeForWaypoint')
                            .val(FormattedAddress);
                        
                        //Debug("Address: " + SearchResult.location.address);
    
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                
                        WayPoint.Lat = Latitude;
                        WayPoint.Long = Longitude;
                        WayPoint.WayPointTitle = FormattedAddress;
                        WayPoint.Address = FormattedAddress;
                        
                        WayPointArray[WayPoint.Index] = WayPoint;
                        //WayPointArray.push(WayPoint);
                        
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                    }
                    else
                    {
                        HasRoutingErrors = true;
                        $( "#sortable" ).find("[index='" + WayPoint.Index + "']").find('input').addClass('BadGeocodeForWaypoint');
                        NotifyError("Error GeoCoding Address","There was an error geocoding the follow address: " + WayPoint.Address);
                    }
                    
                    RoutingGeoCodeList.removeAt(0);
                }
                else if(value == "started") 
                {
                    //g1StatusElement.innerHTML = "Processing (" + GeoCodeList1.getLength() + ")";
                }
                else if(value == "failed") 
                {
                    //g1StatusElement.innerHTML = "Failed";
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
    
    
     RoutingGeoCodeList.addObserver(
         function(oList,method,element,idx)
         {
             if (method=="add")
             {
                 //Start GeoCoding
                 if (!RoutingGeoCodeIsRunning)
                 {
                    RoutingGeoCodeIsRunning = true;
                    //g1StatusElement.innerHTML = "Starting";
                    RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
             }
             else if (method=="remove")
             {
                 RoutingGeoCoder.clear();
                 if (oList.getLength() > 0)
                 {
                     RoutingGeoCoder.geocode(GenerateSearchRequest(oList.get(0).Address));
                 }
                 else
                 {
                    RoutingGeoCodeIsRunning = false;
                    ProcessWayPoints();
                 }
             }
         }
     
     );
     
     ProximityGeoCoder.addObserver("state",
        function(observedManager, key, value) 
        {
            try
            {
                if(value == "finished") 
                {
                    Debug("Finished proximity GeoCode!");
                    if (observedManager.getLocations().length > 0) 
                    {
                        var SearchResult = observedManager.getLocations()[0];
                        
                        var FormattedAddress = FormatAddressFromNokiaObj(SearchResult.address);
                       
                        var Latitude = SearchResult.displayPosition.latitude;
                        var Longitude = SearchResult.displayPosition.longitude;
                                    
                        Debug("Latitude: " + Latitude);
                        Debug("Longitude: " + Longitude);
                        
                        document.getElementById("ProximityAddress").value = FormattedAddress;
                        AddOval(Latitude,Longitude);
                    }
                    else
                    {
                        ChangeDivStatus("ProximityAddressStatus","<b>ERROR Geocoding</b>");
                    }
                }
                else if(value == "started") 
                {
                    ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
                }
                else if(value == "failed") 
                {
                    ChangeDivStatus("ProximityAddressStatus","Address Not Found!");
                }
            }
            catch(err)
            {
                Debug("Error Occured While Processing Routing Geocode Results");
                NotifyError("Error!.","Error Occured While Processing Routing Results.");
                DisplayPropertiesOfObject(err,0);
            }
        }        
    );
     
     
          
}
function GenerateSearchRequest(SearchText)
{
    /*
    var searchRequest = {
        searchText: PrepareAddressForGeoCode(SearchText),        
        representationOptions:{
            language: ["en-US"],
            maxResults: 1,
            searchResponseAttributes: ["all"],
            addressAttributes:["all"]
        }
        
    };
    
    return searchRequest;
    */
    
    return PrepareAddressForGeoCode(SearchText);
}
function PrepareAddressForGeoCode(strAddress)
{
    return encodeURIComponent(strAddress);
}
function ObjectsToUpdateWithLatLongCleanUp()
{
    if (GeoCodeList1.getLength() == 0 && 
        GeoCodeList2.getLength() == 0 && 
        GeoCodeList3.getLength() == 0 && 
        GeoCodeList4.getLength() == 0)
    {

        Debug("Executing ObjectsToUpdateWithLatLongCleanUp");
                
        for (var key in ObjectsToUpdateWithLatLong)
        {
            if (ObjectsToUpdateWithLatLong[key].length > 0)
            {
                //Debug("<br/>key: " + key);
                //Debug("ObjectsToUpdateWithLatLong[key].length: " + ObjectsToUpdateWithLatLong[key].length);
                //DisplayPropertiesOfObject(ObjectsToUpdateWithLatLong[key]);
                
                if(key != "remove")
                {                
                    var MyJSObject = {
                        action: 'save_lat_long', 
                        ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[key]
                    };
                                    
                    $.ajax({
                    url: 'MAGeoCodeAJAXResources',
                    type: 'POST',
                    dataType: 'JSON',
                    data: { MyJSObject: JSON.stringify(MyJSObject) },
                    complete: function (response)
                    {
                        var obj = $.parseJSON(response.responseText);                      
                        
                        if(obj.success)
                        {
                            //Debug("Successfully saved objects.");
                            ObjectsToUpdateWithLatLong = new Array();
                        }
                        else
                        {
                            NotifyError("ObjectsToUpdateWithLatLongCleanUp Error",obj.error);
                            Debug("ObjectsToUpdateWithLatLongCleanUp Error " + obj.error);
                            HideLoadingDialog();
                        }
                    }
                    });
                }
            }
        }        
    }
    else
    {
        Debug("GeoCodeList1: " + GeoCodeList1.getLength());
        Debug("GeoCodeList2: " + GeoCodeList2.getLength());
        Debug("GeoCodeList3: " + GeoCodeList3.getLength());
        Debug("GeoCodeList4: " + GeoCodeList4.getLength());
    }
}
function SaveLatLong(lat,lng, data, pTp)
{
    //Check if Lat & Long Fields are Set
    if ( pTp.LongitudeField != null && pTp.LatitudeField != null && pTp.sObjectId != null && pTp.sObjectId != "")
    {  
        /*
        $.each(data.getLocations(), function(index, value) { 
            Debug("Index: " + index);
            DisplayPropertiesOfObject(value,0);
            DisplayPropertiesOfObject(value.mapView,0);
            DisplayPropertiesOfObject(value.address,0);
        });
        */     
       
        //var relevance = data.relevance;
        //var matchLevel = data.matchLevel;
        
        var LatLongJSObj = new Object();
        
        var SearchResult = data.getLocations()[0];
        LatLongJSObj.latitude = lat;
        LatLongJSObj.longitude = lng;
        LatLongJSObj.street = SearchResult.address.street;
        LatLongJSObj.city = SearchResult.address.city;
        LatLongJSObj.state = SearchResult.address.state;
        LatLongJSObj.country = SearchResult.address.country;
        LatLongJSObj.county = SearchResult.address.county ;
        LatLongJSObj.district = SearchResult.address.district;
        LatLongJSObj.postalcode = SearchResult.address.postalCode;
        LatLongJSObj.suite = SearchResult.address.suite;
        LatLongJSObj.floor = SearchResult.address.floor;
        LatLongJSObj.houseNumber = SearchResult.address.houseNumber;                       
        LatLongJSObj.compiledStreet = (LatLongJSObj.houseNumber != null ? LatLongJSObj.houseNumber + " " : "") + (LatLongJSObj.floor != null ? "Floor - " + LatLongJSObj.floor + " " + ", " : "") + (LatLongJSObj.street != null ? LatLongJSObj.street + " " : "") + (LatLongJSObj.suite != null ? "Suite - " + LatLongJSObj.suite : ""); 
        LatLongJSObj.pTp = pTp;
        
        var HasUpdates = false;
        
        if ((pTp.LatitudeField != null && pTp.LatitudeField != "") || (pTp.LongitudeField != null && pTp.LongitudeField != "") || (pTp.CleanStreet != null && pTp.CleanStreet != "") 
            || (pTp.CleanCity != null && pTp.CleanCity != "") || (pTp.CleanState != null && pTp.CleanState != "") || (pTp.CleanCounty != null && pTp.CleanCounty != "") 
            || (pTp.CleanCountry != null && pTp.CleanCountry != "") || (pTp.CleanDistrict != null && pTp.CleanDistrict != "") || (pTp.CleanPostalCode != null && pTp.CleanPostalCode != ""))
        {
            HasUpdates = true;
        }
        
        if (HasUpdates)
        {
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject] == null)
            {
                ObjectsToUpdateWithLatLong[pTp.BaseObject] = new Array();
            }
            
            ObjectsToUpdateWithLatLong[pTp.BaseObject].push(LatLongJSObj);
            
            //Debug("ObjectsToUpdateWithLatLong[" + pTp.BaseObject + "]: " + ObjectsToUpdateWithLatLong[pTp.BaseObject].length);            
            //Debug("ObjectsToUpdateWithLatLong: " + ObjectsToUpdateWithLatLong.length);
    
            if (ObjectsToUpdateWithLatLong[pTp.BaseObject].length  >= pTp.BatchAmount)
            {
                Debug("Above Batch Size (" + ObjectsToUpdateWithLatLong[pTp.BaseObject].length + ")");
                
                var MyJSObject = {
                    action: 'save_lat_long',                
                    ObjectsToUpdateWithLatLong: ObjectsToUpdateWithLatLong[pTp.BaseObject]
                };
                
                $.ajax({
                url: 'MAGeoCodeAJAXResources',
                type: 'POST',
                dataType: 'JSON',
                data: { MyJSObject: JSON.stringify(MyJSObject) },
                complete: function (response)
                {
                    var obj = $.parseJSON(response.responseText);                      
                    
                    if(obj.success)
                    {
                        //Debug("Successfully saved Lat/Long.");                        
                    }
                    else
                    {
                        NotifyError("Error Saving Lat/Long",obj.error);
                        Debug("Error Saving Lat/Long " + obj.error);
                        HideLoadingDialog();
                    }
                }
                }); 
                
                ObjectsToUpdateWithLatLong[pTp.BaseObject]= new Array();
            }
            else
            {
                //Debug("Not above batch size (" + pTp.BatchAmount + ")");
            }
        }
    }
    else
    {
        Debug("Missing Lat/Long Field");
    }
}
function ReportBadGeoCode(mAddress,lat,long)
{
    try
    {
        var ToAddresses = new Array();
        ToAddresses.push('dkraun@cloudbilt.com');
        
        var sBody = "<InvalidLatLong>";        
            sBody += "<OrgId>[OrgId]</OrgId>";
            sBody += "<OrgName>[OrgName]</OrgName>";
            sBody += "<Address>" + mAddress + "</Address>";
            sBody += "<Latitude>" + lat + "</Latitude>";
            sBody += "<Longitude>" + long + "</Longitude>";
        sBody += "</InvalidLatLong>";
    
        var MyJSObject = {
                action: 'report_bad_geocode',
                replyTo: UserEmailAddress,
                subject: 'Bad GeoCode',
                htmlBody: sBody,
                toAddresses: ToAddresses
        };
        
        $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                alert("Thank You! Your email has been submitted.");
            }
            else
            {
                NotifyError("Error Reporting Bad GeoCode",obj.error);
                Debug("Error Reporting Bad GeoCode " + obj.error);
            }
        }
        });
    }
    catch(error)
    {
        alert("Error Sending Email, " + error.faultcode);
    }
}

function CreateMarkerFromGeoCodeingFunction(pTp)
{
    //Debug("CreateMarkerFromGeoCodeingFunction");
    
    if (ProcessedSavedQueries[pTp.QryId] != null)
    {

        var marker = CreateMarkerFromPointToPoint(pTp);
        
        ProcessedSavedQueries[pTp.QryId].AddMarker(marker);
        
        var IsVisible = false;
        
        if (pc_Added)
        {
            if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
            {
                IsVisible = true;
            }
        }
        else
        {
            IsVisible = true;
        }
        
        

    
        if (IsVisible)
        {
            //map.objects.add(marker);
            ProcessedSavedQueries[pTp.QryId].AddVisibleMarker(marker);
            ProcessedSavedQueries[pTp.QryId].UpdateVisibleMarkersCount();
            //Debug("VisibleMarkersCount: " + ProcessedSavedQueries[pTp.QryId].VisibleMarkersCount);
            
            //$('#' +pTp.QryId + "_Count").html(ProcessedSavedQueries[pTp.QryId].VisibleMarkersCount);
        }
        
        ProcessedSavedQueries[pTp.QryId].SetProccessingStatus();
    }
    
}

function ProcessGeoCodeResults(pTp, json)
{
    if (json.success)
    {   
        var Latitude = json.Latitude;
        var Longitude = json.Longitude;

        pTp.Latitude = Latitude;
        pTp.Longitude = Longitude;
        
        //Debug("Latitude: " + Latitude);
        //Debug("Longitude: " + Longitude);
        //Debug("pTp.LatitudeField: " + pTp.LatitudeField);
        //Debug("pTp.LongitudeField: " + pTp.LongitudeField);
        
        //SaveLatLong(Latitude,Longitude, json, pTp);
        
        CreateMarkerFromGeoCodeingFunction(pTp);
    }
    else
    {
        AddToMissingAddressesTab(pTp,"Unable to Locate Address");
    }
}

// JavaScript Document

/*

    Point to Plot (pTp)
    
    //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
    pTp.MarkerAddress   = MarkerAddress;
    ptp.FormatedMarkerAddress
    pTp.MarkerStreet    = aStreetResult;
    pTp.MarkerCity      = aCityResult;
    pTp.MarkerState     = aStateResult;
    pTp.MarkerZip       = aZipResult;
    pTp.MarkerCountry   = aCountryResult;
    

    pTp.ToolTip2L       = ToolTip2.FieldLabel;
    pTp.ToolTip3L       = ToolTip3.FieldLabel;
    pTp.ToolTip4L       = ToolTip4.FieldLabel;
    pTp.ToolTip5L       = ToolTip5.FieldLabel;
    pTp.ToolTip6L       = ToolTip6.FieldLabel;
    pTp.ToolTip7L       = ToolTip7.FieldLabel;
    
    pTp.ToolTip1V       = ToolTip1.Value;
    pTp.ToolTip2V       = ToolTip2.Value;
    pTp.ToolTip3V       = ToolTip3.Value;
    pTp.ToolTip4V       = ToolTip4.Value;
    pTp.ToolTip5V       = ToolTip5.Value;
    pTp.ToolTip6V       = ToolTip6.Value;
    pTp.ToolTip7V       = ToolTip7.Value;
    
    pTp.ImageURL        = ImageURL;
    pTp.sObjectId       = record.Id;
    pTp.Latitude        = GetAddressFieldResults(record,Latitude); //record.Latitude;
    pTp.Longitude       = GetAddressFieldResults(record,Longitude); //record.Longitude;
    pTp.LatitudeField   = Latitude;
    pTp.LongitudeField  = Longitude;
    pTp.BaseObject      = BaseObject;
    pTp.BatchAmount     = SavedQryJSObj.BatchAmount;
    pTp.queryName       = SavedQryJSObj.SavedQryName;
    pTp.QryId           = QryId;
    pTp.IconColor       = IconColor;
    
    pTp.CleanCity       = CleanCity;
    pTp.CleanStreet     = CleanStreet;
    pTp.CleanCounty     = CleanCounty;
    pTp.CleanDistrict   = CleanDistrict;
    pTp.CleanState      = CleanState;   
    pTp.CleanPostalCode = CleanPostalCode;
    pTp.CleanCountry    = CleanCountry;
    pTp.CleanQuality    = CleanQuality;
    pTp.CleanSimilarity = CleanSimilarity;
    pTp.MarkerIconText  = text;
    pTp.ContentKey      = ContentKey;
    pTp.RecordId        = record.Id;
    pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
    pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
    pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
    pTp.PicklistFieldValue = PicklistFieldValue;
    
    RelatedListCount
    
    
    title:  ToolTip1.Value,
            visibility: true,
            brush:IconColor,
            Ignore: false, 
            SavedQryId: QryId,
            Lat: rLatitude,
            Long: rLongitude,
            pContentKey: ContentKey,
            MarkerAddress: MarkerAddress,
            RecordId: record.Id,
            ToolTip2Label: ToolTip2.FieldLabel,
            ToolTip3Label: ToolTip3.FieldLabel,
            ToolTip4Label: ToolTip4.FieldLabel,
            ToolTip5Label: ToolTip5.FieldLabel,
            ToolTip6Label: ToolTip6.FieldLabel,
            ToolTip7Label: ToolTip7.FieldLabel,
            ToolTip1Value: ToolTip1.Value,
            ToolTip2Value: ToolTip2.Value,
            ToolTip3Value: ToolTip3.Value,
            ToolTip4Value: ToolTip4.Value,
            ToolTip5Value: ToolTip5.Value,
            ToolTip6Value: ToolTip6.Value,
            ToolTip7Value: ToolTip7.Value,
            NumberFieldFieldLabel: SavedQryJSObj.NumberFieldFieldLabel,
            NumberFieldFieldValue: FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,""),
            PicklistFieldFieldLabel: SavedQryJSObj.PicklistFieldFieldLabel,
            PicklistFieldFieldValue:FormatsObjectValue(PicklistFieldValue,SavedQryJSObj.PicklistFieldFieldType,""),
            PicklistFieldValue: ((PicklistFieldValue == null) ? null : PicklistFieldValue.replace(/\s/g,"")),
            
        
    Point to Plot (pTp)
    
    

*/

function FormatPicklistFieldValue(str)
{
    return  ((str == null) ? null : str.replace(/\s/g,""));
}

function RemoveMarker(pMarker)
{
    //Debug("Address: " + pMarker.MarkerAddress);
    //DisplayPropertiesOfObject(pMarker,0);
    
    Debug("Removing Marker");
    Debug("Address: " + pMarker.pTp.MarkerAddress);
    
    map.objects.remove(pMarker);    
    ProcessedSavedQueries[pMarker.pTp.QryId].RemoveMarker(pMarker);
}

function CreateMarkerFromPointToPoint(pTp)
{
    var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(pTp.Latitude), parseFloat(pTp.Longitude));
               
    var markerOptions = {
        title: pTp.ToolTip1V,
        visibility: true,
        brush:pTp.IconColor,
        Ignore: false, 
        SavedQryId: pTp.QryId,
        Lat: pTp.Latitude,
        Long: pTp.Longitude,
        PicklistFieldValue: FormatPicklistFieldValue(pTp.PicklistFieldValueEncoded),
        pTp: pTp,
        text: pTp.MarkerIconText,
        eventListener: {
            "click": [function()
            {
                var me = this;
                
                //start building tooltip content from template
                var $tooltipContent = $('#tooltip-content-template').clone().attr('id', 'tooltip-content');
                
                //show related list tab if needed
                if (this.pTp.RelatedListCount > 0) { 
                    $tooltipContent.find('#tab-relatedlist').show(); 
                }
                
                //show picklist field info if needed 
                if (this.pTp.PicklistFieldLabel != "" && this.pTp.PicklistFieldLabel != undefined) { 
                    $tooltipContent.find('.picklistinfo').show(); 
                }
                
                //show activity buttons if needed
                if (ProcessedSavedQueries[this.SavedQryId].SupportsActivities) {
                    $tooltipContent.find('.activitybuttons').show();
                }
                                
                //add tooltips
                var $tooltips = $tooltipContent.find('.tooltips > table');
                if (this.pTp.ToolTip2L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip2L, this.pTp.ToolTip2V)); }
                if (this.pTp.ToolTip3L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip3L, this.pTp.ToolTip3V)); }
                if (this.pTp.ToolTip4L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip4L, this.pTp.ToolTip4V)); }
                if (this.pTp.ToolTip5L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip5L, this.pTp.ToolTip5V)); }
                if (this.pTp.ToolTip6L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip6L, this.pTp.ToolTip6V)); }
                if (this.pTp.ToolTip7L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip7L, this.pTp.ToolTip7V)); }
                
                var EmailURL = "p2_lkid=" + this.pTp.RecordId + "&rtype=" + this.pTp.RecordId.substring(0,3) + "&retURL=%2F" + this.pTp.RecordId;
                
                //Check if Account
                if(this.pTp.RecordId.substring(0,3) === "001")
                {
                    EmailURL = "p3_lkid=" + this.pTp.RecordId + "&retURL=%2F" + this.pTp.RecordId;
                }               
                
                //create info bubble
                InfoBubbles.addBubble(
                    $tooltipContent.wrap('<div></div>').show().parent().html()
                        .replace(/::ContentKey::/g, this.pTp.ContentKey)
                        .replace(/::Id::/g, this.pTp.RecordId)
                        .replace(/::Name::/g, this.pTp.ToolTip1V)
                        .replace(/::Address::/g, this.pTp.MarkerAddress)
                        .replace(/::PicklistFieldLabel::/g, this.pTp.PicklistFieldLabel)
                        .replace(/::PicklistFieldValue::/g, this.pTp.PicklistFieldValue)
                        .replace(/::EmailURL::/g, EmailURL),
                        //.replace(/::::/g, this.pTp.),
                    new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long))
                );
                
                //find the tooltip that is now attached to the dom
                $tooltipContent = $('#tooltip-content');
                                
                //init tabs
                $tooltipContent.find('.tabs').tabs();
                
                //show chatter tab if needed
                if (ProcessedSavedQueries[this.SavedQryId].SupportsChatter) {
                    $tooltipContent.find('#tab-chatter').show().find('a').data('pTp', this.pTp).data('loaded', false).click(function () {
                        if (!$(this).data('loaded')) {
                            $(this).data('loaded', true);
                            
                            //load chatter integration
                            $(this).closest('#tooltip-content').find('#pane-chatter-'+$(this).data('pTp').ContentKey).append("<iframe src='/apex/ChatterFeed?entityId="+$(this).data('pTp').RecordId+"' style='width: 100%; height: 300px; border: none;'></iframe>");
                            
                            //load chatter integration
                            /*
                            $(this).closest('#tooltip-content').find('#pane-chatter-'+$(this).data('pTp').ContentKey).load('/apex/ChatterFeed?entityId='+$(this).data('pTp').RecordId, function () {
                                $(this).removeClass('loading');
                            });
                            */
                        }
                        else {
                            //THIS DOESNT WORK WITH THE NEW IFRAME APPROACH
                        
                            //try to refresh the chatter feed (if this doesn't work just assume that the feed wasn't loaded yet)
                            //try { chatter.getFeed().refresh(chatter.getFeed().config); } catch (err) { }
                        }
                    });
                }
                
                //load related list integration
                if (this.pTp.RelatedListCount > 0)
                {
                    $("#ajax-" + this.pTp.ContentKey)
                        .html('Loading')
                        .load('MAPopupRelatedListInformation',"parentid=" + this.pTp.RecordId + '&sqid=' + this.pTp.QryId );  
                }
                
                //show/hide action buttons based on permissions
	            if (userSettings.EnabledActionButtons) 
	            {
	            	$tooltipContent.find('.actionbutton').hide();
	            	$.each(userSettings.EnabledActionButtons, function (index, buttonLabel) {
	            		$tooltipContent.find('.actionbutton[data-label="'+buttonLabel+'"]').show();
	            	});
	            }
                 
                //handle action button clicks              
                $('#AddToTrip-' + this.pTp.ContentKey).click(function() {
                     AddMarkerToTrip(me);
                     ShowDirectionsTab();
                     HideBubbles();
                 });
                 $('#SetProxCenter-' + this.pTp.ContentKey).click(function() {
                     AddOval(me.Lat,me.Long);
                     HideBubbles();
                 });
                 $('#RemoveMarker-' + this.pTp.ContentKey).click(function() {
                     RemoveMarker(me);
                     HideBubbles();
                 });
            }, false, null],
            "tap": [function()
            {
                var me = this;
                
                //start building tooltip content from template
                var $tooltipContent = $('#tooltip-content-template').clone().attr('id', 'tooltip-content');
                
                //show related list tab if needed
                if (this.pTp.RelatedListCount > 0) { 
                    $tooltipContent.find('#tab-relatedlist').show(); 
                }
                
                //show picklist field info if needed 
                if (this.pTp.PicklistFieldLabel != "" && this.pTp.PicklistFieldLabel != undefined) { 
                    $tooltipContent.find('.picklistinfo').show(); 
                }
                
                //show activity buttons if needed
                if (ProcessedSavedQueries[this.SavedQryId].SupportsActivities) {
                    $tooltipContent.find('.activitybuttons').show();
                }
                                
                //add tooltips
                var $tooltips = $tooltipContent.find('.tooltips > table');
                if (this.pTp.ToolTip2L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip2L, this.pTp.ToolTip2V)); }
                if (this.pTp.ToolTip3L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip3L, this.pTp.ToolTip3V)); }
                if (this.pTp.ToolTip4L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip4L, this.pTp.ToolTip4V)); }
                if (this.pTp.ToolTip5L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip5L, this.pTp.ToolTip5V)); }
                if (this.pTp.ToolTip6L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip6L, this.pTp.ToolTip6V)); }
                if (this.pTp.ToolTip7L != undefined) { $tooltips.append(AddToolTipToMarkerContent(this.pTp.ToolTip7L, this.pTp.ToolTip7V)); }
                
                var EmailURL = "p2_lkid=" + this.pTp.RecordId + "&rtype=" + this.pTp.RecordId.substring(0,3) + "&retURL=%2F" + this.pTp.RecordId;
                
                //Check if Account
                if(this.pTp.RecordId.substring(0,3) === "001")
                {
                    EmailURL = "p3_lkid=" + this.pTp.RecordId + "&retURL=%2F" + this.pTp.RecordId;
                }  
                
                //create info bubble
                InfoBubbles.addBubble(
                    $tooltipContent.wrap('<div></div>').show().parent().html()
                        .replace(/::ContentKey::/g, this.pTp.ContentKey)
                        .replace(/::Id::/g, this.pTp.RecordId)
                        .replace(/::Name::/g, this.pTp.ToolTip1V)
                        .replace(/::Address::/g, this.pTp.MarkerAddress)
                        .replace(/::PicklistFieldLabel::/g, this.pTp.PicklistFieldLabel)
                        .replace(/::PicklistFieldValue::/g, this.pTp.PicklistFieldValue)
                        .replace(/::EmailURL::/g, EmailURL),
                        //.replace(/::::/g, this.pTp.),
                    new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long))
                );
                
                //find the tooltip that is now attached to the dom
                $tooltipContent = $('#tooltip-content');
                                
                //init tabs
                $tooltipContent.find('.tabs').tabs();
                
                //show chatter tab if needed
                if (ProcessedSavedQueries[this.SavedQryId].SupportsChatter) {
                    $tooltipContent.find('#tab-chatter').show().find('a').data('pTp', this.pTp).data('loaded', false).click(function () {
                        if (!$(this).data('loaded')) {
                            $(this).data('loaded', true);
                            //load chatter integration
                            $(this).closest('#tooltip-content').find('#pane-chatter-'+$(this).data('pTp').ContentKey).load('/apex/ChatterFeed?entityId='+$(this).data('pTp').RecordId, function () {
                                $(this).removeClass('loading');
                            });
                        }
                        else {
                        	//try to refresh the chatter feed (if this doesn't work just assume that the feed wasn't loaded yet)
                        	try { chatter.getFeed().refresh(chatter.getFeed().config); } catch (err) { }
                        }
                    });
                }
                
                //load related list integration
                if (this.pTp.RelatedListCount > 0)
                {
                    $("#ajax-" + this.pTp.ContentKey)
                        .html('Loading')
                        .load('MAPopupRelatedListInformation',"parentid=" + this.pTp.RecordId + '&sqid=' + this.pTp.QryId );  
                }
                
                //show/hide action buttons based on permissions
	            if (userSettings.EnabledActionButtons) 
	            {
	            	$tooltipContent.find('.actionbutton').hide();
	            	$.each(userSettings.EnabledActionButtons, function (index, buttonLabel) {
	            		$tooltipContent.find('.actionbutton[data-label="'+buttonLabel+'"]').show();
	            	});
	            }
                 
                //handle action button clicks              
                $('#AddToTrip-' + this.pTp.ContentKey).click(function() {
                     AddMarkerToTrip(me);
                     ShowDirectionsTab();
                     HideBubbles();
                 });
                 $('#SetProxCenter-' + this.pTp.ContentKey).click(function() {
                     AddOval(me.Lat,me.Long);
                     HideBubbles();
                 });
                 $('#RemoveMarker-' + this.pTp.ContentKey).click(function() {
                     RemoveMarker(me);
                     HideBubbles();
                 });
            }, false, null]
        }
    };
    
    if (pTp.IconColor.indexOf('image:') == 0)
    {
    	delete markerOptions.brush;
    	
    	//var truncatedImgId = pTp.IconColor.split('image:')[1].substr(0, 15);
    	if (imgLoaderDimensions[pTp.IconColor.split('image:')[1]]) {
    		$.extend(markerOptions, {
    			icon: '/servlet/servlet.FileDownload?file=' + pTp.IconColor.split('image:')[1],
    			anchor: new nokia.maps.util.Point(
    				Math.floor(imgLoaderDimensions[pTp.IconColor.split('image:')[1]].width / 2), 
    				imgLoaderDimensions[pTp.IconColor.split('image:')[1]].height
    			)
    		});
    		return new nokia.maps.map.Marker(MarkerCoordinate, markerOptions);
    	}
    }
    
    return new nokia.maps.map.StandardMarker(MarkerCoordinate, markerOptions);
}

function SendMarkerGeoCodeRequest(pTp)
{
    
    try
    {
        if ($.inArray(pTp.QryId, VisibleQueries) >= 0 || pTp.QryId == 'Default')
        {
            //Proceeed
            
            GeoSentRequest++;
            GeoCurrentRequest++;
            
            var URLParams = "action=GeoCode";
            URLParams += "&geocodetype=MarkerGeoCode";
            URLParams += "&savelatlong=true";
            URLParams += "&savedqueryid=" + pTp.QryId;
            URLParams += "&recordid=" + pTp.sObjectId;
            URLParams += "&baseobject=" + pTp.BaseObject;
            
            $.getJSON("/apex/MAGeoCodeAJAXResources",URLParams + "&searchtext=" + encodeURIComponent(pTp.MarkerAddress),function(json)
            { 
                GeoProcessedRequest++;
                GeoCurrentRequest--;
                
                if (!json.RecordUpdate)
                {
                    Debug("Failed to Update Record: " + json.RecordUpdateError);
                }
                
                ProcessGeoCodeResults(pTp,json);
                
                if (AddressesToBeGeoCoded.length > 0)
                {
                    if (GeoCurrentRequest < MaxRequestOut)
                    {
                        SendMarkerGeoCodeRequest(AddressesToBeGeoCoded.shift());
                    }
                }
                
                UpdateGeoCoderStatus();           
            });
    
        }
        else
        {
            //Remove
            //NEEDS WORK, this would allow the user to cancel a query while its plotting 
            
            //Remove Current Item
            AddressesToBeGeoCoded.shift();
            
            if (AddressesToBeGeoCoded.length > 0)
            {
                if (GeoCurrentRequest < MaxRequestOut)
                {
                    SendMarkerGeoCodeRequest(AddressesToBeGeoCoded.shift());
                }
            }
            
            UpdateGeoCoderStatus(); 
            
        }
    }
    catch(err)
    {
        Debug("Error Geocoding Address");
        DisplayPropertiesOfObject(err,0);
    }               
}
                                            
function SendMarkerGeoCodeRequest_HeatMap(pTp, $plottedQuery)
{
    try
    {
        var URLParams = "action=GeoCode";
        URLParams += "&geocodetype=MarkerGeoCode";
        URLParams += "&savelatlong=true";
        URLParams += "&savedqueryid=" + pTp.QryId;
        URLParams += "&recordid=" + pTp.sObjectId;
        URLParams += "&baseobject=" + pTp.BaseObject;
        
        $plottedQuery.data('currentRequestsOut', $plottedQuery.data('currentRequestsOut') + 1);
        
        $.getJSON("/apex/MAGeoCodeAJAXResources",URLParams + "&searchtext=" + encodeURIComponent(pTp.MarkerAddress),function(json)
        { 
            //GeoProcessedRequest++;
            //GeoCurrentRequest--;
            
            $plottedQuery.data('currentRequestsOut', $plottedQuery.data('currentRequestsOut') - 1);
            $plottedQuery.data('geocodeResponseCount', $plottedQuery.data('geocodeResponseCount') + 1);
            
            if (!json.RecordUpdate)
            {
                Debug("Failed to Update Record: " + json.RecordUpdateError);
            }
            
            if (json.success)
            {
                var Latitude = json.Latitude;
                var Longitude = json.Longitude;
                $plottedQuery.data('heatmapDataPoints').push({
                    value: 0,
                    latitude: Latitude,
                    longitude: Longitude
                });
                $plottedQuery.find('.HeatMap_Total').html('Geocoding: ' + $plottedQuery.data('geocodeResponseCount') + ' of ' + $plottedQuery.data('expectedGeocodeSize') + '(' + $plottedQuery.data('badAddresses') + ' bad addresses)');
            }
            else
            {
                $plottedQuery.data('badAddresses', $plottedQuery.data('badAddresses') + 1);
                $plottedQuery.find('.HeatMap_Total').html('Geocoding: ' + $plottedQuery.data('geocodeResponseCount') + ' of ' + $plottedQuery.data('expectedGeocodeSize') + '(' + $plottedQuery.data('badAddresses') + ' bad addresses)');
            }
            
            //ProcessGeoCodeResults(pTp,json);
            
            if ($plottedQuery.data('addressesToGeocode').length > 0)
            {
                if ($plottedQuery.data('currentRequestsOut') < $plottedQuery.data('maxRequestsOut'))
                {
                    SendMarkerGeoCodeRequest_HeatMap($plottedQuery.data('addressesToGeocode').shift(), $plottedQuery);
                }
            }
            else if ($plottedQuery.data('currentRequestsOut') == 0 && $plottedQuery.data('batchesToProcess') == 0)
            {
                $plottedQuery.find('.HeatMap_Total').html('Rendering...');
            
                //there is nothing left to geocode so render the heat map
                $plottedQuery.find('.HeatMap_Total').html('Plotted: ' + $plottedQuery.data('heatmapDataPoints').length);
                var heatmapProvider = new nokia.maps.heatmap.Overlay({
                    max: 20,
                    opacity: 1,
                    type: "density",
                    coarseness: 2,
                    sampleDepth: 4,
                    colors: heatMapColorSettings
                });

                heatmapProvider.addData($plottedQuery.data('heatmapDataPoints'));
                map.overlays.add(heatmapProvider);
                
                //remove the existing heat map if there is one (this is a quick fix for bad async handling)
                if ($plottedQuery.data('heatmapProvider'))
                {
                    map.overlays.remove($plottedQuery.data('heatmapProvider'));
                }
                
                $plottedQuery.data('heatmapProvider', heatmapProvider);
               
                
                $plottedQuery.find('.btn-remove').html("X").css('cursor','pointer').click(function(){
                    map.overlays.remove($(this).closest('tr.PlottedRowUnit').data('heatmapProvider'));
                    $(this).closest('tr.PlottedRowUnit').remove();
                });
            }
            
            //UpdateGeoCoderStatus();           
        });
    }
    catch(err)
    {
        Debug("Error Geocoding Address" + err);
        //DisplayPropertiesOfObject(err,0);
    }               
}

function ProcessedSavedQry(pQryId)
{
    this.QryId = pQryId;
    
    this.AllMarkersArray = new Array();
    this.VisibleMarkersArray = new Array();
    
    this.LegendArray = new Array();
    this.VisibleLegendEntries = new Array();
    
    this.ExpectedMarkersCount   = 0;
    this.ProcessedMarkersCount  = 0;
    this.VisibleMarkersCount    = 0;
    this.AddressesNotFound      = 0;
    
    this.ToolTip1Label  = '';       
    this.ToolTip2Label  = '';
    this.ToolTip3Label  = '';
    this.ToolTip4Label  = '';
    this.ToolTip5Label  = '';
    this.ToolTip6Label  = '';
    this.ToolTip7Label  = '';
    
    var $VisibleMarkersCountElement = null;
    
    this.SavedQueryName         = ''; /*Currently Not Used*/
    
    this.CompletedProcessing        = false;
    this.LegendObject = new Object();
    
    $('#' + this.QryId + "_Stats").show();
    
    this.UpdateVisibleMarkersCount = function ()
        {
            if ($VisibleMarkersCountElement == null)
            {
                $VisibleMarkersCountElement = $('#' + this.QryId + "_Count");
            }
            
            $VisibleMarkersCountElement.html(this.VisibleMarkersCount);
            
        }
    
    this.ShowAllMarkers = function()
        {
            //Remove Visible Markers
            var OuterObj = this;
            
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.remove(value);                        
            });
                        
            this.VisibleMarkersArray = this.AllMarkersArray;
            this.VisibleMarkersCount = this.VisibleMarkersArray.length;
            
            map.objects.addAll(this.VisibleMarkersArray);
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
        }
    
    this.ChangeDoToProximityCircle = function(CenterPoint, Radius)
        {
            //Remove Visible Markers
            var OuterObj = this;
            
            function StepTwo()
            {
                //Set Variables back to 0 and Blank
                OuterObj.VisibleMarkersArray = new Array();
                OuterObj.VisibleMarkersCount    = 0;
                
                //Debug("OuterObj.AllMarkersArray: " + OuterObj.AllMarkersArray); 
                
                //Loop Though All Markers and Add to Visible Markers Array
                $.each(OuterObj.AllMarkersArray, function(index, value) { 
                    
                    if (value["coordinate"].distance(CenterPoint) <= Radius)
                    {
                        OuterObj.VisibleMarkersArray.push(value);
                    }
                    
                });
                
                //Debug("VisibleMarkersArray.length: " + this.VisibleMarkersArray.length); 
                
                OuterObj.VisibleMarkersCount = OuterObj.VisibleMarkersArray.length;
                
                if (OuterObj.VisibleMarkersCount > 0)
                {
                    map.objects.addAll(OuterObj.VisibleMarkersArray);
                }
                OuterObj.UpdateVisibleMarkersCount();
                //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
            }
            
            var chunk = 100;
            var index = map.objects.getLength() -1;
            
            var TempQryId = this.QryId;
    
            function RemoveMarkersChunk()
            {
                
                Debug("Running RemoveMarkersChunk");
                var cnt = chunk;
                
                while (cnt > 0 && index > -1) 
                {
                    
                    //DisplayPropertiesOfObject(map.objects.get(index),0);
                    //Debug("SavedQryId: " + map.objects.get(index).SavedQryId);
                    
                    try
                    {
                    
                        if (map.objects.get(index).SavedQryId != undefined)
                        {
                            if (map.objects.get(index).SavedQryId == TempQryId)
                            {
                                map.objects.removeAt(index);
                            }
                        }
                    }
                    catch(err)
                    {
                        //DisplayPropertiesOfObject(err,0);
                    }
                    
                    index--;
                    cnt--;
                }
                
                if (index > -1) 
                {
                    setTimeout(RemoveMarkersChunk, 20);
                }
                else
                {
                    StepTwo();
                }
               
                
            }
            
            RemoveMarkersChunk();    
            
            
            
            /*
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.remove(value);                        
            });
            */
            
            //this.RemoveAllMarkers();
            
            
            
        }
    
    this.RemoveLegendMarkers = function(LegendValue)
        {
            Debug("Running RemoveLegendMarkers for Legend Value (" + LegendValue + ")");
            
            var TempVisibleMarkersArray = new Array();
            $.each(this.VisibleMarkersArray, function(index, value) { 
                
                if (value["PicklistFieldValue"] != null)
                {
                    if (value["PicklistFieldValue"] == LegendValue)
                    {
                        map.objects.remove(value);
                    }
                    else
                    {
                        TempVisibleMarkersArray.push(value);
                    }
                }
            });
            
            this.VisibleMarkersArray = TempVisibleMarkersArray;
            this.VisibleMarkersCount = this.VisibleMarkersArray.length;
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
        }
    this.AddLegendMarkers = function(LegendValue)
        {
            Debug("Running AddLegendMarkers for Legend Value (" + LegendValue + ")");
            var OuterObj = this;
            $.each(this.AllMarkersArray, function(index, value) { 
                
                if (value["PicklistFieldValue"] != null)
                {
                    if (value["PicklistFieldValue"] == LegendValue)
                    {
                        DisplayPropertiesOfObject(this.pTp);
                        
                        if (pc_Added)
                        {
                            var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(this.pTp.Latitude), parseFloat(this.pTp.Longitude));
                            if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
                            {
                                map.objects.add(value);
                                OuterObj.VisibleMarkersArray.push(value);
                                OuterObj.VisibleMarkersCount++;
                            }
                        }
                        else
                        {
                            map.objects.add(value);
                            OuterObj.VisibleMarkersArray.push(value);
                            OuterObj.VisibleMarkersCount++;
                        }                        
                    }
                }
            });
            
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
        }
    
    this.AddMarker = function(MarkerToAdd)
        {
            this.AllMarkersArray.push(MarkerToAdd);
            this.ProcessedMarkersCount++;
        }
        
    this.AddVisibleMarker = function(MarkerToAdd)
        {
            this.VisibleMarkersArray.push(MarkerToAdd);
            this.VisibleMarkersCount++;
            map.objects.add(MarkerToAdd);
        }
        
    this.SetExpectedMarkersCount = function(count)
        {
            Debug("SetExpectedMarkersCount");
            $('#' + this.QryId + "_Stats").show();
            if (count > MaxQuerySize)
            {
                document.getElementById(this.QryId + "_Total").innerHTML = '<span style="color:red;">' + MaxQuerySize + '+</span> (' + ((count > 10000) ? '10000+' : count) + ')';
                this.ExpectedMarkersCount = MaxQuerySize;
            }
            else
            {
                document.getElementById(this.QryId + "_Total").innerHTML = count;
                this.ExpectedMarkersCount = count;
            }
        }
        
    this.SetProccessingStatus = function()
        {
            if (this.CompletedProcessing)
            {
                Debug("Already Completed Processing " + this.QryId);
            }
            else
            {
                //Debug("SetProccessingStatus - ExpectedMarkersCount: " + this.ExpectedMarkersCount);
                //Debug("SetProccessingStatus - ProcessedMarkersCount: " + this.ProcessedMarkersCount);
                
                if (this.ProcessedMarkersCount >= this.ExpectedMarkersCount)
                {
                    //Done Processing
                    Debug("<b>Done Processing " + this.QryId + "</b>");
                    UpdatePlottingStatus(this.QryId,"Done");
                    
                    if (this.QryId == 'Default' && $('.mapit-proximity-on').is(':checked'))
                    {
                        //this is a map it query and we need to put a prox circle on the marker asdfasdf
                        try {
                            AddOval(this.AllMarkersArray[0].Lat, this.AllMarkersArray[0].Long);
                            ZoomToFit();
                        }
                        catch (err) {
                        }
                    }
                    else if (this.QryId == 'Default')
                    {
                        ZoomToFit();
                        if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close
                    }
                    
                    //Check to see if there are "Addresses Not Found"
                    if (this.AddressesNotFound > 0)
                    {
                        $("#container").notify("create", "Warning-Template", 
                                               {
                                                   title: 'Warning',
                                                   text: 'Done Processing, ' + this.AddressesNotFound +' Bad Addresses. <a onclick="ShowAddressNotFoundPopup();">Display Addresses Not Found</a>'
                                               },
                                               {
                                                    expires: 5000,
                                                    speed: 1000
                                                }
                                            );  
                    }
                    
                    this.CompletedProcessing = true;
                    
                }
                else
                {
                    //Still Processing  
                    //Debug("Still Processing " + this.QryId + " (" + this.ProcessedMarkersCount + "/" +  this.ExpectedMarkersCount + ")");
                }
            }
        }
        
    this.RemoveAllMarkers = function()
        {
            var chunk = 120;
            var index = map.objects.getLength() -1;
            
            var TempQryId = this.QryId;
            var OuterObj = this;
            
            function RemoveMarkersChunk()
            {
                Debug("Running RemoveMarkersChunk");
                var cnt = chunk;
                
                while (cnt > 0 && index > -1) 
                {
                    if (map.objects.get(index).SavedQryId == TempQryId)
                    {
                        map.objects.removeAt(index);
                        OuterObj.VisibleMarkersCount--;
                    }
                    
                    index--;
                    cnt--;
                    
                }
                
                if (index > -1) 
                {
                    OuterObj.UpdateVisibleMarkersCount();
                    setTimeout(RemoveMarkersChunk, 100);
                }
                else
                {
                    
                    $('#PlottedQueriesTable #Row_' + TempQryId).remove();
                
                    this.AllMarkersArray = new Array();
                    this.VisibleMarkersArray = new Array();
    
                    this.LegendArray = new Array();
                    this.VisibleLegendEntries = new Array();
                }
                
            }
            
            RemoveMarkersChunk();            
        }
        
    this.RemoveMarker = function(MarkerToRemove)
        {           
            var index = this.VisibleMarkersArray.indexOf(MarkerToRemove);
            this.VisibleMarkersArray.splice(index,1);
            this.VisibleMarkersCount--;
            
            index = this.AllMarkersArray.indexOf(MarkerToRemove);
            this.AllMarkersArray.splice(index,1);
            this.ProcessedMarkersCount--;            
            
            this.UpdateVisibleMarkersCount();
        }
        
    this.PlotVisibleMarkers = function()
        {
            this.UpdateVisibleMarkersCount();
            //document.getElementById(this.QryId + "_Count").innerHTML = this.VisibleMarkersCount;
            /*
            $.each(this.VisibleMarkersArray, function(index, value) { 
                map.objects.add(value);
            });
            */
        }
}

function RemoveSavedQuery(SavedQueryId)
{
    try
    {
        Debug("Executing RemoveSavedQuery (" + SavedQueryId + ")");
    
        if (ProcessedSavedQueries[SavedQueryId] != null)
        {
            ProcessedSavedQueries[SavedQueryId].RemoveAllMarkers();
        }      

        VisibleQueries = $.grep( VisibleQueries, function(n,i){
            return (n != SavedQueryId);
        });
        
        HideBubbles();
        
        Debug("Done Executing RemoveSavedQuery");
    
    }
    catch (ex)
    {
        Debug('Error (RemoveSavedQuery): ' + ex.message);
        NotifyError("Error Saved Query!",ex.message);
        DisplayPropertiesOfObject(ex,0);
    }
}

function UpdatePlottingStatus(SavedQryId, Stage)
{
    if (Stage == "Processing")
    {
        $('#PlottedQueriesTable #' + SavedQryId).html('<img src="' +LoadingGIFUrl +'"/>');
    }
    else
    {
        $('#PlottedQueriesTable #' + SavedQryId).html("X").css('cursor','pointer').click(function(){
          
            $('#PlottedQueriesTable #Row_' + SavedQryId).find('#LegendDiv_Content').remove();
            $('#PlottedQueriesTable #Row_' + SavedQryId).find('center').remove(); //Remove Hide/Show Legend Command
            $('#PlottedQueriesTable #Row_' + SavedQryId).find('#BaseObjectName').html('Removing...');
            $(this).remove();
            
            RemoveSavedQuery(SavedQryId);
            ModifyPlottedSavedQueryCount();
            
            UpdateAddToCampaignButton();    //this function is on the MapAnything page
            
            
        });               
    }
} 


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
function AddPlotOnLoadId(SavedQryID)
{
    $("#" + SavedQryID).toggleClass('jstree-star');
    StoreMASettings();
}

function StoreMASettings ()
{
    var JSONObject = {};
    var PlotOnLoadQueries = [];
    
    $("#SQTree li").each(function(){
        if($(this).hasClass("jstree-star"))
        {
            PlotOnLoadQueries.push($(this).attr("id"));
        }
     });
      
     JSONObject.PlotOnLoadQueries = PlotOnLoadQueries;
     JSONObject.MapItProximityOn = $('.mapit-proximity-on').is(':checked');
     
     //Debug(JSON.stringify(JSONObject));
     
     $.getJSON("/apex/MAUserAJAXResources","action=store_ma_settings&id=" + UserId + "&jsonstring=" + JSON.stringify(JSONObject),function(json)
        { 
            if(json.success)
            {
                Debug("Updated Map Anything Settings: " + json.id);
            }
            else
            {
                NotifyError("Error Updating Map Anything Settings:",json.error);
                Debug("Error Updating Map Anything Settings: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Map Anything Settings</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Map Anything Settings",textStatus + " : " + errorThrown); 
        });
}

var imgLoaderDimensions = {};
var imgLoaderCounts = {};
var imgLoaderIntervals = {};
function imgLoaded () 
{
	imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
	imgLoaderDimensions[this.imgId] = {
		width	: this.width,
		height	: this.height 
	};
}
function imgError ()
{
	imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
}

function PlotSavedQuery(SavedQryID, ViewableAreaEnabled)
{
    if ($.inArray(SavedQryID, VisibleQueries) >= 0)
    {
        NotifyError("I'm Sorry...","This has already been plotted");
    }
    else
    {
        window.setTimeout(function(){ SlideToPlottedQueries(); }, 0);
        
        VisibleQueries.push(SavedQryID);
                            
        ModifyPlottedSavedQueryCount();                            

        $.getJSON("/apex/MASavedQueryAJAXResources"+pageSuffix+"","action=get_saved_query&id=" + SavedQryID,function(json)
        { 
            if(json.success)
            {   
            	//remove namespace
            	$.each(json.records, function (index, record) {
            		removeNamespace('{!namespace}', record);
            	});
            
            	//get dimensions for each potential image marker before we continue
            	try
				{
					//get a list of the images that need to be preloaded
					imgIds = [];
					if (json.records[0].PicklistField__c)
					{
						if (json.records[0].ColorAssignment__c)
						{
							$.each(json.records[0].ColorAssignment__c.split('~~'), function (index, colorAssignment) {
								if (colorAssignment.split('~')[1].indexOf('image:') == 0) {
									imgIds.push(colorAssignment.split('~')[1].split('image:')[1]);
								}
							});
						}
					}
					else
					{
						if (json.records[0].IconColor__c.indexOf('image:') == 0)
						{
							imgIds.push(json.records[0].IconColor__c.split('image:')[1]);
						}
					}
					
					//preload each image
					imgLoaderCounts[SavedQryID] = 0;
					$.each(imgIds, function (index, imgId) {
						var img = new Image();
						img.queryId = SavedQryID;
						img.imgId = imgId;
						img.name = '/servlet/servlet.FileDownload?file='+imgId;
						img.src = '/servlet/servlet.FileDownload?file='+imgId;
						img.onload = imgLoaded;
						img.onerror = imgError;
						img.onabort = imgError;
						
						imgLoaderCounts[SavedQryID] = imgLoaderCounts[SavedQryID] + 1;
					});
				}
				catch (err) { }
				
				//set an interval to determine when all of the images have loaded so we can continue processing
				imgLoaderIntervals[SavedQryID] = setInterval(
					function () {
						if ((imgLoaderCounts[SavedQryID] || 0) == 0) {
							clearInterval(imgLoaderIntervals[SavedQryID]);
							PlotSavedQueryOnSuccess(json,SavedQryID,ViewableAreaEnabled);
						}
					}, 400
				);           
            }
            else
            {
                Debug("ProcessSavedQry: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>ProcessSavedQry</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("ProcessSavedQry",textStatus + " : " + errorThrown); 
        });
     }
}

function PlotSavedQueryOnSuccess(result,SavedQryID,ViewableAreaEnabled)
{
    try
    {
        ProcessedSavedQueries[SavedQryID] = new ProcessedSavedQry(SavedQryID);

        var aStreet         = "";
        var aCity           = "";
        var aState          = "";
        var aZip            = "";
        var aCountry        = "";
        var BaseObject      = "";
        var ImageURL        = "";
        var StoredQry       = "";
        var Latitude        = "";
        var Longitude       = "";
        var IconColor       = "";
        var PicklistField   = "";
        var cleanStreet     = "";
        var cleanCity       = "";
        var cleanState      = "";
        var cleanCounty     = "";
        var cleanCountry    = "";
        var cleanPostalCode = "";
        var cleanDistrict   = "";
        
        
        $.each(result.records, function(intIndex, SavedQryRecord )
        {
            AppendSavedQueryToPlottedTable(SavedQryID,SavedQryRecord);
            
            $.getJSON("/apex/MASavedQueryAJAXResources"+pageSuffix+"?action=plot_query&SavedQueryId=" + SavedQryID + "&UserId=" + UserId + "&ViewableAreaEnabled=" + ViewableAreaEnabled + "&MapLat=" + map.getViewBounds().getCenter().latitude + "&MapLong=" + map.getViewBounds().getCenter().longitude + "&MapHeight=" + map.getViewBounds().getHeight() + "&MapWidth=" + map.getViewBounds().getWidth(),function(json)
            { 
                if(json.success)
                {                    
                    Debug("WholeQry: " + json.WholeQry);
                    
                    //remove namespace
                    removeNamespace('{!namespace}', json.SavedQryObj);                 
                    
                    var SavedQryJSObj = new Object();
                    
                    SavedQryJSObj.QryId           = SavedQryID;
                    SavedQryJSObj.ToolTip1        = json.SavedQryObj.Tooltip1__c;
                    SavedQryJSObj.ToolTip2        = json.SavedQryObj.Tooltip2__c;
                    SavedQryJSObj.ToolTip3        = json.SavedQryObj.Tooltip3__c;
                    SavedQryJSObj.ToolTip4        = json.SavedQryObj.Tooltip4__c;
                    SavedQryJSObj.ToolTip5        = json.SavedQryObj.Tooltip5__c;
                    SavedQryJSObj.ToolTip6        = json.SavedQryObj.Tooltip6__c;
                    SavedQryJSObj.ToolTip7        = json.SavedQryObj.Tooltip7__c;
                    SavedQryJSObj.aStreet         = json.SavedQryObj.BaseObject__r.Street__c;
                    SavedQryJSObj.aCity           = json.SavedQryObj.BaseObject__r.City__c;
                    SavedQryJSObj.aState          = json.SavedQryObj.BaseObject__r.State__c;
                    SavedQryJSObj.aZip            = json.SavedQryObj.BaseObject__r.PostalCode__c;
                    SavedQryJSObj.aCountry        = json.SavedQryObj.BaseObject__r.Country__c;
                    SavedQryJSObj.BaseObject      = json.SavedQryObj.BaseObject__r.Name;
                    //SavedQryJSObj.ImageURL      = ImageURL;
                    SavedQryJSObj.StoredQry       = json.SavedQryObj.Query__c;
                    SavedQryJSObj.Latitude        = json.SavedQryObj.BaseObject__r.Latitude__c;
                    SavedQryJSObj.Longitude       = json.SavedQryObj.BaseObject__r.Longitude__c;
                    SavedQryJSObj.WholeQry        = json.WholeQry;
                    SavedQryJSObj.QryType         = json.QueryType;
                    SavedQryJSObj.SavedQryName    = json.SavedQryObj.Name;
                    SavedQryJSObj.IconColor       = json.SavedQryObj.IconColor__c;
                    SavedQryJSObj.CleanCity       = json.SavedQryObj.BaseObject__r.CleanCity__c;
                    SavedQryJSObj.CleanStreet     = json.SavedQryObj.BaseObject__r.CleanStreet__c;
                    SavedQryJSObj.CleanState      = json.SavedQryObj.BaseObject__r.CleanState__c;
                    SavedQryJSObj.CleanCounty     = json.SavedQryObj.BaseObject__r.CleanCounty__c;
                    SavedQryJSObj.CleanCountry    = json.SavedQryObj.BaseObject__r.CleanCountry__c;
                    SavedQryJSObj.CleanPostalCode = json.SavedQryObj.BaseObject__r.CleanPostalCode__c;
                    SavedQryJSObj.CleanDistrict   = json.SavedQryObj.BaseObject__r.CleanDistrict__c;
                    SavedQryJSObj.CleanQuality    = json.SavedQryObj.BaseObject__r.Quality__c;
                    SavedQryJSObj.CleanSimilarity = json.SavedQryObj.BaseObject__r.Similarity__c;         
                    
                    SavedQryJSObj.RelatedListCount = json.SavedQryObj.RelatedListCount__c;
                    
                    Debug("Query Type: " + SavedQryJSObj.QryType);  
                    
                    if (SavedQryJSObj.BaseObject == 'Contact' || SavedQryJSObj.BaseObject == 'Lead')
                    {
                        $('#AddToCampaignButton').show(400);
                    }                 
                    
                    ProcessedSavedQueries[SavedQryID].BaseObject = SavedQryJSObj.BaseObject;
                    ProcessedSavedQueries[SavedQryID].SupportsActivities = result.supportsActivities;
                    ProcessedSavedQueries[SavedQryID].SupportsChatter = result.supportsChatter;
                    
                    if (SavedQryJSObj.QryType == "Picklist")
                    {
                        SavedQryJSObj.PicklistField = json.SavedQryObj.PicklistField__c;
                        SavedQryJSObj.PicklistFieldFieldType = json.QueryTypeDisplayType;
                        SavedQryJSObj.PicklistFieldFieldLabel = json.QueryTypeFieldLabel;
                        SavedQryJSObj.ColorAssignment = json.SavedQryObj.ColorAssignment__c;
                        SavedQryJSObj.OtherColor = '#FFFFFF';
                        
                        ProcessedSavedQueries[SavedQryID].PicklistField = SavedQryJSObj.PicklistField__c;
                        
                        //Example: Mr.~#7FEA2E~~Ms.~#EE5831                 
                        
                        $.each(SavedQryJSObj.ColorAssignment.split("~~"), function(index, value) { 
                            
                            Debug("Legend Value: " + value);
                            
                            if (value != '' && value != null)
                            {
                                var LegendObjEntry = new Object();
                                
                                var ColorValue = value.split("~");
                                
                                Debug("Legend Value Size: " + ColorValue.length);
                                
                                if (ColorValue.length == 2)
                                {
                                    if (ColorValue[0] != null && ColorValue[0] != '' && ColorValue[1] != null && ColorValue[1] != '')
                                    {
                                        //is this the special <Other> option?
                                        if (ColorValue[0] == '<Other>')
                                        {
                                            SavedQryJSObj.OtherColor = ColorValue[1];
                                        }
                                        else
                                        {
                                            LegendObjEntry.RawValue = ColorValue[0];
                                            LegendObjEntry.Value = FormatPicklistFieldValue(ColorValue[0]);
                                            LegendObjEntry.Color = ColorValue[1];
                                            LegendObjEntry.Count = 0;
                                            
                                            ProcessedSavedQueries[SavedQryID].LegendArray[LegendObjEntry.Value] = LegendObjEntry;
                                        }
                                    }
                                    else
                                    {
                                        Debug("Color or Value is Blank");
                                    }
                                }
                                else
                                {
                                    Debug("Not a Valid Legend Value");
                                }
                            }
                        });
                        
                        
                        DisplayPropertiesOfObject(ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray,0);                    
                        
                        var LegendObjEntry = new Object();
                                
                        LegendObjEntry.RawValue = 'Other Values';
                        LegendObjEntry.Value = 'OtherValues';
                        LegendObjEntry.Color = SavedQryJSObj.OtherColor;
                        LegendObjEntry.Count = 0;
                        
                        ProcessedSavedQueries[SavedQryID].LegendArray[LegendObjEntry.Value] = LegendObjEntry;
                    }
                    /*
                    else if (SavedQryJSObj.QryType == "Range")
                    {
                        //Is Range Query
                        SavedQryJSObj.NumberField = NumberField;
                        SavedQryJSObj.NumberFieldFieldType = GetFieldType(rdescribeSObj,NumberField);
                        SavedQryJSObj.NumberFieldFieldLabel = GetFieldLabel(rdescribeSObj,NumberField);
                        
                        Debug("SavedQryJSObj.NumberField - " + SavedQryJSObj.NumberField);
                    }
                    */
                    
                    //Debug("SavedQryJSObj.PicklistField: " + SavedQryJSObj.PicklistField);
                    SavedQryJSObj.BatchAmount = (json.SavedQryObj.BaseObject__r.BatchSize__c == null) ? 50 : json.SavedQryObj.BaseObject__r.BatchSize__c;
                    
                    ProcessSavedQryJSObject(SavedQryJSObj,json);
                }
                else
                {
                    HideLoadingDialog();
                        
                    UpdatePlottingStatus(SavedQryID, "Done");
                    
                    Debug("ProcessSavedQryJSObject " + json.error);
                    NotifyError("Error Plotting " + SavedQryRecord.Name + "!",json.error);                  
                    
                    HideLoadingDialog();             
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                UpdatePlottingStatus(SavedQryID, "Done");
                Debug("<b>Error Plotting</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Plotting",textStatus + " : " + errorThrown); 
            }); 
        
        });//End of Each Loop
    }
    catch (ex)
    {
        Debug('Error Found in the Function - ' + ex.message);
        DisplayPropertiesOfObject(ex,0);
        HideLoadingDialog();
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////






function ProcessSavedQryJSObject(SavedQryJSObj,json)
{
    try
    {
        //Debug("document.getElementById({!$Component.LegendTableId}).value - " + document.getElementById("{!$Component.LegendTableId}").value);
        
        Debug("Qry rows returned: " + json.ResultsSize);                    
        //DisplayPropertiesOfObject(result,0);
        
        var carRt = /\r/gi;
        var patAmp = /\x26/g;
        
        var records = json.Markers;
        var ToolTipInfoList = json.ToolTipInfoList;
        
        Debug("ToolTipInfoList.length " + ToolTipInfoList.length );
        if(ToolTipInfoList.length != 7)
        {
            Debug("ToolTipInfoList is smaller than 7!");
            return;
        }
        
        var ToolTip1      = new ToolTip(ToolTipInfoList[0]);
        var ToolTip2      = new ToolTip(ToolTipInfoList[1]);
        var ToolTip3      = new ToolTip(ToolTipInfoList[2]);
        var ToolTip4      = new ToolTip(ToolTipInfoList[3]);
        var ToolTip5      = new ToolTip(ToolTipInfoList[4]);
        var ToolTip6      = new ToolTip(ToolTipInfoList[5]);
        var ToolTip7      = new ToolTip(ToolTipInfoList[6]);
        var aStreet       = SavedQryJSObj.aStreet;
        var aCity         = SavedQryJSObj.aCity;
        var aState        = SavedQryJSObj.aState;
        var aZip          = SavedQryJSObj.aZip;
        var aCountry      = SavedQryJSObj.aCountry;
        var BaseObject    = SavedQryJSObj.BaseObject;
        var ImageURL      = SavedQryJSObj.ImageURL;
        var StoredQry     = SavedQryJSObj.StoredQry;
        var Latitude      = SavedQryJSObj.Latitude;
        var Longitude     = SavedQryJSObj.Longitude;
        var QryId         = SavedQryJSObj.QryId;
        
        var PicklistField     = SavedQryJSObj.PicklistField;
        
        var CleanStreet       = SavedQryJSObj.CleanStreet;
        var CleanState        = SavedQryJSObj.CleanState;
        var CleanCity         = SavedQryJSObj.CleanCity;
        var CleanCounty       = SavedQryJSObj.CleanCounty;
        var CleanDistrict     = SavedQryJSObj.CleanDistrict;
        var CleanPostalCode   = SavedQryJSObj.CleanPostalCode;
        var CleanCountry      = SavedQryJSObj.CleanCountry;
        var CleanQuality      = SavedQryJSObj.CleanQuality;
        var CleanSimilarity   = SavedQryJSObj.CleanSimilarity;
        var RelatedListCount  = SavedQryJSObj.RelatedListCount;
        
        var NumberField       = SavedQryJSObj.NumberField;
        Debug('NumberField - ' + NumberField);
        //Debug('PicklistField - ' + PicklistField);
        
        var IconColor   = (SavedQryJSObj.IconColor == null || SavedQryJSObj.IconColor == "") ? "#FFFFFF" : SavedQryJSObj.IconColor;
                
        Debug("11BaseObject: " + BaseObject);
        
        if (Longitude.indexOf(".") > -1)
        {
            var BaseObject = json.NewBaseObject;
        }
         
        Debug("22BaseObject: " + BaseObject);
            
        Debug("ToolTip1.FieldLabel: " + ToolTip1.FieldLabel);
        Debug("ToolTip2.FieldLabel: " + ToolTip2.FieldLabel);
        Debug("ToolTip3.FieldLabel: " + ToolTip3.FieldLabel);
        Debug("ToolTip4.FieldLabel: " + ToolTip4.FieldLabel);
        Debug("ToolTip5.FieldLabel: " + ToolTip5.FieldLabel);
        Debug("ToolTip6.FieldLabel: " + ToolTip6.FieldLabel);
        Debug("ToolTip7.FieldLabel: " + ToolTip7.FieldLabel);    

        ProcessedSavedQueries[QryId].ToolTip1Label  = ToolTip1.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip2Label  = ToolTip2.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip3Label  = ToolTip3.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip4Label  = ToolTip4.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip5Label  = ToolTip5.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip6Label  = ToolTip6.FieldLabel;
        ProcessedSavedQueries[QryId].ToolTip7Label  = ToolTip7.FieldLabel;
        
        //ProcessedSavedQueries[QryId].SetExpectedMarkersCount(records.length);
        ProcessedSavedQueries[QryId].SetExpectedMarkersCount(json.ResultsSize);
                            
        var PicklistFieldValue = "";
        var PicklistFieldValueEncoded = "";

        
        Debug("Records length: " + records.length);
        
        var chunk = 100;
        var index = 0;
        
        function doSavedQueryChunk()
        {
            var cnt = chunk;
            
            while (cnt-- && index < ProcessedSavedQueries[QryId].ExpectedMarkersCount) 
            {
                var record = records[index];                        
                //Debug('Record Name: ' + record.Name);                        
                                        
                ToolTip1.PopulateValues(record, ToolTipInfoList[0].Accessible);
                ToolTip2.PopulateValues(record, ToolTipInfoList[1].Accessible);
                ToolTip3.PopulateValues(record, ToolTipInfoList[2].Accessible);
                ToolTip4.PopulateValues(record, ToolTipInfoList[3].Accessible);
                ToolTip5.PopulateValues(record, ToolTipInfoList[4].Accessible); 
                ToolTip6.PopulateValues(record, ToolTipInfoList[5].Accessible);
                ToolTip7.PopulateValues(record, ToolTipInfoList[6].Accessible);
                
                //var aStreetResult   = GetAddressFieldResults(record,aStreet).replace(/\n\r?/g, '<br />');
                var aStreetResult   = GetAddressFieldResults(record,aStreet);
                var aCityResult     = GetAddressFieldResults(record,aCity);
                var aStateResult    = GetAddressFieldResults(record,aState);
                var aZipResult      = GetAddressFieldResults(record,aZip);
                var aCountryResult  = GetAddressFieldResults(record,aCountry);                        
                            
               
                /////////////////////////////////////
                var text="";
                
                if (SavedQryJSObj.QryType == "Range")
                {
                    var NumberFieldValue   = GetAddressFieldResults(record, NumberField);
                    
                    if (NumberFieldValue != null)
                    {
                        //var ColorIndex = ((15 * (NumberFieldValue - MinIndex)) / (MaxIndex - MinIndex));
                        //IconColor = returnHexColor( ColorIndex );
                        
                        IconColor = returnHexColor( NumberFieldValue );
                    }
                    else
                    {
                        IconColor = "#FFFFFF";
                    }
                    text = "R";
                    
                } 
                else if (SavedQryJSObj.QryType == "Picklist")
                {
                    PicklistFieldValue = GetAddressFieldResults(record, PicklistField);
                    
                    var PickFound = false;
                    
                    if (PicklistFieldValue != null && PicklistFieldValue != "")
                    {
                        if (ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)] == undefined)
                        {
                            IconColor = SavedQryJSObj.OtherColor;
                            PicklistFieldValue += ' (Other Values)';
                            PicklistFieldValueEncoded = 'OtherValues';
                            ProcessedSavedQueries[QryId].LegendArray['OtherValues'].Count++;
                            //Debug("Missing Pick List Value");
                        }
                        else
                        {
                            IconColor = ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)].Color;
                            ProcessedSavedQueries[QryId].LegendArray[FormatPicklistFieldValue(PicklistFieldValue)].Count++;
                            PicklistFieldValueEncoded = PicklistFieldValue;
                            //Debug("Found Picklist Value");
                        }
                    }
                    else
                    {
                        IconColor = SavedQryJSObj.OtherColor;
                        PicklistFieldValue += ' (Other Values)';
                        PicklistFieldValueEncoded = 'OtherValues';
                        ProcessedSavedQueries[QryId].LegendArray['OtherValues'].Count++;
                        //Debug("Missing Pick List Value");
                    }
                    text = "L"; 
                }
                
                
                
                //Debug('PicklistField Value - ' + PicklistFieldValue);
               
                
                
                ////////////////////////////////////////////
                
                
                var MarkerAddress = "";
                var FormatedMarkerAddress = "";
                            
                if (aCountryResult == "")
                {
                    FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult;
                }
                else
                {
                    FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult + "<br />" + aCountryResult;
                }
                
                if (aCountryResult == "")
                {
                    MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult;
                }
                else
                {
                    MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult + "," + aCountryResult;
                }
                
                var ContentKey = QryId + '-' + record.Id;                       
                
                
                var pTp = new Object();
                //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
                pTp.MarkerAddress   = MarkerAddress;
                pTp.FormatedMarkerAddress = FormatedMarkerAddress;
                pTp.MarkerStreet    = aStreetResult;
                pTp.MarkerCity      = aCityResult;
                pTp.MarkerState     = aStateResult;
                pTp.MarkerZip       = aZipResult;
                pTp.MarkerCountry   = aCountryResult;
                
    
                pTp.ToolTip2L       = ToolTip2.FieldLabel;
                pTp.ToolTip3L       = ToolTip3.FieldLabel;
                pTp.ToolTip4L       = ToolTip4.FieldLabel;
                pTp.ToolTip5L       = ToolTip5.FieldLabel;
                pTp.ToolTip6L       = ToolTip6.FieldLabel;
                pTp.ToolTip7L       = ToolTip7.FieldLabel;
                
                pTp.ToolTip1V       = ToolTip1.Value;
                pTp.ToolTip2V       = ToolTip2.Value;
                pTp.ToolTip3V       = ToolTip3.Value;
                pTp.ToolTip4V       = ToolTip4.Value;
                pTp.ToolTip5V       = ToolTip5.Value;
                pTp.ToolTip6V       = ToolTip6.Value;
                pTp.ToolTip7V       = ToolTip7.Value;
                
                pTp.ImageURL        = ImageURL;
                pTp.sObjectId       = record.Id;
                pTp.Latitude        = GetAddressFieldResults(record,Latitude); //record.Latitude;
                pTp.Longitude       = GetAddressFieldResults(record,Longitude); //record.Longitude
                pTp.LatitudeField   = Latitude;
                pTp.LongitudeField  = Longitude;
                pTp.BaseObject      = BaseObject;
                pTp.BatchAmount     = SavedQryJSObj.BatchAmount;
                pTp.queryName       = SavedQryJSObj.SavedQryName;
                pTp.QryId           = QryId;
                pTp.IconColor       = IconColor;
                
                pTp.CleanCity       = CleanCity;
                pTp.CleanStreet     = CleanStreet;
                pTp.CleanCounty     = CleanCounty;
                pTp.CleanDistrict   = CleanDistrict;
                pTp.CleanState      = CleanState;   
                pTp.CleanPostalCode = CleanPostalCode;
                pTp.CleanCountry    = CleanCountry;
                pTp.CleanQuality    = CleanQuality;
                pTp.CleanSimilarity = CleanSimilarity;
                pTp.MarkerIconText  = text;
                pTp.ContentKey      = ContentKey;
                pTp.RecordId        = record.Id;
                pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
                pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
                pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
                pTp.PicklistFieldValue = PicklistFieldValue;
                pTp.RelatedListCount = RelatedListCount;
                pTp.PicklistFieldValueEncoded = PicklistFieldValueEncoded;
                                        
                /*
                if (PicklistFieldValue == null)
                {
                    pTp.PicklistFieldValue = "";
                }
                else
                {
                    pTp.PicklistFieldValue = PicklistFieldValue;
                }
                */
                
                //Debug('pTp.PicklistFieldValue - ' + pTp.PicklistFieldValue);              
                
                //Debug("Created pTp Object");
                
                if (Longitude.indexOf(".") > -1)
                {
                    if (record[Longitude.split(".")[0]] != null)
                    {
                        pTp.sObjectId = record[Longitude.split(".")[0]]["Id"];
                        
                        if (Longitude != null)       { pTp.LongitudeField   = Longitude.split(".")[1]; }
                        if (Latitude != null)        { pTp.LatitudeField    = Latitude.split(".")[1]; }
                        
                        
                        if (CleanCity != null)       { pTp.CleanCity     = CleanCity.split(".")[1]; }
                        if (CleanStreet != null)     { pTp.CleanStreet   = CleanStreet.split(".")[1]; }
                        if (CleanCounty != null)     { pTp.CleanCounty   = CleanCounty.split(".")[1]; }
                        if (CleanDistrict != null)   { pTp.CleanDistrict = CleanDistrict.split(".")[1]; }
                        if (CleanState != null)      { pTp.CleanState    = CleanState.split(".")[1]; }
                        if (CleanPostalCode != null) { pTp.CleanPostalCode = CleanPostalCode.split(".")[1]; }
                        if (CleanCountry != null)    { pTp.CleanCountry  = CleanCountry.split(".")[1]; }
                        if (CleanQuality != null)    { pTp.CleanQuality  = CleanQuality.split(".")[1]; }
                        if (CleanSimilarity != null) { pTp.CleanSimilarity = CleanSimilarity.split(".")[1]; }
    
                    }
                    else
                    {
                        //pTp.sObjectId = null;
                    }
                }            
                
                var rLatitude = GetAddressFieldResults(record,Latitude);
                var rLongitude = GetAddressFieldResults(record,Longitude);
               
                /*
                if (pTp.ToolTip1V == "VERNON & EVELYN DORSEY")
                {
                    Debug("Account Found");
                    Debug("aStreetResult: " + aStreetResult);
                    Debug("aCityResult: " + aCityResult);
                    Debug("aStateResult: " + aStateResult);
                    Debug("aZipResult: " + aZipResult);
                    Debug("aCountryResult: " + aCountryResult);
                }
                */
                
                //Does Record have a Lat/Long?
                if (rLatitude == "" || rLongitude == "")
                {
                    //Does Record have an Address?
                    if (aStreetResult == "" && aCityResult == "" && aStateResult == "" && aZipResult == "" && aCountryResult == "")
                    {
                        AddToMissingAddressesTab(pTp,"Missing Address");
                        //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                    }
                    else if (MarkerAddress.length < 3)
                    {                                
                        AddToMissingAddressesTab(pTp,"Missing Address");
                        //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                    }
                    else
                    {
                        //Add to GeoCodeList
                        AddressesToBeGeoCoded.push(pTp);
               
                        if (GeoCurrentRequest < MaxRequestOut)
                        {
                            SendMarkerGeoCodeRequest(AddressesToBeGeoCoded.shift());
                        }
                        
                        UpdateGeoCoderStatus();
                        
                        
                    }
    
                }
                else
                {                
                    var marker = CreateMarkerFromPointToPoint(pTp);
                    
                    ProcessedSavedQueries[QryId].AddMarker(marker);
                    
                    if (pc_Added)
                    {
                        var MarkerCoordinate = new nokia.maps.geo.Coordinate(parseFloat(pTp.Latitude), parseFloat(pTp.Longitude));
                        if (MarkerCoordinate.distance(new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long)))<= (pc_Diameter / 2))
                        {
                            ProcessedSavedQueries[QryId].AddVisibleMarker(marker);
                        }
                    }
                    else
                    {
                        ProcessedSavedQueries[QryId].AddVisibleMarker(marker);
                        //map.objects.add(marker);
                        //ProcessedSavedQueries[QryId].UpdateVisibleMarkersCount();    
                    }                
                }   
            
            
                ++index;
            }
            
            ProcessedSavedQueries[QryId].UpdateVisibleMarkersCount();
        
            if (index < ProcessedSavedQueries[QryId].ExpectedMarkersCount) 
            {
                
                setTimeout(doSavedQueryChunk, 50);
            }
            else
            {
                //Finished Running Array
                Debug("Running Finished Function");
                
                if (SavedQryJSObj.QryType == "Picklist")
                {
                    //var LegendHTML = '<div id="LegendDiv_' + SavedQryJSObj.QryId + '" class="SQLegendDiv">';
                    
                    var LegendHTML = "";
                    
                    LegendHTML += '<div id="LegendDiv_Content" style="padding-top:4px;">';
                    LegendHTML += '<table style="width:100%;"  border="0" cellpadding="0">';
                    
                    DisplayPropertiesOfObject(ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray,0);
                    
                    
                    for(var key in ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray)
                    {
                        Debug("Legend Key: " + key);

                        if (key != undefined && key != "remove" && ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray[key] != undefined)                
                        {
                        
                            value = ProcessedSavedQueries[SavedQryJSObj.QryId].LegendArray[key];
                            
                            //DisplayPropertiesOfObject(value,0);
                            
                            var LegendRow = '';
                                
                            if (value.Count > 0)
                            {
                                LegendRow += '<tr>';
                            }
                            else
                            {
                                LegendRow += '<tr id="CountIsZero" style="display:none;">';
                            }
                                            
                            LegendRow += '<td style="padding:3px 3px 3px 3px;width:15px;"><input type="checkbox" checked="true" value="' + QryId+"_"+value.Value+'_LegendCheck" onclick="LegenedCheckboxClicked(this);"/></td>';
                            LegendRow += '<td>' + value.RawValue + '</td>';
                            LegendRow += '<td>' + value.Count + '</td>';
                            LegendRow += '<td>' + 'of' + '</td>';
                            LegendRow += '<td>' + ProcessedSavedQueries[QryId].ExpectedMarkersCount + '</td>';
                            
                            if (value.Color.indexOf('image:') == 0)
                            {
                            	LegendRow += '<td style="text-align:center;"><img src="/servlet/servlet.FileDownload?file='+value.Color.split('image:')[1]+'" style="height: 20px; max-width: 30px;" /></td>';
                            }
                            else
                            {
                            	LegendRow += '<td style="padding:3px 3px 3px 3px; border:1px solid black;width:20px;background-color:' + value.Color + ';" ></td>';
                            }
                            
                            LegendRow += '</tr>';
                            
                            LegendHTML += LegendRow;
                        }
                        
                    }
                    
                    LegendHTML += '</table>';
                    LegendHTML += '<center><a id="MoreOrLessLink" onclick="ShowMoreOrLessOnLegendDiv(this);">-- More --</a></center>';
                    //LegendHTML += '</div>';
                    
                    
                    
                    $('#PlottedQueriesTable #Row_' + SavedQryJSObj.QryId).find('#PrimaryDIV').append('<center><a onclick="ToggleLegendContent(this);">-- Hide Legend --</a></center>' + LegendHTML);
                    
                }
                
                ProcessedSavedQueries[QryId].SetProccessingStatus();                          
                ProcessedSavedQueries[QryId].PlotVisibleMarkers();        
                //ProcessedSavedQueries[QryId] = ProcessedSavedQryObj;
                
                HideLoadingDialog();
            }
        }
        
        doSavedQueryChunk();

        
    }
    catch (ex)
    {
        Debug('Error Found in the Function - ' + ex.message);
        DisplayPropertiesOfObject(ex,0);
        HideLoadingDialog();
    }
}

function ProcessSavedQryJSObject_HeatMap(SavedQryJSObj,json,$newPlottedQuery)
{
    try
    {
        Debug("Qry rows returned: " + json.ResultsSize);                    
        
        var carRt = /\r/gi;
        var patAmp = /\x26/g;
        
        var records = json.Markers;
        var ToolTipInfoList = json.ToolTipInfoList;
        
        Debug("ToolTipInfoList.length " + ToolTipInfoList.length );
        if(ToolTipInfoList.length != 7)
        {
            Debug("ToolTipInfoList is smaller than 7!");
            return;
        }
        
        var ToolTip1      = new ToolTip(ToolTipInfoList[0]);
        var ToolTip2      = new ToolTip(ToolTipInfoList[1]);
        var ToolTip3      = new ToolTip(ToolTipInfoList[2]);
        var ToolTip4      = new ToolTip(ToolTipInfoList[3]);
        var ToolTip5      = new ToolTip(ToolTipInfoList[4]);
        var ToolTip6      = new ToolTip(ToolTipInfoList[5]);
        var ToolTip7      = new ToolTip(ToolTipInfoList[6]);
        var aStreet       = SavedQryJSObj.aStreet;
        var aCity         = SavedQryJSObj.aCity;
        var aState        = SavedQryJSObj.aState;
        var aZip          = SavedQryJSObj.aZip;
        var aCountry      = SavedQryJSObj.aCountry;
        var BaseObject    = SavedQryJSObj.BaseObject;
        var ImageURL      = SavedQryJSObj.ImageURL;
        var StoredQry     = SavedQryJSObj.StoredQry;
        var Latitude      = SavedQryJSObj.Latitude;
        var Longitude     = SavedQryJSObj.Longitude;
        var QryId         = SavedQryJSObj.QryId;
        
        var PicklistField     = SavedQryJSObj.PicklistField;
        
        var CleanStreet       = SavedQryJSObj.CleanStreet;
        var CleanState        = SavedQryJSObj.CleanState;
        var CleanCity         = SavedQryJSObj.CleanCity;
        var CleanCounty       = SavedQryJSObj.CleanCounty;
        var CleanDistrict     = SavedQryJSObj.CleanDistrict;
        var CleanPostalCode   = SavedQryJSObj.CleanPostalCode;
        var CleanCountry      = SavedQryJSObj.CleanCountry;
        var CleanQuality      = SavedQryJSObj.CleanQuality;
        var CleanSimilarity   = SavedQryJSObj.CleanSimilarity;
        var RelatedListCount  = SavedQryJSObj.RelatedListCount;
        
        var NumberField       = SavedQryJSObj.NumberField;
        Debug('NumberField - ' + NumberField);
        //Debug('PicklistField - ' + PicklistField);
        
        var IconColor   = (SavedQryJSObj.IconColor == null || SavedQryJSObj.IconColor == "") ? "#FFFFFF" : SavedQryJSObj.IconColor;
                
        Debug("11BaseObject: " + BaseObject);
        
        if (Longitude.indexOf(".") > -1)
        {
            var BaseObject = json.NewBaseObject;
        }
         
        Debug("22BaseObject: " + BaseObject);
            
        Debug("ToolTip1.FieldLabel: " + ToolTip1.FieldLabel);
        Debug("ToolTip2.FieldLabel: " + ToolTip2.FieldLabel);
        Debug("ToolTip3.FieldLabel: " + ToolTip3.FieldLabel);
        Debug("ToolTip4.FieldLabel: " + ToolTip4.FieldLabel);
        Debug("ToolTip5.FieldLabel: " + ToolTip5.FieldLabel);
        Debug("ToolTip6.FieldLabel: " + ToolTip6.FieldLabel);
        Debug("ToolTip7.FieldLabel: " + ToolTip7.FieldLabel);    
        
        var expectedResultsSize = json.ResultsSize;
        var heatmapDataPoints = $newPlottedQuery.data('heatmapDataPoints');
        var addressesToGeocode = $newPlottedQuery.data('addressesToGeocode');
                            
        var PicklistFieldValue = "";
        var PicklistFieldValueEncoded = "";

        
        Debug("Records length: " + records.length);
        
        var chunk = 100;
        var index = 0;
        
        function doSavedQueryChunk_HeatMap()
        {
            $newPlottedQuery.find('.HeatMap_Total').html('Processing: ' + $newPlottedQuery.data('processedResultsSize') + ' of ' + $newPlottedQuery.data('expectedResultsSize'));
        
            var cnt = chunk;
            
            while (cnt-- && index < expectedResultsSize) 
            {
                var record = records[index];                                               

                
                //var aStreetResult   = GetAddressFieldResults(record,aStreet).replace(/\n\r?/g, '<br />');
                var aStreetResult   = GetAddressFieldResults(record,aStreet);
                var aCityResult     = GetAddressFieldResults(record,aCity);
                var aStateResult    = GetAddressFieldResults(record,aState);
                var aZipResult      = GetAddressFieldResults(record,aZip);
                var aCountryResult  = GetAddressFieldResults(record,aCountry);                        
                            
               
                /////////////////////////////////////
                var text="";
                
                ////////////////////////////////////////////
                
                
                var MarkerAddress = "";
                var FormatedMarkerAddress = "";
                            
                if (aCountryResult == "")
                {
                    FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult;
                }
                else
                {
                    FormatedMarkerAddress = aStreetResult.replace(/\n\r?/g, '<br />'); + "<br />" + aCityResult + " " + aStateResult + "," + aZipResult + "<br />" + aCountryResult;
                }
                
                if (aCountryResult == "")
                {
                    MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult;
                }
                else
                {
                    MarkerAddress = aStreetResult + "," + aCityResult + " " + aStateResult + "," + aZipResult + "," + aCountryResult;
                }
                
                var ContentKey = QryId + '-' + record.Id;                       
                
                
                var pTp = new Object();
                //pTp.MarkerAddress   = MarkerAddress.slice(0,MarkerAddress.length-1);
                pTp.MarkerAddress   = MarkerAddress;
                pTp.FormatedMarkerAddress = FormatedMarkerAddress;
                pTp.MarkerStreet    = aStreetResult;
                pTp.MarkerCity      = aCityResult;
                pTp.MarkerState     = aStateResult;
                pTp.MarkerZip       = aZipResult;
                pTp.MarkerCountry   = aCountryResult;
                
    
                pTp.ToolTip2L       = ToolTip2.FieldLabel;
                pTp.ToolTip3L       = ToolTip3.FieldLabel;
                pTp.ToolTip4L       = ToolTip4.FieldLabel;
                pTp.ToolTip5L       = ToolTip5.FieldLabel;
                pTp.ToolTip6L       = ToolTip6.FieldLabel;
                pTp.ToolTip7L       = ToolTip7.FieldLabel;
                
                pTp.ToolTip1V       = ToolTip1.Value;
                pTp.ToolTip2V       = ToolTip2.Value;
                pTp.ToolTip3V       = ToolTip3.Value;
                pTp.ToolTip4V       = ToolTip4.Value;
                pTp.ToolTip5V       = ToolTip5.Value;
                pTp.ToolTip6V       = ToolTip6.Value;
                pTp.ToolTip7V       = ToolTip7.Value;
                
                pTp.ImageURL        = ImageURL;
                pTp.sObjectId       = record.Id;
                pTp.Latitude        = GetAddressFieldResults(record,Latitude); //record.Latitude;
                pTp.Longitude       = GetAddressFieldResults(record,Longitude); //record.Longitude
                pTp.LatitudeField   = Latitude;
                pTp.LongitudeField  = Longitude;
                pTp.BaseObject      = BaseObject;
                pTp.BatchAmount     = SavedQryJSObj.BatchAmount;
                pTp.queryName       = SavedQryJSObj.SavedQryName;
                pTp.QryId           = QryId;
                pTp.IconColor       = IconColor;
                
                pTp.CleanCity       = CleanCity;
                pTp.CleanStreet     = CleanStreet;
                pTp.CleanCounty     = CleanCounty;
                pTp.CleanDistrict   = CleanDistrict;
                pTp.CleanState      = CleanState;   
                pTp.CleanPostalCode = CleanPostalCode;
                pTp.CleanCountry    = CleanCountry;
                pTp.CleanQuality    = CleanQuality;
                pTp.CleanSimilarity = CleanSimilarity;
                pTp.MarkerIconText  = text;
                pTp.ContentKey      = ContentKey;
                pTp.RecordId        = record.Id;
                pTp.NumberFieldLabel = SavedQryJSObj.NumberFieldFieldLabel;
                //pTp.NumberFieldValue = FormatsObjectValue(NumberFieldValue,SavedQryJSObj.NumberFieldFieldType,"");
                pTp.PicklistFieldLabel = SavedQryJSObj.PicklistFieldFieldLabel;
                pTp.PicklistFieldValue = PicklistFieldValue;
                pTp.RelatedListCount = RelatedListCount;
                pTp.PicklistFieldValueEncoded = PicklistFieldValueEncoded;
                
                if (Longitude.indexOf(".") > -1)
                {
                    if (record[Longitude.split(".")[0]] != null)
                    {
                        pTp.sObjectId = record[Longitude.split(".")[0]]["Id"];
                        
                        if (Longitude != null)       { pTp.LongitudeField   = Longitude.split(".")[1]; }
                        if (Latitude != null)        { pTp.LatitudeField    = Latitude.split(".")[1]; }
                        
                        
                        if (CleanCity != null)       { pTp.CleanCity     = CleanCity.split(".")[1]; }
                        if (CleanStreet != null)     { pTp.CleanStreet   = CleanStreet.split(".")[1]; }
                        if (CleanCounty != null)     { pTp.CleanCounty   = CleanCounty.split(".")[1]; }
                        if (CleanDistrict != null)   { pTp.CleanDistrict = CleanDistrict.split(".")[1]; }
                        if (CleanState != null)      { pTp.CleanState    = CleanState.split(".")[1]; }
                        if (CleanPostalCode != null) { pTp.CleanPostalCode = CleanPostalCode.split(".")[1]; }
                        if (CleanCountry != null)    { pTp.CleanCountry  = CleanCountry.split(".")[1]; }
                        if (CleanQuality != null)    { pTp.CleanQuality  = CleanQuality.split(".")[1]; }
                        if (CleanSimilarity != null) { pTp.CleanSimilarity = CleanSimilarity.split(".")[1]; }
    
                    }
                    else
                    {
                        //pTp.sObjectId = null;
                    }
                }            
                
                var rLatitude = GetAddressFieldResults(record,Latitude);
                var rLongitude = GetAddressFieldResults(record,Longitude);
                
                //Does Record have a Lat/Long?
                if (rLatitude == "" || rLongitude == "")
                {
                    try {
                        //Does Record have an Address?
                        if (aStreetResult == "" && aCityResult == "" && aStateResult == "" && aZipResult == "" && aCountryResult == "")
                        {
                            AddToMissingAddressesTab(pTp,"Missing Address");
                            //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                        }
                        else if (MarkerAddress.length < 3)
                        {                                
                            AddToMissingAddressesTab(pTp,"Missing Address");
                            //ProcessedSavedQueries[QryId].ProcessedMarkersCount++;
                        }
                        else
                        {
                            //Add to GeoCodeList
                            addressesToGeocode.push(pTp);
                            
                            //UpdateGeoCoderStatus();
                        }
                    }
                    catch (err) {
                        
                    }
                }
                else
                {                
                    //var marker = CreateMarkerFromPointToPoint(pTp);
                    heatmapDataPoints.push({
                        value: 0,
                        latitude: pTp.Latitude,
                        longitude: pTp.Longitude
                    });    
                }   
            
            
                ++index;
                $newPlottedQuery.data('processedResultsSize', $newPlottedQuery.data('processedResultsSize') + 1);
            }
            
            //ProcessedSavedQueries[QryId].UpdateVisibleMarkersCount();
        
            if (index < expectedResultsSize) 
            {
                setTimeout(doSavedQueryChunk_HeatMap, 50);
            }
            else
            {
                //Finished Running Array
                
                Debug("Running Finished Function");
                
                if ($newPlottedQuery.data('batchesToProcess') == 0 && addressesToGeocode.length > 0)
                {
                    $newPlottedQuery.find('.HeatMap_Total').html('Preparing to geocode...');
                
                    $newPlottedQuery.data('expectedGeocodeSize', addressesToGeocode.length);
                    while (addressesToGeocode.length > 0 && $newPlottedQuery.data('currentRequestsOut') < $newPlottedQuery.data('maxRequestsOut'))
                    {
                        SendMarkerGeoCodeRequest_HeatMap(addressesToGeocode.shift(), $newPlottedQuery);
                    }
                }
                else if ($newPlottedQuery.data('batchesToProcess') == 0)
                {
                    $newPlottedQuery.find('.HeatMap_Total').html('Rendering...');
                
                    //there is nothing to geocode so render the heat map
                    var $plottedQuery = $newPlottedQuery;
                    $plottedQuery.find('.HeatMap_Total').html('Plotted: ' + $plottedQuery.data('heatmapDataPoints').length);
                    var heatmapProvider = new nokia.maps.heatmap.Overlay({
                        max: 20,
                        opacity: 1,
                        type: "density",
                        coarseness: 2,
                        sampleDepth: 4,
                        colors: heatMapColorSettings
                    });
                    heatmapProvider.addData($plottedQuery.data('heatmapDataPoints'));
                    map.overlays.add(heatmapProvider);
                    
                    //remove the existing heat map if there is one (this is a quick fix for bad async handling)
                    if ($plottedQuery.data('heatmapProvider'))
                    {
                        map.overlays.remove($plottedQuery.data('heatmapProvider'));
                    }
                    
                    $plottedQuery.data('heatmapProvider', heatmapProvider);
                   
                    
                    $plottedQuery.find('.btn-remove').html("X").css('cursor','pointer').click(function(){
                        map.overlays.remove($(this).closest('tr.PlottedRowUnit').data('heatmapProvider'));
                        $(this).closest('tr.PlottedRowUnit').remove();
                    });
                }
            }
        }
        
        doSavedQueryChunk_HeatMap();

        
    }
    catch (ex)
    {
        Debug('Error Found in the Function - ' + ex.message);
        DisplayPropertiesOfObject(ex,0);
        HideLoadingDialog();
    }
}

function ToggleLegendContent(Obj)
{
     $(Obj).parent().parent().find('#LegendDiv_Content').toggle();
     
     if ($(Obj).html() == '-- Hide Legend --')
     {
         $(Obj).html('-- Show Legend --');
     }
     else
     {
         $(Obj).html('-- Hide Legend --');
     }
}

function ShowMoreOrLessOnLegendDiv(Obj)
{
    //MoreOrLessLink

    
    var $ContentDiv = $(Obj).parent().parent();
    
    if ($(Obj).html() == '-- More --')
    {
        $(Obj).html('-- Less --');
    }
    else
    {
        $(Obj).html('-- More --');
    }
    
    $ContentDiv.find('table').find('#CountIsZero').toggle();
}


function LegenedCheckboxClicked(ElementObj)
{
    try
    {
        Debug("Running checkboxClicked");
        var QryIdArray = ElementObj.value.split("_");
        
        
        if (ProcessedSavedQueries[QryIdArray[0]] != null)
        {
            if (ElementObj.checked)
            {   
                ProcessedSavedQueries[QryIdArray[0]].AddLegendMarkers(QryIdArray[1]);
            }
            else
            {
                ProcessedSavedQueries[QryIdArray[0]].RemoveLegendMarkers(QryIdArray[1]);
            }
        }
    }
    catch (e)
    {
        Debug("Error1 :" + e.message);
        HideLoadingDialog();
    }
}


// JavaScript Document
/*
var PositionMarker
var PositionAccuracyCircle;
var PositionEnabled = false;
var PositioningMgr    = new nokia.maps.positioning.Manager();

FireFox 3.5+,
Google Chrome 5+,
Safari 5+
Opera 10+

*/

function ShowHidePosition()
{
    if (nokia.maps.positioning.Manager) 
    {
        if (PositionEnabled)
        {
            HideBubbles();
            HideMyPosition();
        }
        else
        {
            ShowMyPosition();
        }
    }
    else
    {
        var ErrorNote = 'Supported Browsers: <br />';
        ErrorNote += 'On PC/Mac use' + '<br />';
        ErrorNote += 'FireFox 3.5+,' + '<br />';
        ErrorNote += 'Google Chrome 5+,' + '<br />';
        ErrorNote += 'Safari 5+' + '<br />';
        ErrorNote += 'Opera 10+' + '<br />';
        
        NotifyError("Unsupported Browser",ErrorNote);
    }
}

function HideMyPosition()
{
    map.objects.remove(PositionAccuracyCircle);
    map.objects.remove(PositionMarker);
    
    PositionEnabled = false;
    $('#ShowPositionButton').html('Show Position').removeClass('btn-active');
}

function ShowMyPosition()
{
    PositioningMgr.getCurrentPosition(
        function (position) {
            var coords = position.coords;
            
            var MarkerBubbleContent = '<table cellpadding="3">';
            
            MarkerBubbleContent += '<tr><td><b>Latitude</b></td><td>' + coords.latitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Longitude</b></td><td>' + coords.longitude + '</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Accuracy</b></td><td>' + coords.accuracy + ' meters</td></tr>';
            MarkerBubbleContent += '<tr><td><b>Address</b></td><td id="PositionAddress">' + ' Loading...</td></tr>';
            
            MarkerBubbleContent += '<tr>';
            MarkerBubbleContent += '<td><a class="button1-white" id="AddToTrip-positioning">Add to Trip</a></td>';
            MarkerBubbleContent += '<td><a class="button1-white" id="SetProxCenter-positioning">Set Proximity Center</a></td>';
            MarkerBubbleContent += '</tr>';
            MarkerBubbleContent += '<table>';
            
            PositionMarker = new nokia.maps.map.StandardMarker(coords,{
                    title: 'My Locaiton',
                    visibility: true,
                    Ignore: false,
                    text: 'P',
                    Lat: coords.latitude,
                    Long: coords.longitude,
                    pMarkerContent: MarkerBubbleContent,
                    eventListener: {
                       "click": [function()
                                   {
                                        InfoBubbles.addBubble(this.pMarkerContent, 
                                            new nokia.maps.geo.Coordinate(parseFloat(this.Lat), parseFloat(this.Long)));
                                       
                                        var OuterObj = this;
                                       
                                        $('#AddToTrip-positioning').click(function() {
                                            
                                            $(WayPointLI)
                                                .attr('Lat',OuterObj.Lat)
                                                .attr('Long',OuterObj.Long)
                                                .attr('Address','My Position')
                                                .attr('WayPointTitle','My Position')
                                                .appendTo('#sortable')
                                                .find('input').val('My Position').prop('disabled', true).addClass('DisabledWaypoint');
                                            
                                            
                                            OrderNumbersOnWapPoints();
                                            
                                            
                                            ShowDirectionsTab();
                                            HideBubbles();
                                        });
                                        
                                        $('#SetProxCenter-positioning').click(function() {
                                            
                                            AddOval(OuterObj.Lat,OuterObj.Long);
                                            HideBubbles();
                                        });
                                       
                                        Debug("Starting PositionGeoCoder reverseGeocode");
                                        PositionGeoCoder.reverseGeocode(coords);
                                        
                                   }
                               , false, null]
                       }
                }
            );
            
            //PositionMarker = new nokia.maps.map.StandardMarker(coords);
            //PositionAccuracyCircle = new nokia.maps.map.Circle(coords, coords.accuracy);
            //map.objects.addAll([PositionAccuracyCircle, PositionMarker]);
            map.objects.addAll([PositionMarker]);
            
            //map.zoomTo(PositionAccuracyCircle.getBoundingBox(), false, "default");
            map.zoomTo(PositionMarker.getBoundingBox(), false, "default");
            if (map.zoomLevel > 16) map.set("zoomLevel", 16); //zoom out if too close
            
            PositionEnabled = true;
            $('#ShowPositionButton').html('Hide Position').addClass('btn-active');
        }, 
        function (error) {
            var errorMsg = "Location could not be determined: ";

            if (error.code == 1) errorMsg += "PERMISSION_DENIED";
            else if (error.code == 2) errorMsg += "POSITION_UNAVAILABLE";
            else if (error.code == 3) errorMsg += "TIMEOUT";
            else errorMsg += "UNKNOWN_ERROR";
            PositionEnabled = false;
            NotifyError("Error Getting Position",errorMsg);
            $('#ShowPositionButton').html('Show Position');
            //alert(errorMsg);
        }
    );
    
}

function GoToHomePosition()
{
    if (CenterLat == undefined && CenterLong == undefined && DefaultZoomLevel == undefined)
    {
        NotifyError("Home Not Set","Please Set Your Home First");
    }
    else
    {
        if (CenterLat != undefined && CenterLong != undefined)
        {
             map.setCenter(new nokia.maps.geo.Coordinate(CenterLat,CenterLong));
        }
        
        if (DefaultZoomLevel != undefined)
        {
            map.setZoomLevel(DefaultZoomLevel);
        }
    }
}


// JavaScript Document
function RemoveProximityCircle()
{
    $('#UpdateProxCircleButton').hide();
    map.objects.remove(ProximityCircle);
} 
        
function UpdateProxCircle()
{
    Debug("Update Proximity Circle");
    AddOval(pc_Lat,pc_Long);
}

function AddOval(Lat,Long)
{

    if (map.objects.getLength() > 10000)
    {
        NotifyError("Error!","Must have less than 10000 markers to use Proximity Circle");
    }
    else
    {

        //Check to see if Proximity Window is Open, if not open it.
        OpenMenuIfOpen('ProximityPopup');
        $('#UpdateProxCircleButton').show();
        //ShowLoadingDialog();
        
        StorePreferredMeasurementType();
        
        if (pc_Added)
        {
            //Remove Current Circle
            map.objects.remove(ProximityCircle);
        }
    
        pc_Lat = Lat;
        pc_Long = Long;
    
        Debug("Set pc_Lat: " + pc_Lat);
        Debug("Set pc_Long: " + pc_Long);
    
        var Radius = parseFloat(document.getElementById("ProximityRadius").value);
        var RadiusInMeters;
       
        Debug("Radius: " + Radius);
        
        //Need to Convert to Meters
        var MesType = document.getElementById("ProximityRadiusMeasurementType").value;
        Debug("Radius is in " + MesType);
        
        if (MesType == "MILES")
        {
            //1 Mile = 1609.344 Meters
            RadiusInMeters = 1609.344 * Radius;
        }
        else if (MesType == "KM")
        {
            //1 Kilometer = 1000 Meters
            RadiusInMeters = 1000 * Radius;
        }
        else if (MesType == "METERS")
        {
            RadiusInMeters = Radius;
        }
        else if (MesType == "YARDS")
        {
            //1 Yard = 0.9144 Meters
             RadiusInMeters = 0.9144 * Radius;
        }
        else if (MesType == "FEET")
        {
            //1 Foot = 0.3048 Meters
            RadiusInMeters = 0.3048 * Radius;
        }
        
        Debug("Radius in Meters: " + RadiusInMeters);
        
        pc_Diameter = RadiusInMeters * 2;
        
        Debug("Diameter: " + pc_Diameter + " meters");
            
        
        //Check to make sure the Enabled Checkbox is Checked
        //This is primarily used when setting a marker as a circle center
        //and when using an address
        if (document.getElementById("ProximityCheckbox").checked == false)
        {
            Debug("Proximity Checkbox was not set");
            document.getElementById("ProximityCheckbox").checked = true;
            DOMNode.addListener("click", ClickToCreateProximityCircle,false);
        }
        
        //ProximityCircle
        
       ProximityCircle = new nokia.maps.map.Circle(
            [parseFloat(Lat), parseFloat(Long)], //place the circle center here
            RadiusInMeters, //radius of 8000 meters
            {
              color: "#823f",
              fillColor: "#2387",
              width: 2
            }
          );
        ProximityCircle.addListener("click", ClickToCreateProximityCircle,false);
        map.objects.add(ProximityCircle);
        pc_Added = true;
        
        ChangeDivStatus("ProximityAddressStatus","");
        ChangeVisibilityWhenCircleIsAdded();
        HideLoadingDialog();
    }
}

function ClickToCreateProximityCircle(event)
{
    ShowLoadingDialog();
    
    if (event.target === map) 
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    else if (event.target == ProximityCircle)
    {
        var cord = map.pixelToGeo(event.displayX, event.displayY);
        AddOval(cord.latitude,cord.longitude);
    }
    
    HideLoadingDialog();
    
}

function ProximityCheckChanged(ElementObj)
{
    //alert("ProximityCheckChanged");
    if (ElementObj.checked)
    {
        Debug("ProximityCheckbox Checked");
        DOMNode.addListener("click", ClickToCreateProximityCircle,false);
    }
    else
    {
        ShowLoadingDialog();
        Debug("ProximityCheckbox UnChecked");
        pc_Added = false;
        DOMNode.removeListener("click", ClickToCreateProximityCircle,false);
        RemoveProximityCircle();
        ChangeVisibilityWhenCircleIsAdded();
    }
}


function CreateProximityAddress()
{
    var Address = document.getElementById("ProximityAddress").value;
    
    if (Address != null && Address != "")
    {
        ChangeDivStatus("ProximityAddressStatus","<i>Finding Address....</i>");
        
        Address = Address.replace("\n",",");
        
        Debug("Address is " + Address);
        Debug("Address (encodeURI) is " + encodeURI(Address));
        
        ProximityGeoCoder.geocode(Address);
         
    }
    else
   {
        Debug("Address is Blank");
        ChangeDivStatus("ProximityAddressStatus",'<span style="color:red;font-weight:bold;">Address is Blank</span>');
    }

}
        
function ChangeVisibilityWhenCircleIsAdded()
{


    Debug("Proximity Circle Added or Removed");
    //if (AllLocationMarkers.length > 0)
    if (VisibleQueries.length > 0)
    {
        
        Debug("VisibleQueries: " + VisibleQueries.length);
        
        if (pc_Added)
        {
            var CenterPoint = new nokia.maps.geo.Coordinate(parseFloat(pc_Lat), parseFloat(pc_Long));
            var Radius = (pc_Diameter / 2);
        }
        
        $.each(VisibleQueries, function(index, value) { 
                
            if (ProcessedSavedQueries[value] != null)
            {
                if (pc_Added)
                {
                    ProcessedSavedQueries[value].ChangeDoToProximityCircle(CenterPoint,Radius);
                }
                else
                {
                    ProcessedSavedQueries[value].ShowAllMarkers();
                }
                
            }
            
        });
        
        
    }
    else
    {
        HideLoadingDialog();
    }
    


}

// JavaScript Document

/*
    RouteMode - Car,Truck
    RouteType - Shortest,Fastest,Scenic
    
    Popup - Id=TruckOptions
*/


var WayPointLI = '<li class="ui-state-default"><div class="draggable"></div><span id="RowNumber"></span><input type="text" /><a class="button1-white" onclick="RemoveAddressRow(this);" style="float:right;color:#666;margin:-2px 0 0 0;">Remove</a></li>';




//function AddMarkerToTrip(MarkerTitle,Address,Lat,Long)
function AddMarkerToTrip(pMarker)
{
    //Debug("Address: " + pMarker.MarkerAddress);
    //DisplayPropertiesOfObject(pMarker,0);
    
    Debug("Adding Marker to Trip");
    Debug("Lat: " + pMarker.Lat);
    Debug("Long: " + pMarker.Long);
    Debug("Address: " + pMarker.pTp.MarkerAddress);
    Debug("Waypoint Title: " + pMarker.title);
    
    $(WayPointLI)
        .attr('Lat',pMarker.Lat)
        .attr('Long',pMarker.Long)
        .attr('Address',pMarker.pTp.MarkerAddress)
        .attr('WayPointTitle',pMarker.title)
        .appendTo('#sortable')
        .find('input').val(pMarker.title).prop('disabled', true).addClass('DisabledWaypoint');
    
    OrderNumbersOnWapPoints();
}

function ShowDirectionsTab()
{
    $('#tabs-nav').tabs( "select" , 1 );
}

function OrderNumbersOnWapPoints()
{
    $.each($( "#sortable" ).children(), function(key, value) { 
        $(this).attr('Index',key).find('#RowNumber').html(key + 1);
    });
}
function AddAddressRow()
{
    $( "#sortable" ).append(WayPointLI);
    OrderNumbersOnWapPoints();
}

function RemoveAddressRow(obj)
{
    $(obj).parent().remove();
    OrderNumbersOnWapPoints();
}

/*
function ProcessWayPoints()
{
    Debug("ProcessWayPoints");
    Debug("HasRoutingErrors: " + HasRoutingErrors);
    if (HasRoutingErrors)
    {
        //Can't Process Way Points  
    }
    else
    {
        SlideToDirectionsOutput();
        
        $('#DirectionsOutput').html('<center><img src="' + MALoaddingGIFUrl + '"/><br /><br/><h2>Loading Directions</h2></center>');
        
        
        
        Debug("WayPointArray Count: " + WayPointArray.length);
        
        if (WayPointArray.length >= 2)
        {
            var WayPoints = new nokia.maps.routing.WaypointParameterList();
            
            //Add Each Waypoint to the WayPoints List
            $.each(WayPointArray, function(key, value) { 
                
                Debug("Adding New Element to WayPoints");
                Debug("Lat: " + value.Lat);
                Debug("Long: " + value.Long);
                                           
                WayPoints.addCoordinate(new nokia.maps.geo.Coordinate(parseFloat(value.Lat), parseFloat(value.Long)));
            });
            
            
            var modes = [{
                type: "shortest",
                transportModes: ["car"],
                trafficMode: "default"
            }];
            
            var onRouteCalculated = function(observedRouter, key, value)
                {
                    if (value == "finished") 
                    {
                        try
                        {
                            var routes = observedRouter.getRoutes();
                            //create the default map representation of a route
                            mapRoute = new nokia.maps.routing.component.RouteResultSet(routes[0]).container;
                            map.objects.add(mapRoute);
                            //Zoom to the bounding box of the route
                            map.zoomTo(mapRoute.getBoundingBox(), false, "default");
                      
                            var TotalTime = 0;
                            var TotalLength = 0;
                      
                            var div_content = "<div class=\"st\"><table>";
                      
                            for (var LegIndex=0;  LegIndex < routes[0].legs.length ; LegIndex++)
                            {
                                var DirectionWayPoint = WayPointArray[LegIndex];
                                
                                div_content += "<tr><td colspan=\"2\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></td>";
                                
                                var leg = routes[0].legs[LegIndex];
                                
                                Debug("Length: " + leg.length);
                                Debug("travelTime: " + leg.travelTime);
                                
                                TotalTime += leg.travelTime;
                                TotalLength += leg.length;
                                
                                var Maneuvers = leg["maneuvers"];
                                
                                for (var i = 0 ; i < Maneuvers.length; i++)
                                {
                                    var Maneuver = Maneuvers[i];
                                    
                                    div_content += "<tr>";
                                    div_content += "<td>" + (i + 1) + "</td>";
                                    div_content += "<td>" + Maneuver["instruction"] + "</td>";
                                    div_content += "</tr>";
                                }
                                
                            }
                            
                            var DirectionWayPoint = WayPointArray[WayPointArray.length-1];
                            div_content += "<tr><td colspan=\"2\"><b>" + DirectionWayPoint.WayPointTitle + "</b><br />" + DirectionWayPoint.Address +  "</td></td>";
                            
                            div_content += "</table></div>";
    
                            TotalLength = (TotalLength / 1609.344).toPrecision(2);
                            TotalTime = (TotalTime / 3600).toPrecision(2);
                            
                            document.getElementById('DirectionsOutput').innerHTML = "<b>Distance</b>: " + TotalLength + " miles" ;
                            document.getElementById('DirectionsOutput').innerHTML += "<br /><b>Duration</b>: " + TotalTime + " hours" ;
                            
                            
    
                            document.getElementById('DirectionsOutput').innerHTML += div_content;
                            
                            
                            //document.getElementById("printLink").style.display = "block";
              
                            
                            //document.getElementById("clearDirBtn").className = "btn";
                            //document.getElementById("clearDirBtn").disabled = false;
                            
                            $('#DirectionControls').show();
                        }
                        catch(err)
                        {
                            Debug("Error Occured While Processing Routing Results");
                            NotifyError("Error!.","Error Occured While Processing Routing Results.");
                            DisplayPropertiesOfObject(err,0);
                        }
                    }
                    else if (value == "failed") 
                    { 
                        Debug("The routing request failed.");
                        NotifyError("The routing request failed.","The routing request failed.");
                    }
                    else
                    {
                        Debug("Routing Request Status: " +  value);
                    }
                };
                
          //add the observer function to the router's "state" property
          router.addObserver("state", onRouteCalculated);
          //calculate the route (and call onRouteCalculated afterwards)
          router.calculateRoute(WayPoints, modes);
            
        }
        else
        {
            
        }
    }
}
*/

function GetDirections()
{
    ClearDirectionsFromMap();
       
    
    router = new nokia.maps.routing.Manager() //create a route controller
    
    WayPointArray = new Array();
    HasRoutingErrors = false;
    
    var RequiresGeoCoding = false;
    
    var WPIndex = 0;
    
    $.each($( "#sortable" ).children(), function(key, value) { 
        
        //Does the Attribute Lat Exists?
        if ($(this).attr('Lat') != undefined)
        {
            WayPoint = new Object();
            WayPoint.WayPointTitle = $(this).attr('WayPointTitle');
            WayPoint.Address  = $(this).attr('Address');
            WayPoint.Lat  = $(this).attr('Lat');
            WayPoint.Long  = $(this).attr('Long');
            
            //WayPointArray.push(WayPoint);
            
            WayPointArray[WPIndex] = WayPoint;
            WPIndex++;
        }
        else if ($(this).find('input').val() != "")
        {
            $AddressInput = $(this).find('input');
            
            $AddressInput.removeClass();
            
            Debug("Input Value: " + $AddressInput.val());
            
            RequiresGeoCoding = true;
            
            WayPoint = new Object();
            WayPoint.WayPointTitle = unescape($AddressInput.val());
            WayPoint.Address  = unescape($AddressInput.val());
            WayPoint.Index = WPIndex; //$(this).attr('Index');
            
            RoutingGeoCodeList.add(WayPoint);
            WPIndex++;
        }
        else 
        {
            //Remove Element
            $(this).remove();
        }
        
        
    });
    
    if (!RequiresGeoCoding)
    {
        Debug("Doesn't Require Geocoding");
        ProcessWayPoints();
    } 
}

function ClearDirectionsFromMap()
{
    if (mapRoute != null)
    {
        //Remove Map Elements
        map.objects.remove(mapRoute);
        router.clear(); 
    }
    //Clear Directions Text
    $('#DirectionsOutput').empty();
}

function ClearDirections()
{
    if (mapRoute != null)
    {
        map.objects.remove(mapRoute);
        router.clear();
    }
    
    $('#DirectionsOutput').empty();
    $('#DirectionControls').hide();
    
    //Reset Address Elements
    $('#sortable').empty()
    .append(WayPointLI)
    .append(WayPointLI);
    
    OrderNumbersOnWapPoints();
}
        



function printthis(which) {
                
    var directions = document.getElementById(which).innerHTML;
    
    var newwindow = window.open("","","height=500,width=320,location=0,scrollbars=1");
    directions += '<br><a href="http://www.cloudbilt.com" target="_blank"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
    newwindow.document.write(directions);
    newwindow.focus();
    newwindow.print();
} 

function SendDirectionsEmail()
{
    var EmailAddresses = prompt("Please one or more email addresses separated by ;",UserEmailAddress);
    if (EmailAddresses != null && EmailAddresses != "")
    {        
        var seen = [];
        var LegsArray = [];
        
        for (var LegIndex=0;  LegIndex < RouterResponse[0].legs.length ; LegIndex++)
        {      
            var leg = RouterResponse[0].legs[LegIndex];
            
            var LegObj = new Object();
            LegObj.travelTime = RouterResponse[0].legs[LegIndex].travelTime;
            LegObj.length = RouterResponse[0].legs[LegIndex].length;
                         
            var Maneuvers = leg["maneuvers"];
            var ManeuversArray = [];
                                    
            for (var i = 0 ; i < Maneuvers.length; i++)
            {
                var Maneuver = new Object();
                Maneuver.instruction = Maneuvers[i].instruction;
                ManeuversArray.push(Maneuver);
            }
            
            LegObj.maneuvers = ManeuversArray;            
            LegsArray.push(LegObj);
        }
        
        var RouteObj = new Object();
        RouteObj.legs = LegsArray;
        
        //http://stackoverflow.com/questions/9382167/serializing-object-that-contains-cyclic-object-value 
          
        var MyJSObject = {
                action: 'email_directions',
                replyTo: UserEmailAddress,
                subject: 'Map Anything Directions',
                toAddresses: EmailAddresses.split(";"),
                WayPoints: WayPointArray,
                RouterResponse: RouteObj                
        };
        
        $.ajax({
            url: 'MAEmailAJAXResources',
            type: 'POST',
            dataType: 'JSON',
            data: { MyJSObject: JSON.stringify(MyJSObject) },
            complete: function (response)
            {
                var obj = $.parseJSON(response.responseText);                      
                
                if(obj.success)
                {
                    alert("Your Directions Have Been Sent!");
                }
                else
                {
                    NotifyError("Error Sending Directions Email",obj.error);
                    Debug("Error Sending Directions Email " + obj.error);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) { 
                Debug("<b>Error Sending Directions Email</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Sending Directions Email",textStatus + " : " + errorThrown); 
            }
        }); 
    }
}


// JavaScript Document
function ToolTip(ToolTipInfo)
{
    //Set Defaults
    this.RefFieldName   = ToolTipInfo.RefFieldName; 
    this.Value          = "";
    this.RefID          = "";
    this.FormatedValue  = "";
    this.FieldType      = ToolTipInfo.DisplayType;
    this.FieldLabel     = ToolTipInfo.FieldLabel;
    this.FieldName      = ToolTipInfo.FieldName;
}
        
ToolTip.prototype.PopulateValues = function(record, pAccessible) {
       
    this.Value = "";
    this.RefID = "";
    this.FormatedValue = "";
    if (pAccessible)
    {
        if (this.FieldName != null)
        {
            if (this.FieldName.indexOf(".") > -1)
            { 
                //Is Reference Field
                if (record[this.FieldName.split(".")[0]] != null)
                {
                    var FieldString = String( + "." + this.FieldName.split(".")[1]);
                    var RefFieldString = String( + "." + this.RefFieldName.split(".")[1]);
                    
                    this.Value = record[this.FieldName.split(".")[0]][this.FieldName.split(".")[1]];
                    this.RefID = record[this.RefFieldName.split(".")[0]][this.RefFieldName.split(".")[1]];   
                    this.Value = '<a target="_blank" href="/' + this.RefID + '">' + this.Value + '</a>';
                }
            }
            else
            {
                this.Value = record[this.FieldName];
            }
            
            if (this.Value != "")
            {
                //this.FormatedValue =  FormatsObjectValue(this.Value,this.FieldType,this.RefID)
                this.Value = FormatsObjectValue(this.Value,this.FieldType,this.RefID);
            }       
            
            //Debug("Value: " + this.Value);
            //Debug("RefID: " + this.RefID);
            //Debug("FormatedValue: " + this.FormatedValue);
        }
    }
    else
    {
         this.Value = "Insufficient Privileges";
    }
    
    
};

// JavaScript Document

function SetDefaultMapLocation()
{
    Debug("SetDefaultMapLocation");
    DisplayPropertiesOfObject(map);
    
    $.getJSON("/apex/MAUserAJAXResources","action=set_default_map_location&id=" + UserId + "&zoomlvl=" + map.zoomLevel + "&lat=" + map.center.latitude + "&long=" + map.center.longitude,function(json)
    { 
        if(json.success)
        {
            CenterLat = map.center.latitude;
            CenterLong = map.center.longitude;
            DefaultZoomLevel = map.zoomLevel;
    
            Debug("Default Location Saved");
            alert("Default Location Saved");
        }
        else
        {
            NotifyError("Error Updating Default Location",json.error);
            Debug("Error Updating Default Location " + json.error);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) {        
        Debug("<b>Error Updating Default Location</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Updating Default Location",textStatus + " : " + errorThrown); 
    });
}       
        
function StorePreferredMeasurementType()
{
    if (OnUserLoadEventCompletd)
    {
        $.getJSON("/apex/MAUserAJAXResources","action=store_pref_measure_type&id=" + UserId + "&preftype=" + document.getElementById("ProximityRadiusMeasurementType").value + "&proxrad=" + document.getElementById("ProximityRadius").value,function(json)
        { 
            if(json.success)
            {
                Debug("Updated Preferred Unit of Measurement " + json.id);
            }
            else
            {
                NotifyError("Error Updating Preferred Unit of Measurement:",json.error);
                Debug("Error Updating Preferred Unit of Measurement: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Preferred Unit of Measurement</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Preferred Unit of Measurement",textStatus + " : " + errorThrown); 
        });
    }
}

function ToggleTrafficOverlay()
{
    
    if ($('#ShowTrafficButton').html() == "Show Traffic")
    {
        $('#ShowTrafficButton').html("Hide Traffic").addClass('btn-active');
        map.overlays.add(map.TRAFFIC);
        map.overlays.add(map.TRAFFIC_INCIDENTS);
    }
    else
    {
        $('#ShowTrafficButton').html("Show Traffic").removeClass('btn-active');
        map.overlays.remove(map.TRAFFIC_INCIDENTS);
        map.overlays.remove(map.TRAFFIC);
    }
}

function NotifyError(pTitle,pMessage)
{
    $("#container").notify("create", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: false,
            speed: 100
        }
    );
}

function NotifyWarrning(pTitle,pMessage)
{
    $("#container").notify("create", "Warning-Template", 
        {
            title: pTitle,
            text: pMessage
        },
        {
            expires: 5000,
            speed: 1000
        }
    );
}

function AbleToPlot(SavedQueryId)
{
    Debug("AbleToPlot: " + SavedQueryId);
    if ($.inArray(SavedQueryId, VisibleQueries) >= 0)
    {
        return false;
    }
    else
    {
        return true;
    }
}

function RemoveQueryIdFromVisibleQueries()
{
    /*Deprecated*/
    Debug("This Function Has Been Deprecated, Please Use RemoveSavedQuery(SavedQueryId)");
}

function GetAddressFieldResults(record, FieldName)
{
    var rValue = "";
    
    if (FieldName != null)
    {
        //Debug("GetAddressFieldResults - FieldName: " + FieldName);
        //Debug("GetAddressFieldResults - record: " + record);
        
        if (FieldName.indexOf(".") > -1)
        {
            if (record[FieldName.split(".")[0]] != null)
            {
                rValue = (record[FieldName.split(".")[0]][FieldName.split(".")[1]]) ? record[FieldName.split(".")[0]][FieldName.split(".")[1]] : "";
            }
        }
        else
        {
            rValue  = (record[FieldName]) ? record[FieldName] : "";
        }
    }
    
    return rValue;  
}

function GetFieldLabel(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.label;
        }
    }
    return "";
}

function GetFieldType(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.type;
        }
    }
    return "";
}

function GetFieldReferenceTo(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.relationshipName == FieldName)
        {
            return field.referenceTo;
        }
    }
    return "";
}

function GetRelationshipName(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.relationshipName;
        }
    }
    return "";
}

function unique(arrayName)
{
    //Return Unique Array
    var ReturnArray = new Array();
    $.each(arrayName, 
        function(index, value) 
        { 
            if ($.inArray(value, ReturnArray) < 0)
            {
                ReturnArray.push(value);
            } 
        }
    );
    
    return ReturnArray;
}
        
////////////////////  Format Tooltip Types  /////////////////////////////////////
sforce.internal.stringToDateTime = function(source) {
    var bc = false;
    if (source === null || source.length === 0) {
        throw "Unable to parse dateTime1";
    }

    if (source.charAt(0) == '+') {
        source = source.substring(1);
    }
    if (source.charAt(0) == '-') {
        source = source.substring(1);
        bc = true;
    }

    if (source.length < 19) {
        throw ("Unable to parse dateTime2");
    }

    if (source.charAt(4) != '-' || source.charAt(7) != '-' ||
        source.charAt(10) != 'T') {
        throw ("Unable to parse dateTime3");
    }

    if (source.charAt(13) != ':' || source.charAt(16) != ':') {
        throw ("Unable to parse dateTime4");
    }

    var year = source.substring(0, 4);
    var month = source.substring(5, 7);
    var day = source.substring(8, 10);
    var hour = source.substring(11, 13);
    var min = source.substring(14, 16);
    var sec = source.substring(17, 19);

    var date = new Date(year, month-1, day, hour, min, sec);

    var pos = 19;

    // parse optional milliseconds
    if (pos < source.length && source.charAt(pos) == '.') {
        var milliseconds = 0;
        var start = ++pos;
        while (pos < source.length && sforce.internal.isDigit(source.charAt(pos))) {
            pos++;
        }
        var decimal = source.substring(start, pos);
        if (decimal.length == 3) {
            milliseconds = decimal;
        } else if (decimal.length < 3) {
            milliseconds = (decimal + "000").substring(0, 3);
        } else {
            milliseconds = decimal.substring(0, 3);
            if (decimal.charAt(3) >= '5') {
                ++milliseconds;
            }
        }

        date.setMilliseconds(milliseconds);
    }

    var offset = date.getTimezoneOffset() * 60000;
    //offset in milli;

    // parse optional timezone
    if (pos + 4 < source.length &&
    (source.charAt(pos) == '+' || (source.charAt(pos) == '-'))) {
        
        var hours = (source.charAt(pos + 1) - '0') * 10 + source.charAt(pos + 2) - '0';
        var mins = 0;
        if(source.charAt(pos + 3) == ':' )
        {
            mins = (source.charAt(pos + 4) - '0') * 10 + source.charAt(pos + 5) - '0';
            pos += 6;
        }       
        else
        {
            mins = (source.charAt(pos + 3) - '0') * 10 + source.charAt(pos + 4) - '0';
            pos += 5;
        }
        var mseconds = (hours * 60 + mins) * 60 * 1000;

        // subtract milliseconds from current date to obtain GMT
        if (source.charAt(pos) == '+') {
            mseconds = -mseconds;
        }

        date = new Date(date.getTime() - offset + mseconds);        
    }

    if (pos < source.length && source.charAt(pos) == 'Z') {
        pos++;
        date = new Date(date.getTime() - offset);
    }

    if (pos < source.length) {
        throw ("Unable to parse dateTime " + pos + " " + source.length);
    }

    return date;
};

function FormatsObjectValue(v, type, RefId)
{
    if(v == null) v = "";
    if(v != "")
    {
        type = type.toLowerCase();
        if(type == "boolean")
        {
            v = (!v) ? "FALSE" : "TRUE";
        }
        else if(type == "double")
        {
            v = isNaN(v) || v === '' || v === null ? 0 : v;
            
            //var n = v < 0 ? true : false;
            var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                        
            if(parseFloat(a[1]) > 0)
            {
                v = (b + "." + a[1]); 
            }
            else
            {
                v = b; 
            }           
        }
        else if(type == "currency")
        {
            v = isNaN(v) || v === '' || v === null ? 0.00 : v;
            
            //var n = v < 0 ? true : false;
            var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
            
            v = ("$" + b + "." + a[1]);
            
            
            /*
            v = parseFloat(v).toFixed(2);
            
            for (var i = 0; i < Math.floor((v.length - (1 + i)) / 2.5); i++){
                if(v.indexOf('.') == v.length - (4 * i + 3))
                {
                    v = v.substring(0, v.length - (4 * i + 3) ) + v.substring(v.length - (4 * i + 3));
                }
                else
                {
                    v = v.substring(0, v.length - (4 * i + 2) ) + "," + v.substring(v.length - (4 * i + 2));
                }
            }
            v = "$" + v;
            */
        }
        else if(type == "date")
        {
            /*
            var year = v.substring(0, 4);
            var month = v.substring(5, 7);
            var day = v.substring(8, 10);
            var hrs = v.substring(11, 13);
            var mins = v.substring(14, 16);
            var sec = v.substring(17, 19);
            var d = new Date(year, month, day, hrs, mins, sec);
            d = d.toLocaleDateString();
            v = d;
            */
            v = sforce.internal.stringToDate(v).toLocaleDateString();
        }
        else if(type == "datetime")
        {
            v = sforce.internal.stringToDateTime(v);
            v = v.toLocaleDateString() + " " + v.toLocaleTimeString();
            
            /*
            var year = v.substring(0, 4);
            var month = v.substring(5, 7);
            var day = v.substring(8, 10);
            var hrs = v.substring(11, 13);
            var mins = v.substring(14, 16);
            var sec = v.substring(17, 19);
            var d = new Date(year, month, day, hrs, mins, sec);
            d = d.toLocaleDateString().toLocaleDateString();
            v = d;
            */
        }
        else if (type == "percent")
        {
            v = (v != "") ? v + "%" : "";
        }
        else if (type == "url")
        {
            if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
            {
                v = '<a href="' + v + '" target=_blank>' + v + "</a>";
            }
            else
            {
                v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
            }
        }
        else if(type == "reference")
        {
            v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
        }
        /*
        else
        {
            v = type;
        }
        */
    }
    
    return v;
}

function launchQueryEditor(url)
{
    //scroll to top
    $("html, body").animate({ scrollTop: 0 }, "slow");
    
    //launch editor
    var $dialog = $('#queryeditor-modal');
    $dialog.find('.query-editor-modal-loader').show();
    $dialog.find('.query-editor-modal-content').hide().html('').load(url, function () {
        $dialog.dialog('widget').fadeOut(200, function () {
            $dialog.find('.query-editor-modal-loader').hide(); 
            $dialog.find('.query-editor-modal-content').show();
            $dialog.dialog('widget').fadeIn(200);
            $('#queryeditor-modal').dialog('widget').css({
                left: ($(window).width()/2) - 400,//($('#queryeditor-modal').width()/2),
                top: '30px'
            });
        });
    });
    $dialog.dialog().css('min-height', '0').dialog('widget').css({
        'width': 'auto',
        'top': '30px'
    });

    //add the fade layer
    $('body').append('<div id="fade"></div>');
    $('#fade').css({
        'filter' : 'alpha(opacity=80)', 
        'z-index': '1000'
    }).fadeIn();
}

function CreatePopupWindow(popID,popWidth,noBackground)
{

    //var popID = "popup1";
    //var popURL = "#?w=600";
            
    //Pull Query & Variables from href URL
    //var query= popURL.split('?');
    //var dim= query[1].split('&');
    
    

    //Fade in the Popup and add close button
    $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) });
    
    //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
    //var popMargTop = ($('#' + popID).height() + 100) / 2;
    var popMargTop = 50;
    var popMargLeft = ($('#' + popID).width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#' + popID).css({ 
        'top' : popMargTop,
        'margin-left' : -popMargLeft
    });
    
    //Fade in Background
    if (typeof noBackground == 'undefined') {
        $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
        $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer
    } 
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ClosePopupWindow()
{
    $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
}

function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug(GenDash(LevelsDeep) + '<b>' + key + '</b>: ' + obj[key]);
        
        if (typeof(obj[key]) == "object")
        {
            //DisplayPropertiesOfObject(obj[key],LevelsDeep+1);
        } 
    }
}
        
function GenDash(LevelsDeep)
{
    if (LevelsDeep == 0)
        return '';
    else if (LevelsDeep == 1)
        return "-";
    else if (LevelsDeep == 2)
        return "--";
    else if (LevelsDeep == 3)
        return "---";
    else if (LevelsDeep == 4)
        return "----";
    else if (LevelsDeep == 5)
        return "-----";
    else if (LevelsDeep == 6)
        return "------";
    else if (LevelsDeep == 7)
        return "-------";
    else
        return "--------";
}

function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function ClearDebugWindow()
{
    $('#DebugOut').html("<b>Log Cleared</b>");
}

function ShowSavedQryPopup()
{

    $('#tabs-SavedQry').tabs({remote:true}); 
    jscolor.init();
    
    $('#LoadingPopup').fadeOut();
    
    $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
    $('#fade').css({'filter' : 'alpha(opacity=80)'}); //Fade in the fade layer 
    
    $('#SavedQueryPopup').fadeIn().css({ 'width': Number( 700 ) });
    

    var popMargLeft = ($('#SavedQueryPopup').width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#SavedQueryPopup').css({ 
        'margin-left' : -popMargLeft,
        'max-height': '550px'
    });
    
    //$('#SavedQueryPopup').css("top", (($(window).height() - $('#SavedQueryPopup').outerHeight()) / 2) + $(window).scrollTop() + "px");
    $('#SavedQueryPopup').css("top", "150px");
}

function MoveMapComponentsRight()
{
    /*
    ZoomBar.node.style.marginLeft           = "310px";
    ZoomRectangle.node.style.marginLeft     = "239px";
    ViewControl.node.style.marginLeft       = "310px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "50px";
    */
}

function MoveMapComponentsLeft()
{    
    /*
    ZoomBar.node.style.marginLeft           = "5px";
    ZoomRectangle.node.style.marginLeft     = "-67px";
    ViewControl.node.style.marginLeft       = "5px";
    ZoomBar.node.style.marginTop            = "40px";
    ZoomRectangle.node.style.marginTop      = "300px";
    ViewControl.node.style.marginTop        = "40px";
    ScaleBarComponent.node.style.marginLeft = "-250px";
    */
}

function OpenMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":hidden"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function CloseMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":visible"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function DisplayMapViewPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapToolsPopup');

    $('#MapViewPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function DisplayMapToolsPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#MapToolsPopup').slideToggle('normal', function() {
        // Animation complete.
    });  
}

function DisplayProximityPopup()
{
    CloseMenuIfOpen('MapToolsPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#ProximityPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function PreparePickListEntry(str)
{
    return str.replace(/\s/g,"");
}

function ChangeDivStatus(DivId,str)
{
    document.getElementById(DivId).innerHTML = str;
}

function ShowLoadingDialog()
{
    Debug("ShowLoadingDialog");
}

function HideLoadingDialog()
{
    $('#modalPage123').hide();
}

function ZoomToFit()
{ 
    /*
    var ZoomFitContainer = new nokia.maps.map.Container();
    
    //loop through all visible queries
    $.each(VisibleQueries, function(index, value) 
    {  
        //make sure this query has been processed
        if (ProcessedSavedQueries[value] != null) 
        {
            DisplayPropertiesOfObject(ProcessedSavedQueries[value]);
            
            ZoomFitContainer.objects.addAll(ProcessedSavedQueries[value].VisibleMarkersArray);
        }
    });
    
    map.zoomTo(ZoomFitContainer.getBoundingBox(),false,"default");
    */
    
    //loop through the plotted queries to see if they are all heat maps
    var allHeatMaps = true;
    $('#PlottedQueriesContainer .PlottedRowUnit').each(function () {
        if (!$(this).is('.HeatMap')) {
            allHeatMaps = false;
            return false;
        }
    });
    
    //if we only have heat maps, zoom out to country level
    if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0 && allHeatMaps) {
        map.setZoomLevel(5);
    }
    else {
        map.zoomTo(map.getBoundingBox(),false,"default");
    }
}

function HideBubbles()
{
    for (var i = 0; InfoBubbles.openBubbleHandles.getLength(); i++)
    {
        InfoBubbles.removeBubble(InfoBubbles.openBubbleHandles.get(0));
    }
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ModifyPlottedSavedQueryCount()
{
    if (VisibleQueries.length > 0)
    {
        $('#PlottedSavedQueryCount').html('(' + VisibleQueries.length + ')');
    }
    else
    {
        $('#PlottedSavedQueryCount').html('');
    }
}
function ShowAddressNotFoundPopup()
{
    CreatePopupWindow("AddressNotFoundPopup",600);
}

function SlideToTree()
{
    slider1.goToFirstSlide();
    $('#TreeTab').removeClass('TreeTab-Inactive'); 
    $('#TreeTab').addClass('TreeTab-Active');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Active'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToPlottedQueries()
{
    slider1.goToSlide(1);
    $('#TreeTab').removeClass('TreeTab-Active'); 
    $('#TreeTab').addClass('TreeTab-Inactive');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Inactive'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Active');
}

//DirectionsInputTab
function SlideToLocations()
{
    slider2.goToFirstSlide();
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsInputTab').addClass('TreeTab-Active'); 
}

//DirectionsOutputTab
function SlideToDirectionsOutput()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab,#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Active');
}

//DirectionsOptionsTab
function SlideToDirectionsOptions()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsOptionsTab').addClass('TreeTab-Active'); 
}

function MakeActiveSliderTab(id)
{
    $('#' + id).removeClass('PlottedQueriesTab-Inactive'); 
    $('#' + id).addClass('PlottedQueriesTab-Active');
}

function MakeInactiveSliderTab(id)
{
    $('#' + id).removeClass('TreeTab-Active'); 
    $('#' + id).addClass('TreeTab-Inactive');
}

function CloseDebugWindow()
{
    ClosePopupWindow();
}

function FormatAddressFromNokiaObj(NokiaAddressObj)
{
    var street = NokiaAddressObj.street;
    var city = NokiaAddressObj.city;
    var state = NokiaAddressObj.state;
    var country = NokiaAddressObj.country;
    var county = NokiaAddressObj.county ;
    var district = NokiaAddressObj.district;
    var postalcode = NokiaAddressObj.postalCode;
    var suite = NokiaAddressObj.suite;
    var FloorNumber = NokiaAddressObj.floor;
    var houseNumber = NokiaAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}

function FormateAddressFromJSAPIAddressObj(JSAPIAddressObj)
{
    var street = JSAPIAddressObj.street;
    var city = JSAPIAddressObj.city;
    var state = JSAPIAddressObj.state;
    var country = JSAPIAddressObj.country;
    var county = JSAPIAddressObj.county ;
    var district = JSAPIAddressObj.district;
    var postalcode = JSAPIAddressObj.postalCode;
    var suite = JSAPIAddressObj.suite;
    var FloorNumber = JSAPIAddressObj.floor;
    var houseNumber = JSAPIAddressObj.houseNumber;
                       
    
    var CompiledStreet = (houseNumber != null) ? houseNumber + ' ' : '';
    CompiledStreet += street;
    CompiledStreet += (FloorNumber != null) ? ' Floor:' + FloorNumber + ' ': '';
    CompiledStreet += (suite != null) ? ' Suite:' + suite + ' ': '';
    
    var AddressArray = new Array();
    
    if (street != null) { AddressArray.push(street); }
    if (city != null) { AddressArray.push(city); }
    if (state != null) { AddressArray.push(state); }
    if (postalcode != null) { AddressArray.push(postalcode); }
    

    return AddressArray.join(", ");
    
}


function EmailDebugLog()
{
    var DebugLogComments = prompt("Comments:","");
    var EmailDebugLogArray = new Array();
    EmailDebugLogArray.push('bbrantly@cloudbilt.com');
    
    var MyJSObject = {
            action: 'email_debug_log',
            replyTo: UserEmailAddress,
            subject: 'Map Anything Debug Log',
            htmlBody: '<b>Comments: </b>' + DebugLogComments + '<br /><br />' + $('#DebugOut').html(),
            toAddresses: EmailDebugLogArray
    };
    
    $.ajax({
        url: 'MAEmailAJAXResources',
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                alert("Debug Log Sent!");
            }
            else
            {
                NotifyError("Error Sending Debug Log Email",obj.error);
                Debug("Error Sending Debug Log Email " + obj.error);
            }
        }
    });
}

function queryEditorClose ()
{
    //$.colorbox.close();
    $('#queryeditor-modal').dialog('destroy');
    $('#fade').fadeOut(function() {
        $('#fade').remove();  
    });
}
function queryEditorSaveComplete (queryId, query)
{
    if (query.id)
    {
        //this was an edit
        DoOnCompleteEditSavedQry(query.name, queryId, query.colorAssignmentType);
    }
    else
    {
        //this was new
        DoOnCompleteNewForSavedQry(
            query.name, 
            queryId, 
            query.folderId, 
            query.folderType.indexOf('Personal') == -1 ? 'CorporateSavedQuery' : 'PersonalSavedQuery', 
            "false", 
            query.colorAssignmentType == 'Static' ? 'Standard' : 'Legend',
            query.colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery'
        );
    }
    
    //update the icon color
    try
    {
    	updateIcon($("#SQTree #"+queryId).attr('IconColor', query.iconColor));
    }
    catch (err) { }
    
    queryEditorClose();
}
    
</script>

      <style>
      
      
          .DisabledWaypoint
            {
                background-color: #CCC; 
            } 
            
            .BadGeocodeForWaypoint
            {
                background-color: ff1111;
            }
            
            .GoodGeocodeForWaypoint
            {
                background-color: 55ff55;
            }
            </style>  
            
    <!-- Hidden Communication Vars -->
    <apex:form >
        <apex:inputHidden id="serializedDefaultQueries" value="{!serializedDefaultQueries}" />
    </apex:form>

<div class="MapViewPopup" id="MapViewPopup" style="right:205px;">

    <a class="bullet-bluearrow" id="NormalMapView" style="width:92px;text-align:left;display:block;float:left;clear:both;"><div class="bullet-bluearrow"></div>Normal View</a><br />
    <a class="bullet-bluearrow" id="TerrainMapView" style="margin-top:5px;width:92px;text-align:left;display:block;float:left;clear:both;"><div class="bullet-bluearrow"></div>Terrain View</a><br />
    <a class="bullet-bluearrow" id="SatelliteMapView" style="margin-top:5px; width:92px;text-align:left;display:block;float:left;clear:both;"><div class="bullet-bluearrow"></div>Satellite View</a><br />
    <a class="close-button" onclick="DisplayMapViewPopup();"></a>
</div>

<div class="ProximityPopup" id="ProximityPopup" style="right:3px;">

<div class="header">

                <div style='clear: both;'>
                    <label>Proximity On:</label><input type="checkbox" id="ProximityCheckbox" onclick="ProximityCheckChanged(this);" style="display:block;float:left;margin:1px 0 0 8px;" />
                </div>
                <div style='clear: both;'>
                    <label>&quot;Map It&quot; Proximity On:</label><input type='checkbox' class='mapit-proximity-on' style="display:block;float:left;margin:1px 0 0 8px;" onclick="StoreMASettings();" />
                </div>

</div><!--header-->


            <div class="indent">
            <p>Radius:</p>
            <input style="display:block;float:left;position:relative;clear:both;margin-right:10px;width:50px;" type="text" size="5" id="ProximityRadius" />
            <select style="display:block;float:left;position:relative;height:20px;" id="ProximityRadiusMeasurementType">
                <option value="MILES">Miles</option>
                <option value="KM">Km</option>
                <option value="METERS">Meters</option>
                <option value="YARDS">Yards</option>
                <option value="FEET">Feet</option>
            </select>
            <a class="button1-blue" style="display:none;float:left;position:relative;" id="UpdateProxCircleButton"  onclick="UpdateProxCircle();">Update</a>
            
          <p>Address:</p>
        <textarea  rows="2" cols="20" id="ProximityAddress" style="display:block;float:left;position:relative;clear:both;width:210px;margin:2px 0 0 0;" ></textarea> 
        <div class="proximity-create" style="display:block;float:left;position:relative;margin:10px 0 0 0;width:100%;">
        <a class="button1-blue" style="margin-left:0;" onclick="CreateProximityAddress();">Create</a>
        <span id="ProximityAddressStatus" style="display:block;float:left;position:relative;clear:none;margin:9px 0 0 0;"></span>
        </div><!--proximity-create-->
        <a class="close-button" onclick="DisplayProximityPopup();"></a>
</div></div>

<div class="MapToolsPopup" id="MapToolsPopup" style="right:3px;">

    <div class="header">
    <p class="label">Map View Tools</p>
    </div>
    
    <div class="indent">

    <a class="bullet-bluearrow" id="SetAsHomeButton"><div class="bullet-bluearrow"></div>Set as Home</a>

    </div>
    
    <div class="header">    
    <p>Map Utilities</p>
    </div>
    
    <div class="indent">
    <a class="bullet-bluearrow" id="ShowDebugWindowButton"><div class="bullet-bluearrow"></div>Debug Window</a>
    <a class="bullet-bluearrow" id="AddressesNotFoundButton"><div class="bullet-bluearrow"></div>Addresses Not Found</a>
    <!---<a class="bullet-bluearrow" id="ExportButton"><div class="bullet-bluearrow"></div>Export</a> --->
    </div>
    
    
    
<a class="close-button" onclick="DisplayMapToolsPopup();"></a>
</div><!--MapToolsPopup-->

<div class="MAToolBar" style="border:none;width:99%;">
 
    <table style='width: 100%'>
        <tr>
            <td style='white-space: nowrap; vertical-align: top;'>
                <div id="logo-mapanything"></div>
            </td>
            <td style='white-space: nowrap; text-align: right; vertical-align: top;'>
                <a class="btn lightgray" onclick="AddVisibleToCampaign();" id="AddToCampaignButton" style='display: none;'>Add To Campaign</a>
                <a class="btn lightgray" onclick="ShowHidePosition();" id="ShowPositionButton">Show Position</a>
                <a class="btn lightgray" onclick="GoToHomePosition();" id="ShowPositionButton">Go Home</a>
                <a class="btn lightgray" onclick="EnableDisableZoombox();" style="cursor:pointer;" id="ZoomBoxButton">Enable Zoombox</a>
                <a class="btn lightgray" id="ZoomToFitButton">Zoom to Fit</a>
                <a class="btn lightgray" id="ShowTrafficButton" style="width:60px;text-align:center;">Show Traffic</a>
                <div class="btn-divider"></div>
                <a class="btn white" onclick="DisplayMapViewPopup();">Normal View<div class="btn-dropdown-arrow-blue"></div></a>
                <a class="btn white" onclick="DisplayProximityPopup();">Proximity<div class="btn-dropdown-arrow-blue"></div></a> 
                <a class="btn white" onclick="DisplayMapToolsPopup();">Map Tools<div class="btn-dropdown-arrow-blue"></div></a>
            </td>
        </tr>
    </table>

<script>
$(function(){

    /*UNKNOWN UNKNOW UNKNOW UNKNOW UNKNOW UNKNOW */
    $("ul.dropdown li").hover(function(){
    
        $(this).addClass("hover");
        $('ul:first',this).css('visibility', 'visible');
    
    }, function(){
    
        $(this).removeClass("hover");
        $('ul:first',this).css('visibility', 'hidden');
    
    });
    
    $("ul.dropdown li ul li:has(ul)").find("a:first").append(" &raquo; ");

});
</script>

<script>

</script>

     
   </div>
    
  <div id='sidebar'>
    <div id="sidebar-content">
    
    <div id="tabs-nav">
    
    <ul>
        <li><a href="#tab-queries">Queries</a></li>
        <li><a href="#tab-directions">Directions</a></li>
        <li><a href="#tab-export">Export</a></li>
    </ul>
    
    <div id="tab-queries">
    <div class="slider-tabs" style="display:block;float:left;margin:5px 0 0 0;padding:0;width:100%;">
    <div style="display:block;float:left;padding:0;margin:0;width:46%;">
        <a id="TreeTab" class="TreeTab-Active"><div class="bullet-bluearrow-left"></div>Tree</a>
    </div>
   
    <div style="display:block;float:right;padding:0;margin:0;width:46%;">
    <a id="PlottedQueriesTab" class="PlottedQueriesTab-Inactive"><div class="bullet-bluearrow-right"></div>Plotted Queries<span id="PlottedSavedQueryCount"></span></a>
    </div>
    </div><!--slider-tabs-->
    
<div id="slider1">
  <div id="Slider-Tree">
    <div id="SQTree" class="demo" style="padding-top:3px;"></div>
  </div>
  
  <div id="Slider-PlottedSavedQueries" style="display:block;float:left;overflow:auto;padding:0;margin-top:10px;">
  <div style="display:block;float:left;margin:0;padding:0;">
    <h1 style="margin-top:0;padding-top:0;">Plotted Saved Queries</h1>

    <div id="PlottedQueriesContainer" style="display:block;float:left;width:100%;"  >
        <table id="PlottedQueriesTable" cellpadding="2" cellspacing="0">
        
        </table>
    </div>

    <div id="TestMe" style="color:black;"></div>
    </div>
  </div>
  <div>
    Blank Slide
  </div>
</div>
        
      
    </div><!--queries-->
    <div id="tab-directions">
    
     <div class="slider-tabs" style="display:block;float:left;margin:5px 0 0 0;padding:0;width:100%;">
    <div style="display:block;float:left;padding:0;margin:0;width:46%;">
    <a id="DirectionsInputTab" class="TreeTab-Active"><div class="bullet-bluearrow-left"></div>Locations</a>
    </div>
   
    <div style="display:block;float:right;padding:0;margin:0;width:46%;">
    <a id="DirectionsOutputTab" class="PlottedQueriesTab-Inactive"><div class="bullet-bluearrow-right"></div>Directions</a>
    </div>
    </div><!--slider-tabs-->
    
    
    
       <div id="slider2">
        <div id="Slider-DirectionsInput">


        <b>Directions Options</b>
        <table cellpadding="3" style="margin-bottom:5px;">
            <tr>
                <td><b>Mode:</b></td>
                <td>
                    <select id="RouteMode">
                      <option value="car">Car</option>
                      <option value="truck">Truck</option>
                    </select> 
                </td>
            </tr>
            <tr>
                <td><b>Type:</b></td>
                <td>
                    <select id="RouteType">
                      <option value="shortest">Shortest</option>
                      <option value="fastest">Fastest</option>
                      <option value="scenic">Scenic</option>
                    </select> 
                </td>
            </tr>
        </table>
        
        <!--
            <a onclick="CreatePopupWindow('TruckOptions','650');">TruckOptions</a>
         -->

        

        <div id="DirectionsInput" style="overflow:auto; margin-bottom:5px;padding:0 5px 5px 0;border-bottom:1px solid #ddd;">
            <ul id="sortable">
                <li class="ui-state-default" index="0">
                <div class="draggable"></div>
                    <span id="RowNumber">1</span>
                    <input type="text" />
                    <a class="button1-white" onclick="RemoveAddressRow(this);" style="float:right;color:#666;margin:-2px 2px 0 0;">Remove</a>
    
                </li>
                <li class="ui-state-default" index="1">
                <div class="draggable"></div>
                    <span id="RowNumber">2</span>
                    <input type="text" />
                    <a class="button1-white" onclick="RemoveAddressRow(this);" style="float:right;color:#666;margin:-2px 2px 0 0;">Remove</a>
                </li>
            </ul>

        </div>
              <a class="button1-white" onclick="AddAddressRow();">Add Row</a> 
              <a class="button1-white" onclick="ClearDirections();">Clear</a> 
              <a class="button1-blue" style="float:right;margin-bottom:3px;" onclick="GetDirections();">Get Directions</a> 
            
       </div><!--Slider-DirectionsInput-->
       
       <div id="Slider-DirectionsOutput" style="overflow:auto;">     
           <span style="font-family:helvetica,arial,sans-serif;font-size:12px;color:#006DB4;font-weight:bold;">Directions</span>
            
            <div id="DirectionControls" style="display:none; width:100%;">
            <a class="button1-white" onclick="printthis('DirectionsOutput');">Print</a> 
            <a class="button1-white" onclick="SendDirectionsEmail();">Email Directions</a> 
            <a class="button1-white" onclick="ClearDirections();">Clear</a> 
        </div>
        <br /> <br />
            
                  
        <div id="DirectionsOutput" style="overflow:auto;display:block;float:left;width:100%;">
        
        </div>
        </div><!--Slider-DirectionsOutput-->
        <div>
        Blank Slide
        </div>
        </div><!--slider1-->
        
    </div><!--directions-->
    
    
    <div id="tab-export">
        

       
        <div style="display:block;float:left;width:100%;">
        <span style="display:block;float:left;margin-top:5px;font-family:helvetica,arial,sans-serif;font-size:12px;color:#000;font-weight:bold;">Name:</span>
        <input style="display:block;float:right;margin:3px 0 0 7px;padding:2px 5px 2px 5px;height:12px;width:200px;" type="text" id="ExportName" />
        </div>
        
        <div style="display:block;float:right;width;100%;margin:0;padding:8px 0 5px 0;">
        <a class="button1-blue" style="float:right;margin-bottom:3px;margin-right:0;" onclick="DoExport();">Submit</a> 
        <a class="button1-white" style="float:right;margin-bottom:3px;margin-right:0;" onclick="ClearExport();">Clear Exports</a> 
        </div>
        
        <div id="exportedTable">
        
        <apex:outputPanel id="MAExportsRepeat">
            <table class="exported">
                <tr>
                    <th style="width:65%;border-right:1px solid #fff;">Export Name</th>
                    <th style="width:28%;">Export Date</th>
                </tr>
                
                <apex:repeat value="{!MAExports}" var="e" >
                    <tr>
                        <td><a href="/apex/MapAnythingExport?expID={!e.Id}" target="_blank">{!e.Name}</a></td>
                        <td><apex:outputField value="{!e.CreatedDate}"/></td>
                    </tr>
                </apex:repeat>
            </table>   
        </apex:outputPanel>
        
        </div>
        
        <apex:outputPanel id="ExportPageMessages">
            <apex:pagemessages ></apex:pagemessages>
        </apex:outputPanel>
    
    
    
    </div><!--End Export Tab-->
    
    
     </div><!--tabs-->
     </div><!--sidebar-content-->
    
</div><!--sidebar-->





<div id="left-shadow"></div>
 <div id="sidebar-button">
 <img id="gearIcon" title="Collapse/Expand Menu" onmouseover="this.className = 'gearIconOn';" onmouseout="this.className = 'gearIcon';" onfocus="this.className = 'gearIconOn';" onblur="this.className = 'gearIcon';" alt="Collapse/Expand Menu" src="/s.gif" />   
</div><!--sidebar-button-->




    <div id="mapdiv" style="width:99%;">
        <!-- Zoom Bar -->
        <div class='tools-zoom'>
            <div class='zoom-bar-wrapper'>
                <div class='zoom-bar'>
                    <div class='zoom-bar-slider'></div>
                    <div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div><div class='zoom-bar-level'></div>
                </div>
                
                <div class='zoom-level street' data-zoom-level='17'>
                    <div class='zoom-level-highlight'></div>
                    <div class='zoom-level-label'>Street</div>
                </div>
                <div class='zoom-level city' data-zoom-level='11'>
                    <div class='zoom-level-highlight'></div>
                    <div class='zoom-level-label'>City</div>
                </div>
                <div class='zoom-level state' data-zoom-level='8'>
                    <div class='zoom-level-highlight'></div>
                    <div class='zoom-level-label'>State</div>
                </div>
                <div class='zoom-level country' data-zoom-level='5'>
                    <div class='zoom-level-highlight'></div>
                    <div class='zoom-level-label'>Country</div>
                </div>
            </div>
            <div class='zoom-toggle'>
                <div class='zoom-toggle-plus'><div class='zoom-toggle-plus-icon'></div></div>
                <div class='zoom-toggle-minus'><div class='zoom-toggle-minus-icon'></div></div>
            </div>
        </div>
        
        <div id="top-shadow"></div>
        <div id="right-shadow"></div>
        <div id="bottom-shadow"></div>
        <div id="topleft-shadow"></div>
        <div id="topright-shadow"></div>
        <div id="bottomleft-shadow"></div>   
        <div id="bottomright-shadow"></div> 
    </div>

<div id="map-footer" style="display:block;float:left;clear:both;width:100%;height:25px;margin:8px 0 0 0;background:#fff;">    
<div style="display:block;float:left;">
    <!-- <a id="footer-logo" href="http://cloudbilt.com" target="_blank"></a> -->
    <a href="http://cloudbilt.com" target="_blank"><img src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" style='width: 100px;' /></a>
</div>

<div style="display:block;float:right;">

    <table>
        <tr>
            <td><b>Geocoding</b></td>
            <td style="text-align:right;"><b>Request Pending:</b></td>
            <td id="GeoRequestPending"></td>
            <td style="text-align:right;"><b>Current Request:</b></td>
            <td id="GeoCurrentRequest"></td>
            <td style="text-align:right;"><b>Sent Request:</b></td>
            <td id="GeoSentRequest"></td>
            <td style="text-align:right;"><b>Processed Request:</b></td>
            <td id="GeoProcessedRequest"></td>
        </tr>
    </table>

</div><!--float-right-->

</div><!--footer-->
    
    <div id="RangeColorsDiv" style="text-align:center;"></div>
    
    <style>
        #container a

        {

            color:white;

        }

    </style>
    
<div id="container">
    <div id="basic-template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:red;">#{title}</h1>
        <p>#{text}</p>
    </div>
    <div id="Warning-Template">
        <a class="ui-notify-cross ui-notify-close" href="#">x</a>
        <h1 style="color:yellow;">#{title}</h1>
        <p>#{text}</p>
    </div>
</div>

<div id="DebugWindowPopup" class="popup_block">
    <h2>Debug Log</h2>
    <div id="DebugOut"></div>
    <br />
    <br />
    <a class="button1-blue" onclick="ClosePopupWindow();">Close</a>
    <a class="button1-lightgray" onclick="ClearDebugWindow();">Clear</a>
    <a class="button1-lightgray" onclick="EmailDebugLog();">Email Log</a>
    
</div>

<div id="AddressNotFoundPopup" class="popup_block">
    <h2>Addresses Not Found</h2>
    <div id="MissingAddressesContent" ></div>
    <br />
    <br />
    <a class="button1-blue" href="javascript:ClosePopupWindow();">Close</a>
</div>

<style>
    .SavedQueryPopupStyle 
    {
        font-family:"Helvetica Neue", Helvetica, arial, sans-serif;
        font-size: 12px;
    }
    
    #SavedQueryPopup div,span,input,select,option
    {
        font-family:"Helvetica Neue", Helvetica, arial, sans-serif;
        font-size: 12px;
    }

</style>


<div id="SavedQueryPopup" class="popup_block">
<apex:form >
    
    
             <h1>Create/Edit Saved Query</h1>
    
    <apex:outputPanel id="SavedQueryPopupUserMessages">
        <apex:pageMessages />
        <apex:outputText value="{!JavascriptOutput}" escape="false"/>
    </apex:outputPanel>
    
    <apex:outputPanel id="SavedQueryPopupOP">
    
    <apex:pageMessages />
    
    <div style="border: 1px solid #C7C7C7;padding:5px;margin:5px 0 10px 0;background:#efefef;">
        <h2>Information</h2>
                
        <table cellpadding="2" cellspacing="0" >
            <tr>
                <td style="width:100px;"><b>Name</b></td>
                 <td><apex:inputText value="{!SavedQueryObj.Name}"/></td>
             </tr>
             <tr>
                 <td><b>Base Object</b></td>
                 <td>{!NewSavedQueryBaseObjectName}</td>
             </tr>
        </table>
    
    </div>
    
    
    <div id="tabs-SavedQry">
        <ul>
            <li><a href="#tab-Filters">Filters</a></li>
            <li><a href="#tab-Tooltips">Tooltips</a></li>
            <li><a href="#tab-Color">Color</a></li>
        </ul>
        <div id="tab-Filters">
            
                      
                          <apex:dataTable var="sr" value="{!SelectionRows}" cellspacing="3" >
                              <apex:column headerClass="QryRowNumbers" styleClass="QryRowNumbers" width="25">
                                  
                                  <apex:actionStatus id="RowCountStatus">
                                      <apex:facet name="start">
                                          <apex:image value="{!URLFOR($Resource.sma__MapAnything, 'ajax-loader.gif')}"/>
                                      </apex:facet>
                                      <apex:facet name="stop">
                                          <apex:outputText value="{!sr.RowCount}. "></apex:outputText>
                                      </apex:facet>
                                  
                                  </apex:actionStatus>
                                  
                                  
                              </apex:column>
                              <apex:column headerValue="Field" style="vertical-align:top;">
                                  <apex:selectList id="fcol" value="{!sr.FieldName}" size="1" multiselect="false">
                                      <apex:selectOptions value="{!ObjectSchemaFields}"></apex:selectOptions>
                                      <apex:actionSupport event="onchange" status="OperatorStatus" action="{!sr.FieldSelected}" reRender="ValueSectionOP,OperatorSelect,ErrorMessages,ParentFieldOP"/>
                                  </apex:selectList>
                                  
                                  <apex:outputPanel id="ParentFieldOP">
                                      <apex:outputPanel rendered="{!sr.ShowParentFieldList}">
                                          <br />
                                          <apex:selectList size="1" multiselect="false" value="{!sr.ParentFieldName}" style="font-family: 'Helvetica Neue',Helvetica,arial,sans-serif;font-size: 12px;">
                                              <apex:selectOptions value="{!sr.ParentFields}"></apex:selectOptions>
                                              <apex:actionSupport event="onchange" status="OperatorStatus" action="{!sr.ParentFieldSelected}" reRender="ValueSectionOP,OperatorSelect,ErrorMessages,ParentFieldOP"/>
                                          </apex:selectList>
                                      </apex:outputPanel>
                                  </apex:outputPanel>
                                  
                              </apex:column>
                              <apex:column headerValue="Operator" style="vertical-align:top;">
                                  <apex:actionStatus id="OperatorStatus">
                                      <apex:facet name="start">
                                          <apex:selectList disabled="true">
                                              <apex:selectOption itemValue="Please Wait..."/>
                                          </apex:selectList>
                                      </apex:facet>
                                      <apex:facet name="stop">
                                          <apex:selectList value="{!sr.Operator}" size="1" multiselect="false" id="OperatorSelect">
                                              <apex:selectOptions value="{!sr.Operators}"></apex:selectOptions>
                                          </apex:selectList>
                                      </apex:facet>
                                  
                                  </apex:actionStatus>
                                  
                                  
                              </apex:column>
                              <apex:column headerValue="Value" style="vertical-align:top;">
                                  
                                  <apex:outputPanel id="ValueSectionOP">
                                      
                                      <apex:inputText value="{!sr.Value}" rendered="{!sr.ShowInputText}"/>
      
                                      <apex:outputPanel rendered="{!sr.ShowSelectCheckboxes}">
                                             
                                          <div style="overflow: auto;  height:100px;">
                                              <apex:selectCheckboxes layout="pagedirection"  value="{!sr.SelectedPicklistValues}" >
                                                  <apex:selectOptions value="{!sr.PickListValues}" />
                                              </apex:selectCheckboxes>
                                          </div>
                                          
                                      </apex:outputPanel>
                                      <apex:outputPanel rendered="{!sr.ShowSelectList}">
                                          
                                          <apex:selectRadio value="{!sr.Value}" >
                                              <apex:selectOptions value="{!sr.PickListValues}" />
                                          </apex:selectRadio>
                                          
                                      </apex:outputPanel>
                                  </apex:outputPanel>
                                  
                              </apex:column>
                              <apex:column >
                                  <apex:outputPanel id="StaticAndCondition">
                                      <apex:outputPanel rendered="{!NOT(sr.IsFirstRow) && NOT(FilterLogic)}">
                                          AND
                                      </apex:outputPanel>
                                  </apex:outputPanel>
                              </apex:column>
                          </apex:dataTable>
                        
                            <table cellpadding="2" cellspacing="0" >
                                <tr>
                            <td><b>Logic Filter</b></td>
                            <td>
                                <apex:outputPanel id="FilterLogicPanel">
                                    <apex:CommandLink value="Add" action="{!AddFilterLogic}" rendered="{!NOT(FilterLogic)}" id="FilterLogicAdd" rerender="FilterLogicPanel,StaticAndCondition"/>
                                        
                                    <apex:inputText size="50" value="{!FilterLogicString}" id="FilterLogicStringId" rendered="{!FilterLogic}" />
                                    &nbsp;<apex:CommandLink value="Remove" action="{!RemoveFilterLogic}" rendered="{!FilterLogic}" id="FilterLogicRemove" rerender="FilterLogicPanel,StaticAndCondition"/>
                                </apex:outputPanel>
                            </td>
                        </tr>
                            </table>
        </div>
        <div id="tab-Tooltips">
            
            <table style="width:100%;" cellpadding="5">
                <tr>
                    <td style="vertical-align:top;">
                        <table cellpadding="5" cellspacing="0">
                            <tr>
                                <td style="white-space: nowrap"><b>Tooltip 1</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip1__c}" id="pf1"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 2</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip2__c}" id="pf2"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 3</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip3__c}" id="pf3"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 4</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip4__c}" id="pf4"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 5</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip5__c}" id="pf5"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 6</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip6__c}" id="pf6"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                            <tr>
                                <td><b>Tooltip 7</b></td>
                                <td>
                                    <apex:selectList size="1" value="{!SavedQueryObj.sma__Tooltip7__c}" id="pf7"  >
                                        <apex:selectOptions value="{!ToolTipObjectSchemaFields}" />
                                    </apex:selectList>
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="vertical-align:top;text-align:right;">
                        <img align="right" src="{!URLFOR($Resource.MapAnything, 'images/ToolTipsHelpImage.png')}"/>
                    </td>
                
                </tr>
            </table>
        </div>
        <div id="tab-Color">
            <table cellpadding="2" cellspacing="0" >
                <tr>
                    <td><b>Assignment Type</b></td>
                    <td>
                        <apex:selectList value="{!SavedQueryObj.sma__ColorAssignmentType__c}"  size="1">
                            <apex:selectOption itemValue="Static" itemLabel="Static"/>
                            <apex:selectOption itemValue="Dynamic, Field" itemLabel="Dynamic, Field"/>
                            <apex:actionSupport event="onchange" rerender="ColorStepTwoPBSILabel,ColorStepTwoPBSIField,ColorPickListFields" oncomplete="jscolor.init();" />
                        </apex:selectList>
                    </td>
                </tr>
                <tr>
                    <td class="SavedQueryPopupStyle">
                        <b><apex:outputtext styleClass="SavedQueryPopupStyle" id="ColorStepTwoPBSILabel" value="{!IF(SavedQueryObj.sma__ColorAssignmentType__c=='Static','Icon Color','Picklist Field')}" /></b>
                    </td>
                    <td>
                        <apex:outputPanel id="ColorStepTwoPBSIField">
                            <apex:outputPanel rendered="{!IF(SavedQueryObj.sma__ColorAssignmentType__c=='Static',true,false)}" >
                                <apex:inputText value="{!SavedQueryObj.sma__IconColor__c}" styleClass="color" size="10"/>
                            </apex:outputPanel>                       
                            <apex:outputPanel rendered="{!IF(SavedQueryObj.sma__ColorAssignmentType__c=='Static',false,true)}" >
                                <apex:SelectList value="{!SavedQueryObj.sma__PicklistField__c}" size="1" styleClass="SavedQueryPopupStyle">
                                    <apex:SelectOptions value="{!PickListOptions}" />
                                    <apex:actionSupport action="{!ChangePicklistField}" event="onchange" rerender="ColorPickListFields" oncomplete="jscolor.init();" />
                                </apex:SelectList>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <apex:outputPanel id="ColorPickListFields">
                            <apex:outputPanel rendered="{!SavedQueryObj.sma__ColorAssignmentType__c!='Static' && SavedQueryObj.sma__PicklistField__c != null}">    
                                <div style="max-height:175px; overflow:auto; width:100%;">
                                    <apex:dataTable value="{!ColorList}" var="CL" cellpadding="3" id="PickListColors" styleClass="SavedQueryPopupStyle">
                                         <apex:column headerValue="Picklist Value" value="{!CL.Value}" />
                                         <apex:column >
                                            <apex:facet name="header">
                                                <apex:actionstatus id="DynamicallyAssignColorsStatus">
                                                    <apex:facet name="stop">
                                                        <apex:commandLink value="Colors (Dynamically Assign)" status="DynamicallyAssignColorsStatus" action="{!DynamicallyAssignColors}" rerender="PickListColors"  oncomplete="jscolor.init();"/>
                                                    </apex:facet>
                                                    <apex:facet name="start">
                                                        <i>Please Wait...</i>
                                                    </apex:facet>
                                                </apex:actionstatus>
                                            </apex:facet>
                                         <apex:inputText value="{!CL.Color}" styleClass="color"/></apex:column>
                                     </apex:dataTable>
                                 </div>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    
  <div class="hr"></div>
    
    <div style="display:block;">
    <div class="save" style="display:block;float:left;position:relative;">
   
                <apex:actionStatus id="SaveStatus">
                     <apex:facet name="stop">
                         <apex:commandButton styleClass="btn-blue" status="SaveStatus" value="Save" action="{!SaveAndStartOver}" reRender="SavedQueryPopupUserMessages" />
                     </apex:facet>
                     <apex:facet name="start">
                         <apex:commandButton styleClass="btn-blue"  value="Please Wait..." disabled="true"/>
                     </apex:facet>
                 </apex:actionStatus>
                              <a class="button1-white" onclick="CloseDebugWindow();">Close</a>
    </div>

      </div>
    </apex:outputPanel>
    
    
    <apex:actionFunction action="{!NewSavedQuery}" name="NewSavedQueryAF" rerender="SavedQueryPopupOP,SavedQueryPopupUserMessages" oncomplete="ShowSavedQryPopup();">
        <apex:param name="firstParam" assignTo="{!NewSavedQueryBaseObjectId}" value="" />
        <apex:param name="secondParam" assignTo="{!NewSavedFolderId}" value="" />
        <apex:param name="thirdParam" assignTo="{!ParentNodeType}" value="" />
        <apex:param name="SavedQueryOperation" assignTo="{!SavedQueryOperation}" value="New" />
    </apex:actionFunction>

    <apex:actionFunction action="{!EditSavedQry}" name="EditSavedQueryAF" rerender="SavedQueryPopupOP,SavedQueryPopupUserMessages" oncomplete="ShowSavedQryPopup();">
        <apex:param name="firstParam" assignTo="{!SavedQueryToModify}" value="" />
        <apex:param name="SavedQueryOperation" assignTo="{!SavedQueryOperation}" value="Edit" />
    </apex:actionFunction>
    
    <apex:actionFunction action="{!CloneSavedQry}" name="CloneSavedQueryAF" rerender="SavedQueryPopupOP,SavedQueryPopupUserMessages" oncomplete="ShowSavedQryPopup();">
        <apex:param name="firstParam" assignTo="{!SavedQueryToModify}" value="" />
        <apex:param name="SavedQueryOperation" assignTo="{!SavedQueryOperation}" value="Clone" />
    </apex:actionFunction>
    
    
    <apex:actionFunction name="PopulateMAExportsAF" reRender="MAExportsRepeat,ExportPageMessages" action="{!PopulateMAExports}"/>
    <apex:actionFunction name="DeleteExportsAF" reRender="MAExportsRepeat,ExportPageMessages" action="{!DeleteExports}"/>
    
    </apex:form>
</div>

<div id="ExportPopup" class="popup_block">
    <h2>Export</h2>
    <br />
    <br />
    <a class="button1-blue" href="javascript:ClosePopupWindow();">Close</a>
</div>
<div id="LoadingPopup" class="popup_block">
    <table>
        <tr>
            <td>
                <img src="{!$Resource.MapLoadingGif}" />
            </td>
            <td style="vertical-align:middle;">
                <b>Loading...</b>
            </td>
        </tr>
    </table>
    
</div>


<div id="TruckOptions" class="popup_block">
    <h2>Truck Options</h2>
    
    <table cellpadding="5">
        <tr>
            <td style="vertical-align:top;"><b>Hazardous Goods</b></td>
            <td>
                <table>
                    <tr>
                        <td><input type="checkbox" name="explosive" value="explosive" />Explosive</td>
                        <td><input type="checkbox" name="gas" value="gas" />Gas</td>
                        <td><input type="checkbox" name="flammable" value="flammable" />Flammable</td>
                        <td><input type="checkbox" name="combustible" value="combustible" />Combustible</td>
                        <td><input type="checkbox" name="organic" value="organic" />Organic</td>
                    </tr>
                    <tr>
                        <td><input type="checkbox" name="poison" value="poison" />Poison</td>
                        <td><input type="checkbox" name="radioActive" value="radioActive" />Radio-Active</td>
                        <td><input type="checkbox" name="corrosive" value="corrosive" />Corrosive</td>
                        <td colspan="2"><input type="checkbox" name="other" value="other" />Other<br /></td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <input type="checkbox" name="poisonousInhalation" value="poisonousInhalation" />Poisonous upon Inhalation<br />
                        </td>
                        <td colspan="3">
                            <input type="checkbox" name="harmfulToWater" value="harmfulToWater" />Harmful to Water<br />
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td style="vertical-align:top;"><b>Truck &amp; Trailer</b></td>
            <td>
                <table cellpadding="3">
                    <tr>
                        <td><b>Height</b></td>
                        <td><input type="text" name="email" size="10" /></td>
                        <td style="color:#909090;">Maximum truck height in meters.</td>
                    </tr>
                    <tr>
                        <td><b>Width</b></td>
                        <td><input type="text" name="width" size="10"/></td>
                        <td style="color:#909090;">Maximum truck width in meters.</td>
                    </tr>
                    <tr>
                        <td><b>Length</b></td>
                        <td><input type="text" name="length" size="10" /></td>
                        <td style="color:#909090;">Maximum truck length in meters.</td>
                    </tr>
                    <tr>
                        <td><b>Trailer Weight</b></td>
                        <td><input type="text" name="trailerWeight" size="10"/></td>
                        <td style="color:#909090;">Maximum trailer weight in tons.</td>
                    </tr>
                
                </table>
            </td>
        </tr>
    
    </table>
    
    <a class="button1-blue" href="javascript:ClosePopupWindow();">Save &amp; Close</a>
</div>

<div id='queryeditor-modal' style='display: none;'>
    <div class='query-editor-modal-loader'>Loading...</div>
    <div class='query-editor-modal-content'></div>
</div>

<!-- Tooltip Template -->
<div id='tooltip-content-template' style='display: none;'>

    <!-- Header -->
    <div class='tooltip-header'>
    
        <!-- Record Name -->
        <div class='name'>
            <a href="/::Id::" target="_blank">::Name::</a>
        </div>
        
        <!-- Record Address -->
        <div class='address'>::Address::</div>
        
    </div>
    
    <!-- Tabs -->
    <div class='tabs' ContentKey="::ContentKey::">
        <ul>
            <li id='tab-info'><a href="#pane-info-::ContentKey::">Info</a></li>
            <li id='tab-actions'><a href="#pane-actions-::ContentKey::">Actions</a></li>
            <li id='tab-chatter' style='display: none;'><a href="#pane-chatter-::ContentKey::">Chatter</a></li>
            <li id='tab-relatedlist' style='display: none;'><a href="#pane-relatedlist-::ContentKey::">Related List</a></li>
        </ul>
        
        <!-- Info Tab -->
        <div id="pane-info-::ContentKey::">
        
            <!-- Picklist Info -->
            <div class="picklistinfo" style='display: none;'>
                <b>Legend Information</b>
                <table>
                    <tr>
                        <td><b>::PicklistFieldLabel::</b></td>
                        <td>::PicklistFieldValue::</td>
                    </tr>
                </table>
            </div>
            
            <!-- Tooltips -->
            <div class="tooltips">
                <table>
                    
                </table>
            </div>
            
        </div>
        
        <!-- Actions Tab -->
        <div id="pane-actions-::ContentKey::">
            <table style="text-align:center;vertical-align:middle;">
                <tr>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="AddToTrip-::ContentKey::" data-label='Add to Trip'>Add to Trip</a></td>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="SetProxCenter-::ContentKey::" data-label='Set Proximity Center'>Set Proximity Center</a></td>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="width:100px;" id="RemoveMarker-::ContentKey::" data-label='Remove Marker'>Remove Marker</a></td>
                </tr>
                
                <tr class='activitybuttons' style='display: none;'>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="text-decoration:none;width:100px;" target="_blank" href="/_ui/core/email/author/EmailAuthor?::EmailURL::" data-label='Send Email'>Send Email</a></td>                                
                    <td style="width:33%;"><a class="button1-white actionbutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=log_call&id=::Id::" data-label='Log a Call'>Log a Call</a></td>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_task&id=::Id::" data-label='New Task'>New Task</a></td>
                </tr>
                
                <tr class='activitybuttons' style='display: none;'>
                    <td style="width:33%;"><a class="button1-white actionbutton" style="text-decoration:none;width:100px;" target="_blank" href="/apex/MapActions?action=new_event&id=::Id::" data-label='New Event'>New Event</a></td>
                    <td style="width:33%;"></td>
                    <td style="width:33%;"></td>
                </tr>
            </table>
        </div>
        
        <!--Chatter Tab -->
        <div id="pane-chatter-::ContentKey::" class='loading'>
        </div>
        
        <!-- Related Lists Tab -->
        <div id="pane-relatedlist-::ContentKey::">
            <div id="ajax-::ContentKey::"></div>
        </div>
    </div>
</div>

<div id='templates' style='display: none;'>

    <!-- Plotted Query Templates -->
    <table>
        
        <!-- Heat Map -->
        <tr class="PlottedRowUnit HeatMap">
            <td>
                <div style="margin:0;padding:0;">
                    <table style="width:270px;">
                        <tr>
                            <td rowspan="2" style="width:16px;">
                                <div class='btn-remove' style="padding:0px 0px 0px 0px;">
                                    <img class='LoadingGif'/>
                                </div>
                            </td>
                            <td colspan="2">
                                <b class='title'></b>
                            </td>
                            <td rowspan="2" style="width:12px;text-align:left;">
                                <div style="padding:0px 0px 0px 0px; width: 10px; height: 10px;"></div>
                            </td>
                        </tr>
                        <tr>
                            <td class='subtitle' style="color:gray;"></td>
                            <td style="text-align:left;">
                                <span>
                                    <table cellpadding="2" cellspacing="0" align="left">
                                        <tr>
                                            <td><span class="HeatMap_Count"></span></td>
                                            <td></td>
                                            <td><span class="HeatMap_Total" style='color: #757575; font-size: 10px; font-style: italic;'></span></td>
                                        </tr>
                                    </table>
                                </span>
                            </td>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        
    </table>
    
</div>

<script>

    function EnableDisableZoombox()
    {
        //<div class='dragzoomlayer' style='position: absolute; width: 100%; height: 100%; z-index: 1;'></div>
        
        //Check if DIV with class dragzoomlayer exists
        
        Debug('dragzoomlayer:' + $('.dragzoomlayer').length);
        
        if ($('.dragzoomlayer').length > 0)
        {
            //Remove DIV
            $('#ZoomBoxButton').html('Enable Zoombox').removeClass('btn-active');
            $('.dragzoomlayer').remove();
        }
        else
        {
            //Add DIV
            $('#ZoomBoxButton').html('Disable Zoombox').addClass('btn-active');
            $('#mapdiv').prepend('<div class="dragzoomlayer" style="position: absolute; width: 100%; height: 100%; z-index: 1;"></div>');
            
             $('.dragzoomlayer')
                      .drag("start",function( ev, dd ){
                        return $("<div class='dragzoomproxy'></div>").appendTo(document.body);
                      })
                      .drag(function( ev, dd ){
                        $( dd.proxy ).css({
                                    top: Math.min( ev.pageY, dd.startY ),
                                    left: Math.min( ev.pageX, dd.startX ),
                                    height: Math.abs( ev.pageY - dd.startY ),
                                    width: Math.abs( ev.pageX - dd.startX )
                                 });
                      })
                    .drag("end",function( ev, dd ){
                             $( dd.proxy ).remove();
                        
                            //DisplayPropertiesOfObject($('#mapdiv'),0);
                            var offset = $('#mapdiv').offset();
                            Debug("left: " + offset.left + ", top: " + offset.top);
                            
                            var StartX = dd.startX - offset.left;
                            var StartY = dd.startY - offset.top;
                            var PageX = ev.pageX - offset.left;
                            var PageY = ev.pageY - offset.top;
                            var DeltaX = dd.deltaX;
                            var DeltaY = dd.deltaY;
                            
                            Debug("StartX: " + StartX);
                            Debug("StartY: " + StartY);
                            Debug("PageX: " + PageX);
                            Debug("PageY: " + PageY);
                            Debug("DeltaX: " + DeltaX);
                            Debug("DeltaY: " + DeltaY);
                            
                            
                            //zoom the map
                            var pointValues = [StartX + StartY, PageX + PageY, StartX + PageY, PageX + StartY];
                            
                            var pointValueToGeoMap = {};
                            pointValueToGeoMap[StartX + StartY] = map.pixelToGeo(StartX + StartY);
                            pointValueToGeoMap[PageX + PageY] = map.pixelToGeo(PageX + PageY);
                            pointValueToGeoMap[StartX + PageY] = map.pixelToGeo(StartX + PageY);
                            pointValueToGeoMap[PageX + StartY] = map.pixelToGeo(PageX + StartY);
                            
                            
                            
                            //DisplayPropertiesOfObject(pointValues,0);
                            //Debug("startX: " + dd.startX);
                            //Debug("startY: " + dd.startY);
                            //Debug("pageX : " + ev.pageX );
                            //Debug("pageY: " + ev.pageY);
                            
                            var coord = map.pixelToGeo(StartX + Math.floor(DeltaX / 2), StartY + Math.floor(DeltaY / 2));
                            
                            //infoBubbles.openBubble("Clicked at " + coord, coord);
                            //return;
                            
                            //new nokia.maps.geo.BoundingBox (topLeft, [bottomRight, [skipValidation]])
                            
                            var TopLeft = pointValueToGeoMap[Math.min.apply(null, pointValues)];
                            var BottomRight = pointValueToGeoMap[Math.max.apply(null, pointValues)];
                            
                            
                            var boundingBox = new nokia.maps.geo.BoundingBox(TopLeft, BottomRight);
                            map.setZoomLevel(map.getBestZoomLevel([boundingBox]));
                            map.setCenter(coord);
                            
                });
        }
    
    }

$(function(){
    
   


    /*
    $('#bodyTable').css({'height':(($(window).height())-361)+'px'});
    $('#mapdiv').css({'height':(($(window).height())-220)+'px'});    
    $('#sidebar').css({'height':(($(window).height())-220)+'px'});   
    $('#left-shadow').css({'height':(($(window).height())-220)+'px'}); 
    $('#right-shadow').css({'height':(($(window).height())-220)+'px'});   
    $('#SQTree').css({'height':(($(window).height())-330)+'px'});  
    $('#Slider-PlottedSavedQueries').css({'height':(($(window).height())-330)+'px'});      
    $('#sidebar-content').css({'height':(($(window).height())-230)+'px'});  
    $('#sidebar').css({'height':(($(window).height())-230)+'px'});  
    $('#tabs-nav').css({'height':(($(window).height())-270)+'px'});   
    $('#tabs-queries').css({'height':(($(window).height())-270)+'px'});  
    $('#tabs-directions').css({'height':(($(window).height())-270)+'px'});  
    $('#DirectionsInput').css({'height':(($(window).maxHeight())-270)+'px'});  
    $('#DirectionsOutput').css({'height':(($(window).maxHeight())-290)+'px'});
    */
 });

</script>


</apex:page>