<apex:page sidebar="false" showHeader="false" controller="sma.EditQuery" action="{!init}">

	<script type='text/javascript'>
		if (typeof $ == 'undefined')
		{
			document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'js/jquery-1.7.1.min.js')}'></script"+">");
			document.write("<script type='text/javascript' src='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.min.js')}'></script"+">");
			document.write("<link rel='stylesheet' type='text/css' href='{!URLFOR($Resource.MapAnything, 'jquery/jquery-ui.css')}'></link"+">");
			document.write("<script type='text/javascript' src='{!URLFOR($Resource.QueryEditor, 'js/date.js')}'></script"+">");
		}
	</script>
        
    <!-- jQuery Combo Box (depends on jQuery UI) -->
    <script src="{!URLFOR($Resource.QueryEditor, 'js/combobox/jquery.combobox.js')}" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/combobox/jquery.combobox.css')}" />
    
    <!-- jQuery Multiselect (depends on jQuery UI) -->
    <script src="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.min.js')}" type="text/javascript"></script>
    <script src="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.filter.js')}" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.css')}" />
    <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.QueryEditor, 'js/multiselect/jquery.multiselect.filter.css')}" />
    
    <!-- jQuery Query (used for interacting with query string) -->
    <script src="{!URLFOR($Resource.QueryEditor, 'js/jquery.query.js')}" type="text/javascript"></script>
    
    <!-- JS Color -->
    <apex:includeScript value="{!URLFOR($Resource.sma__MapAnything, 'jscolor/jscolor.js')}"/>

    <!-- CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'css/style.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.sma__MapAnything, 'style.css')}"/>
    <style type='text/css' class='editquery-css'>
        html, body {
            width: 100%;
            height: 100%;
        }
        .modal-layer {
        	display: none;
            position: absolute;
            z-index: 1;
            width: 100%;
            height: 100%;
            background-color: #000000;
            opacity: 0.5;
            -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity = 50);
            filter: alpha(opacity = 50);
        }
    
        /* Basics */
        #savedqueryeditor-error {
        	padding: 15px;
            width: 800px;
            overflow: hidden;
        
        	{! IF(pageState != 'error', 'display: none;', '') }
        }
        #savedqueryeditor-error h3 {
        	display: block;
        	margin: 10px 0;
        	color: #757575;
        }
        #savedqueryeditor { 
            padding: 15px;
            width: 800px;
            height: 600px;
            overflow: hidden;
            
            {! IF(pageState != 'edit', 'display: none;', '') }
        }
        #savedqueryeditor div {
        	padding: 0;
        	margin: 0;
        }
        #savedqueryeditor-templates {
        	display: none;
        }
        span.link
        {
            color: blue;
            cursor: pointer;
        }
        span.link.small
        {
            font-size: 10px;
            font-weight: bold;
        }
        .dateliteralpicker
        {
            cursor: pointer;
        }
        .value input.invalid
        {
            background: transparent url({!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-cross-16.png')}) no-repeat right center;
        }
        .ui-autocomplete
        {
            z-index: 99999 !important;
            max-height: 300px !important;
        	overflow-y: auto;
        	overflow-x: hidden;
        }
        .PICKLIST > ul, .filterbyowner ul
        {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .PICKLIST li, .filterbyowner li
        {
            padding: 0;
            margin: 0;
        }
        #savedqueryeditor tr > td.actions > div, #savedqueryeditor tr > td.crossfilteractions > div, #savedqueryeditor tr > td.activitysubfilteractions > div
        {
        	display: none;
        }
        #savedqueryeditor tr:hover > td.actions > div, #savedqueryeditor tr:hover > td.crossfilteractions > div, #savedqueryeditor tr:hover > td.activitysubfilteractions > div
        {
        	display: block;
        }
        #savedqueryeditor .activityfilter-type-wrapper
        {
        	padding: 10px;
        	margin: 5px 0;
	        -moz-border-radius: 4px;
			-webkit-border-radius: 4px;
			border-radius: 4px;
			-moz-box-shadow: inset 0px 0px 8px #757575;
			-webkit-box-shadow: inset 0px 0px 8px #757575;
			box-shadow: inset 0px 0px 8px #757575;
        }
        
        /* Tabs */
        #savedqueryeditor .tabs
        {
            background: none;
            border: none;
        }
        #savedqueryeditor .tabs > ul
        {
            width: auto;
            padding: 0 8px;
            background: none;
            border: none;
            border-bottom: 1px solid #CCC;
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
        }
        #savedqueryeditor .tabs > ul li
        {
            background-color: #006DB4;
            background: #006DB4;
            background: url('images/blue-tab-bg.png');
            background-repeat: repeat-x;
            background-position: top;
            background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#197BBB), to(#0059A0));
            background: -webkit-linear-gradient(top, #197BBB, #0059A0);
            background: -moz-linear-gradient(center top , #197BBB 20%, #0059A0 100%) repeat scroll 0 0 transparent;
            background: -ms-linear-gradient(top, #197BBB, #0059A0);
            background: -o-linear-gradient(top, #197BBB, #0059A0);
            border: medium none;
            border-radius: 3px 3px 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            
            
            
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#197BBB', endColorstr = '#0059A0')";
        }
        #savedqueryeditor .tabs > ul li.ui-tabs-selected
        {
            background: none;
            border: 1px solid #CCC;
            border-top-right-radius: 3px;
            border-top-left-radius: 3px;
            background: white;
            color: #222;
            
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FFFFFF', endColorstr = '#FFFFFF');
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#FFFFFF', endColorstr = '#FFFFFF')";
        }
        #savedqueryeditor .tabs > ul li a
        {
            color: #ffffff;
            font-size: 12px;
        }
        #savedqueryeditor .tabs > ul li.ui-tabs-selected a
        {
            color: #2265BB;
        }
        #savedqueryeditor .tabs > .ui-tabs-panel
        {
        	padding: 15px;
        	margin-bottom: 10px;
        	border-bottom: 1px solid silver;
        	max-height: 420px;
        	overflow-x: hidden;
        	overflow-y: auto;
        }
        
        /* Boxes */
        #savedqueryeditor .box.gray {
            border: 1px solid #C7C7C7;
            padding:5px;
            margin:5px 0 10px 0;
            background:#efefef;
        }
        
        /* Sections */
        #savedqueryeditor .section {
        	position: relative;
        }
        #savedqueryeditor .section .section-header {
            color: #2265BB;
        }
        #savedqueryeditor .section .section-buttons {
        	position: absolute;
        	top: 5px;
        	right: 5px;
        }
        #savedqueryeditor .section .section-buttons .section-button {
        	padding-left: 18px;
            height: 16px;
        	line-height: 18px;
        	font-size: 10px;
        	cursor: pointer;
        }
        #savedqueryeditor .section .section-buttons .section-button.add {
        	background: transparent url("{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-plus-16.png')}") left center no-repeat;
        }
        
        /* Hide filter by owner section if this object is not ownable */
        #savedqueryeditor .filterbyowner
        {
            display: {! IF(isOwnable, 'block', 'none') };
        }
        
        /* Forms */
        #savedqueryeditor table.form td:first-child {
            font-weight: bold;
            padding-right: 15px;
        }
        
        /* Buttons */
        #savedqueryeditor .buttons {
        	padding: 0 10px;
        }
        #savedqueryeditor .buttons .btn {
        	width: 50px;
        }
        
        /* Comboboxes */
        #savedqueryeditor .ui-combobox
        {
        	padding-right: 0;
        }
        #savedqueryeditor .ui-combobox input
        {
        	background-color: white;
        	padding-right: 30px;
        	font-weight: bold;
        }
        #savedqueryeditor .ui-combobox a
        {
        	background: transparent;
			border: none;
			position: absolute;
			right: 0;
        }
        #savedqueryeditor .ui-combobox a .ui-button-icon-primary
        {
        	background: transparent url("{!URLFOR($Resource.QueryEditor, 'images/icons/combobox-arrow-16.png')}") no-repeat center;
        }
        
        .crossobjectoptions input.ui-autocomplete-input {
        	width: 300px;
        }
        
        /* Date pickers */
        #savedqueryeditor .ui-datepicker {
        	z-index: 9999999999 !important;
        }
        /*
        div.DATE { 
        	position: relative;
        }
        div.DATE input.datejs {
        	padding-right: 35px;
        }
        div.DATE .ui-datepicker-trigger {
        	position: absolute;
        	right: 24px;
        	top: 5px;
        	cursor: pointer;
        }
        div.DATE .dateliteralpicker {
        	position: absolute;
        	right: 4px;
        	top: 5px;
        }
        */
        
        /* Marker Type Pickers */
        .markertype-wrapper { 
        	position: relative;
        }
        .markertype-wrapper .markertype-color, .markertype-wrapper .ui-combobox input {
        	width: 200px;
        	-moz-box-sizing: border-box;
        	-webkit-box-sizing: border-box;
        	box-sizing: border-box;
        }
        .markertype-wrapper .markertype-selector {
        	display: inline-block;
        	vertical-align: middle;
        }
        .markertype-wrapper .markertype-selector img {
        	cursor: pointer;
        }
        
        #savedqueryeditor .crossfilter .subfilters .indexlabel {
        	display: none;
        }
        #savedqueryeditor .filterbyowner-ownerfield-wrapper .ui-autocomplete-input {
        	width: 200px;
        }
    </style>
    
    <!-- JS -->
    <script type='text/javascript'>
    	var query = {};
    	var baseObject = '{!query.baseObject}';
    	var globalIndex = 0;        //this is used to generate unique names for elements like radio buttons.  hoping to replace this with a nice form plugin
        $(function () {
        
        	//i don't think any of this is needed
        	if ($.browser.msie) {
        		if ('{!pageState}' == 'error') {
        			$('#savedqueryeditor-error').show();
        			$('#savedqueryeditor').hide();
        		}
        		else {
        			$('#savedqueryeditor-error').hide();
        			$('#savedqueryeditor').show();
        		}
        		
        		if ('{!isOwnable}' == 'true') {
        			$('#savedqueryeditor .filterbyowner').show();
        		} else {
        			$('#savedqueryeditor .filterbyowner').hide();
        		}
        	}
        
        	//get the query that we're creating/editing
        	query = JSON.parse($('[id$="serializedQuery"]').val());
        	$('#savedqueryeditor span.baseobject-name').text(query.baseObjectName);
        
        	//initialize tabs
            $('#savedqueryeditor .tabs').tabs();
            
            //initialize color pickers
            jscolor.init();
            
            //combobox settings
            $('#savedqueryeditor').on('focus', '.ui-autocomplete-input', function () { var $me = $(this); setTimeout(function () {$me.select();}, 100); });
            $('.filterbyactivity .combobox').combobox();
            $('.Static .markertype-select').combobox();
            
            //get metadata for the selected query (or base object)
            $.ajax({
                url: "/apex/QueryBuilderAPI?securityToken={!securityToken}&action=getSavedQueryMetadata&core.apexpages.devmode.url=0",
                type: 'POST',
                dataType: 'JSON',
                data: { baseObject: baseObject },
                success: function (response)
                {
            		if (response.success)
            		{
            			//populate tooltip options
            			var $tooltips = $('select.tooltip');
            			$.each(response.data.tooltipOptions, function (index, option) {
            				$('<option></option>').attr('value', option.itemValue).text(option.itemLabel).appendTo($tooltips);
            			});
            			$tooltips.removeAttr('disabled').find('option:first-child').remove();
            			$($tooltips[0]).val('Name');
            			
            			//populate picklist field options
            			var $picklistField = $('select.color-picklistfield');
            			$.each(response.data.picklistOptions, function (index, option) {
            				$('<option></option>').attr('value', option.itemValue).text(option.itemLabel).appendTo($picklistField);
            			});
            			$picklistField.removeAttr('disabled').find('option:first-child').remove();
            			
            			//populate marker image options
            			var $markerImageFields = $('select.markertype-image')
            			$.each(response.data.markerImageOptions, function (index, option) {
            				$('<option></option>').attr('value', option.itemValue).text(option.itemLabel).appendTo($markerImageFields);
            			});
            			$markerImageFields.removeAttr('disabled').find('option:first-child').remove();
            			$('.Static .markertype-image').combobox();
            			
            			//populate existing data for this query if we have it
            			if (query.id != null || query.isClone)
            			{
            				//tooltips
			            	$('#savedqueryeditor .tooltip').each(function () {
			            		$(this).val(query[$(this).attr('data-tooltip')]);
			            	});
			            	
			            	//color options
			            	$('.color-assignmenttype').val(query.colorAssignmentType).change();
			            	try {
			            		if (query.iconColor.indexOf('image:') == 0) {
			            			$('.Static .markertype-selector-image').click();
			            			$('.Static .markertype-image').val(query.iconColor.split('image:')[1]).next().find('input').val($('.Static .markertype-image').find('option:selected').text());
			            		}
			            		else {
			            			$('.Static .markertype-selector-color').click();
			            			$('.Static .markertype-color')[0].color.fromString(query.iconColor);
			            		}
			            	} catch (err) { 
			            		$('.Static .markertype-selector-color').click();
			            	}
			            	$('.color-picklistfield').val(query.picklistField).change();
            			}
            			else
            			{
            				//no existing query so set defaults
            				$('.Static .markertype-selector-color').click();
            			}
            			
            			//if we don't have a picklist field selected yet, pick the first option
            			if ($picklistField.val() == '') { $picklistField.val($picklistField.find('.option:first-child').val()); }
            			
            			//render comboboxes
            			$('#savedqueryeditor .color-assignmenttype').combobox();
            			$picklistField.combobox();
            			$tooltips.combobox();
            		}
            		else
            		{
            			//show error message
            			
            		}
                },
                error: function (request, error, exception)
                {
                	//show error
                	$('#savedqueryeditor .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
                }
            });
        
        	//handle adding new filters
        	$('.section-button.add').click(function () {
        		if ($(this).closest('.section').is('.fieldfilters'))
                {
        			var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.fieldfilters > .listbox'))
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', baseObject);
                            $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', 'Name'));
                            $newFilter.find('.fieldoptions .combobox').val('Name');
                            
                            updateFilter($newFilter, $loader);
                        }
                    );
                }
                else if ($(this).closest('.section').is('.crossfilters'))
                {
                	//make sure this object has a valid child relationship
                	if (query.initialCrossObject == null || query.initialCrossField == null)
                	{
                		alert('This base object does not have any valid child relationships.');
                		return;
                	}
                	
                	//make sure we don't already have 2 cross filters
                	if ($('.crossfilters .listbox > div').length > 1)
                	{
                		alert('Only 2 cross filters are allowed.');
                		return;
                	}
                	
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.crossfilters .listbox'));
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newCrossFilter = $('.crossfilter.template').clone().removeClass('template').attr('data-baseobject', baseObject).attr('data-index', 'AND');
                            $newCrossFilter.find('.fieldlabel .baseobject').text(query.baseObjectName);
                            $newCrossFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', 'Id'));
                            $newCrossFilter.find('.fieldoptions .combobox').val('Id');
                            $newCrossFilter.find('.crossobjectoptions .combobox').append($("<option></option>").attr('value', query.initialCrossObject));
                            $newCrossFilter.find('.crossobjectoptions .combobox').val(query.initialCrossObject);
                            $newCrossFilter.find('.crossfieldoptions .combobox').append($("<option></option>").attr('value', query.initialCrossField));
                            $newCrossFilter.find('.crossfieldoptions .combobox').val(query.initialCrossField);
                            
                            updateCrossFilter($newCrossFilter, $loader);
                        }
                    );
                }
        	});
        	
        	//date control functions
            $('#savedqueryeditor').on('keyup', '.datejs', function (event)
            {
                //don't parse on enter because it is probably an autocomlete selection and can't change the value if it isn't
                if (event.which == 13)
                {
                    return;
                }
                
                //validate the input
                parseDateInput($(this));
            });
            $('#savedqueryeditor').on('click', '.dateliteralpicker', function () 
            {
                //open the date literal autocomplete list when clicking the date literal picker icon
                $(this).siblings('.datejs').autocomplete("search", "").focus();
            });
            
            //on blur, set the text value of floating point inputs to the parsed value just to avoid little issues like '2.' being valid (2. parses to 2)
            $('#savedqueryeditor').on('blur', '.NUMBER, .CURRENCY, .DOUBLE, .PERCENT', function ()
            {
                if ($(this).val() != '')
                {
                    $(this).val(parseFloat($(this).val()));
                }
            });
            
            //validation for numeric fields
            $('#savedqueryeditor').on('keyup change', '.INTEGER, .NUMBER, .CURRENCY, .DOUBLE, .PERCENT', function () 
            {
                var isValid = true;
                
                //blank is valid for all numeric fields unless the operator is range (because null is invalid with > and <)
                if ($(this).val() == '')
                {
                    if ($(this).closest('.filter').find('.operator .combobox').val() == 'range')
                    {
                        isValid = false;
                    }
                }
                else
                {
                    if ($(this).is('.INTEGER'))
                    {
                        if (isNaN(parseInt($(this).val())))
                        {
                            isValid = false;
                        }
                        else
                        {
                            //on a successful parse, set the text value to the parsed value just to avoid little issues like '2.' being valid (2. parses to 2)
                            $(this).val(parseInt($(this).val()));
                        }
                    }
                    else
                    {
                        if (isNaN(parseFloat($(this).val())))
                        {
                            isValid = false;
                        }
                    }
                }
                
                if (isValid)
                {
                    $(this).removeClass('invalid');
                }
                else
                {
                    $(this).addClass('invalid');
                }
            });
            
            /**************************************
             *	FILTER HANDLERS
             **************************************/
            
            //filter delete link
            $('#savedqueryeditor').on('click', '.filter .deletelink', function () 
            {
                $(this).closest('.filter').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                        refreshIndices();
                    }
                ); 
            });
            
            
            $('#removeFiltersLink').click(function ()
            {
                $('#queryfilters .filter .deletelink, #queryfilters .crossfilter .deletelink').click();
            });
            
            //handling selecting a new field for a filter
            $('#savedqueryeditor').on('change', '.filter .fieldoptions .combobox, .filter .parentfieldoptions .combobox, .filter .grandparentfieldoptions .combobox', function ()
            {
                updateFilter($(this).closest('.filter'));
            });
            
            //handling selecting a new operator for a filter
            $('#savedqueryeditor').on('change', '.filter .operator .combobox', function ()
            {
                var $updatedFilter = $(this).closest('.filter');
            
                if ($(this).val() == 'range')
                {
                    $updatedFilter.find('.range').show(500);
                    $updatedFilter.find('.nextlast').hide(500);
                }
                else if ($(this).val() == 'next' || $(this).val() == 'last')
                {
                	$updatedFilter.find('.range').hide(500);
                    $updatedFilter.find('.nextlast').show(500);
                }
                else
                {
                    $updatedFilter.find('.range').hide(500);
                    $updatedFilter.find('.nextlast').hide(500);
                }
                
                //the range operator affects validity so revalidate
                $updatedFilter.find('.value input').change();
            });
            
            //filter logic link
            $('#savedqueryeditor .filterlogiclink').click(function ()
            {
                if ($(this).text() == 'Add')
                {
                    var filterArr = [];
                    $('.fieldfilters .filter').each(function () { filterArr.push($(this).find('.indexlabel').text()); } );
                    $('.filterlogic').val('(' + filterArr.join(' AND ') + ')').show(500);
                    $(this).text('Remove');
                }
                else
                {
                    $('.filterlogic').hide(500);
                    $(this).text('Add');
                }
            });
            
            /************************************
             *	CROSS FILTER HANDLERS
             ************************************/
            
            //handle changing field on a cross filter
            $('#savedqueryeditor').on('change', '.crossfilter > table .fieldoptions .combobox, .crossfilter .crossobjectoptions .combobox', function ()
            {
                updateCrossFilter($(this).closest('.crossfilter'));
            });
            
            //handle clicking links on a cross filter
            $('#savedqueryeditor').on('click', '.crossfilter .crossfilteractions span.link', function ()
            {
                if ($(this).text() == 'Show Advanced')
                {
                    $(this).closest('.crossfilter').find('.advanced').show('slide');
                    $(this).text('Hide Advanced');  
                }
                else if ($(this).text() == 'Hide Advanced')
                {
                    $(this).closest('.crossfilter').find('.advanced').hide('slide');
                    $(this).text('Show Advanced');  
                }
                else if ($(this).text() == 'Delete')
                {
                    $(this).closest('.crossfilter').slideUp(
                    500, 
                    function () { 
                        $(this).remove();
                        refreshIndices();
                    }
                ); 
                }
            });
            
            //handle subfilter links
            $('#savedqueryeditor').on('click', '.crossfilter .addfilter span.link', function ()
            {
                var $updatedCrossFilter = $(this).closest('.crossfilter');
            
                var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($updatedCrossFilter.find('.subfilters'));
                $loader.slideDown(
                    200,
                    function ()
                    {
                        var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', $updatedCrossFilter.find('.crossobjectoptions .combobox').val());
                        updateFilter($newFilter, $loader);
                    }
                );
            });
            
            /*******************************
             *	ACTIVITY FILTER HANDLERS
             *******************************/
             
             //handle changing activity filters
             $('.filterbyactivity .activityfilter-task, .filterbyactivity .activityfilter-event').change(function () {
             	var activityType = $(this).closest('.activityfilter-wrapper').attr('data-type');
             	if ($(this).val() == 'all') {
             		$('.activitysubfilters-wrapper[data-type="'+activityType+'"]').slideUp(400);
             	}
             	else {
             		$('.activitysubfilters-wrapper[data-type="'+activityType+'"]').slideDown(400);
             	}
             });
             
             $('.activitysubfilters-wrapper .link.addfilter').click(function () {
             	var baseObject = $(this).closest('.activitysubfilters-wrapper').attr('data-type') == 'task' ? 'Task' : 'Event';
             	var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($(this).closest('.activitysubfilters-wrapper').find('.subfilters'));
                $loader.slideDown(
                    200,
                    function ()
                    {
                        var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', baseObject);
                        $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', 'Subject'));
                        $newFilter.find('.fieldoptions .combobox').val('Subject');
                        
                        updateFilter($newFilter, $loader);
                    }
                );
             });
            
            /******************************
            *	FILTER BY OWNER HANDLERS
            ********************************/
            
            //init the combobox for the owner specifier
            $('.filterbyowner-owner').combobox();
            
            //populate dynamic owner options
            var $ownerField = $('.filterbyowner-ownerfield').empty();
            $.each(JSON.parse($('[id$=":serializedFilterByOwnerOptions"]').val()), function (index, option) {
            	$ownerField.append($('<option />').attr('value', option.value).text(option.label));
            });
            $ownerField.val('OwnerId').combobox();
            
            //handle changing filter by owner
            $('input[type="radio"][name="filterByOwner"]').click(function () {
            	if ($('input[type="radio"][name="filterByOwner"]:checked').attr('value') == 'TRUE') {
            		$('.filterbyowner-ownerfield-wrapper').slideDown(400);
            	} 
            	else {
            		$('.filterbyowner-ownerfield-wrapper').slideUp(400);
            	}
            });
            
            /*****************************
             *	MARKER HANDLERS
             *****************************/
             
             //handle changing assignment type
             $('.color-assignmenttype').change(function () {
             	$('.color-options tr.toggle').hide().filter('.'+$(this).val()).show();
             });
             
             //handle changing picklist field
             $('.color-picklistfield').change(function () {
             	if ($(this).val() == '--Select a Field--')
             	{
             		$('.color-picklistvalues').hide();
             	}
             	else
             	{
             		$('.color-picklistvalues').show().find('tr.picklistvalue').remove();
             		$.getJSON(
             			"/apex/QueryBuilderAPI?securityToken={!securityToken}&action=getPicklistValues&core.apexpages.devmode.url=0",
             			{ baseObject: baseObject, fieldName: $(this).val() }, 
             			function (response) {
             				if (response.success) {
             					//add a row for each picklist value
             					$.each(response.data, function (index, picklistValue) {
             						$('.color-picklistvalues table').append(
             							$('.picklistvalue.template').clone().removeClass('template').wrap('<div/>').parent().html()
             								.replace('::PicklistName::', picklistValue.itemLabel)
             						);
             					});
             					
             					//add a row for "other"
             					$('.color-picklistvalues table').append(
           							$('.picklistvalue.template').clone().removeClass('template').addClass('other').wrap('<div/>').parent().html()
           								.replace('::PicklistName::', '&lt;Other&gt;')
           						);
             					
             					//init colorpickers
             					jscolor.init();
             					
             					//init comboboxes
             					$('.color-picklistvalues .markertype-image').combobox();
             					
             					//update the colors based on the existing query if we have one
             					if (query.colorAssignment)
             					{
             						var colorAssignmentMap = {};
             						$.each(query.colorAssignment.split('~~'), function (index, colorAssignment) {
             							if (colorAssignment != '')
             							{
             								var assignmentParts = colorAssignment.split('~');
             								colorAssignmentMap[assignmentParts[0]] = assignmentParts[1];
             							}
             						});
             						
             						$('.color-picklistvalues .picklistvalue').each(function () {
             							try 
             							{
             								//markers can now be colors or images
             								var iconColor = colorAssignmentMap[$(this).find('.picklistname').text()];
             								if (iconColor.indexOf('image:') == 0)
             								{
             									$(this).find('.markertype-selector-image').click();
			            						$(this).find('.markertype-image').val(iconColor.split('image:')[1]).next().find('input').val($(this).find('.markertype-image').find('option:selected').text());
             								}
             								else
             								{
             									$(this).find('.markertype-selector-color').click(); 
			            						$(this).find('.markertype-color')[0].color.fromString(iconColor);
             								}
             							}
             							catch (err) { 
             								$(this).find('.markertype-selector-color').click(); 
             							}
             						});
             					}
             					else
             					{
             						//no existing color assignments so default to color
             						$('.color-picklistvalues .markertype-selector-color').click();
             					}
             				}
             			}
             		);
             	}
             });
             
             //handle dynamically assigning color values to picklist options
             $('.color-dynamicallyassign').click(function () {
             	$('.color-picklistvalues .picklistvalue').each(function () {
             		$(this).find('.markertype-color')[0].color.fromString(randomHexColorCode());
             		
             		var $imageOptions = $(this).find('.markertype-image option');
             		$(this).find('.markertype-image').val($($imageOptions.get(Math.floor(Math.random() * $imageOptions.length))).attr('value')).next().find('input').val($(this).find('.markertype-image option:selected').text());
             	});
             });
             
             //handle selecting a different marker type
             $('#savedqueryeditor').on('click', '.markertype-selector img', function () {
             
             	//only show the markertype selector that matches the selected type
             	if ($(this).is('.markertype-selector-color')) {
             		$(this).closest('.markertype-wrapper').find('.markertype-image').next().hide();
             		$(this).closest('.markertype-wrapper').find('.markertype-color').show();
             	}
             	else {
             		$(this).closest('.markertype-wrapper').find('.markertype-color').hide();
             		$(this).closest('.markertype-wrapper').find('.markertype-image').next().show();
             	}
             	
             });
            
            /****************************
             *	SAVING
             ****************************/
            
            //handle clicking close
            $('#savedqueryeditor .closebtn, #savedqueryeditor-error .closebtn').click(function () {
            	//attempt to fire the close callback
       			if (queryEditorClose) { queryEditorClose(); }
       			else if (parent.queryEditorClose) { parent.queryEditorClose(); }
            });
            
            //handle clicking save
            $('#savedqueryeditor .savebtn').click(function () 
            {
            	//hide previous error messages
            	$('#savedqueryeditor .buttons .msgs').hide();
            		
            	//make sure we aren't already saving
            	if ($(this).attr('value') == 'Saving...')
            	{
            		return false;
            	}
            	
            	//make sure we have a query name
            	if ($('#savedqueryeditor input.name').val() == '')
            	{
            		$('#savedqueryeditor .buttons .msgs').html('<b>Validation Error</b>: You must enter a name for this query before proceeding').show();
            		return;
            	}
            	
            	//make sure there are no invalid filters (QUICK FIX HERE TO IGNORE VALIDATION PROBLEMS WITH ADVANCED CROSS FILTER OPTIONS)
                if ($('#savedqueryeditor input.invalid').not('.advanced.crossfieldoptions input').length > 0)
                {
                    $('#savedqueryeditor .buttons .msgs').html('<b>Validation Error</b>: Please correct the filters marked as invalid before proceeding').show();
                    
                    //show any advanced filters that are hiding an invalid value
                    //$('#savedqueryeditor .crossfilter input.invalid:hidden').closest('.crossfilter').find('span.link:contains("Show Advanced")').click();
                
                    return false;
                }
                
                //make sure we have a value for tooltip 1
                if ($('[data-tooltip="tooltip1"]').val() == '--None--')
                {
                	$('#savedqueryeditor .buttons .msgs').html('<b>Validation Error</b>: You must select a value for Tooltip 1 before proceeding').show();
                	return false;
                }
                
                //loading indicator
                var $button = $(this);
                $button.attr('value', 'Saving...');
                
                //build query object to send
                var queryToSave = buildQuery();
                
                $.ajax({
                    url: "/apex/QueryBuilderAPI?securityToken={!securityToken}&action=saveQuery&core.apexpages.devmode.url=0",
                    type: 'POST',
                    dataType: 'JSON',
                    data: { serializedQuery: JSON.stringify(queryToSave) },
                    success: function (response)
                    {
                        //remove loading indicator
                        $button.attr('value', 'Save');
                
                		if (response.success)
                		{
                			//attempt to fire the success callback
                			if (queryEditorSaveComplete) { queryEditorSaveComplete(response.data.id, $('.baseobject-name').text(), queryToSave); }
                			else if (parent.queryEditorSaveComplete) { parent.queryEditorSaveComplete(response.data.id, $('.baseobject-name').text(), queryToSave); }
                		}
                		else
                		{
                			//show error message
                			$('#savedqueryeditor .buttons .msgs').html('<b>' + response.message + '</b>' + ': ' + response.data).show();
                		}
                    },
                    error: function (request, error, exception)
                    {
                    	//show error
                    	$('#savedqueryeditor .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
                    }
                });
            });
            
            /******************************************
             *	POPULATE DATA FROM EXISTING QUERY
             *****************************************/
            if (query.id || query.isClone)
            {
            	//populate name
	        	$('#savedqueryeditor input.name').val(query.name);

                //update filter by owner settings
                if (query.filterByOwner.indexOf('My:') == 0)
                {
                    $('.filterbyowner input:radio[name=filterByOwner][value=TRUE]').click();
                    $('.filterbyowner-ownerfield-wrapper').slideDown(400);
                    $('.filterbyowner-owner').val(query.filterByOwner.split(':')[1]).next().find('input').val($('.filterbyowner-owner option:selected').text());
                    $('.filterbyowner-ownerfield').val(query.filterByOwner.split(':')[2]).next().find('input').val($('.filterbyowner-ownerfield option:selected').text());
                }
                else if (query.filterByOwner == 'QUEUE')
                {
                    $('.filterbyowner input:radio[name=filterByOwner][value=QUEUE]').click()
                    .parent()
                    .find('select')
                    .val(query.selectedQueue);
                }
                
                //update activity filter settings
                $('.filterbyactivity .activityfilter-operator').val(query.filterByActivity.operator).next().find('> input').val(query.filterByActivity.operator);
                if (query.filterByActivity.task != 'all')
                {
                	//update operator
                	$('.filterbyactivity .activityfilter-task').val(query.filterByActivity.task).change().next().find('> input').val(query.filterByActivity.task);
                }
                if (query.filterByActivity.event != 'all')
                {
                	//update operator
                	$('.filterbyactivity .activityfilter-event').val(query.filterByActivity.event).change().next().find('> input').val(query.filterByActivity.event);
                }
                
                //add activity subfilters
               	$.each(query.activitySubfilters, function (index, filter) {
               	
              		//add new filter
              		var baseObject = filter.baseObject.toLowerCase();
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.activitysubfilters-wrapper[data-type="'+baseObject+'"] .subfilters'));
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', filter.baseObject);
                            $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', filter.fieldName));
                            $newFilter.find('.fieldoptions .combobox').val(filter.fieldName);
                            $newFilter.find('.parentfieldoptions .combobox').append($("<option></option>").attr('value', filter.parentFieldName));
                            $newFilter.find('.parentfieldoptions .combobox').val(filter.parentFieldName);
                            $newFilter.find('.grandparentfieldoptions .combobox').append($("<option></option>").attr('value', filter.grandparentFieldName));
                            $newFilter.find('.grandparentfieldoptions .combobox').val(filter.grandparentFieldName);
                    		
                            updateFilter($newFilter, $loader, filter.operator, filter.value, filter.value2);
                        }
                    );
               	});
                
                //filter logic settings
                if (query.useFilterLogic)
                {
                	$('#savedqueryeditor .filterlogiclink').click();
                	$('#savedqueryeditor .filterlogic').val(query.filterLogicString);
                }
                
                //filters
                $.each(query.filters, function (index, filter)
                {
                    //add new filter
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.fieldfilters > .listbox'))
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', filter.baseObject);
                            $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', filter.fieldName));
                            $newFilter.find('.fieldoptions .combobox').val(filter.fieldName);
                            $newFilter.find('.parentfieldoptions .combobox').append($("<option></option>").attr('value', filter.parentFieldName));
                            $newFilter.find('.parentfieldoptions .combobox').val(filter.parentFieldName);
                            $newFilter.find('.grandparentfieldoptions .combobox').append($("<option></option>").attr('value', filter.grandparentFieldName));
                            $newFilter.find('.grandparentfieldoptions .combobox').val(filter.grandparentFieldName);
                    		
                            updateFilter($newFilter, $loader, filter.operator, filter.value, filter.value2);
                        }
                    );
	            });
		           
		        //cross filters 
	            $.each(query.crossFilters, function (index, crossFilter) 
	            {
                	//add new cross filter
                    var $loader = $('.ajaxload.template').clone().removeClass('template').appendTo($('.crossfilters > .listbox'));
                    $loader.slideDown(
                        200,
                        function ()
                        {
                            var $newCrossFilter = $('.crossfilter.template').clone().removeClass('template').attr('data-baseobject', crossFilter.baseObject).attr('data-index', 'AND');
                            $newCrossFilter.find('.fieldlabel .baseobject').text(query.baseObjectName);
                            $newCrossFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', crossFilter.fieldName));
                            $newCrossFilter.find('.fieldoptions .combobox').val(crossFilter.fieldName);
                            $newCrossFilter.find('.operator .combobox').val(crossFilter.operator);
                            $newCrossFilter.find('.crossobjectoptions .combobox').append($("<option></option>").attr('value', crossFilter.crossObjectName));
                            $newCrossFilter.find('.crossobjectoptions .combobox').val(crossFilter.crossObjectName);
                            $newCrossFilter.find('.crossfieldoptions .combobox').append($("<option></option>").attr('value', crossFilter.crossFieldName));
                            $newCrossFilter.find('.crossfieldoptions .combobox').val(crossFilter.crossFieldName);
                            
                            //add subfilters
                            $.each(crossFilter.filters, function (index, filter)
                            {
                                var $subloader = $('.ajaxload.template').clone().removeClass('template').appendTo($newCrossFilter.find('.subfilters'));
                                $subloader.slideDown(
                                    200,
                                    function ()
                                    {
                                        var $newFilter = $('.filter.template').clone().removeClass('template').attr('data-baseobject', $newCrossFilter.find('.crossobjectoptions .combobox').val());
                                        $newFilter.find('.fieldoptions .combobox').append($("<option></option>").attr('value', filter.fieldName));
                                        $newFilter.find('.fieldoptions .combobox').val(filter.fieldName);
                                        $newFilter.find('.parentfieldoptions .combobox').append($("<option></option>").attr('value', filter.parentFieldName));
                                        $newFilter.find('.parentfieldoptions .combobox').val(filter.parentFieldName);
                                        $newFilter.find('.grandparentfieldoptions .combobox').append($("<option></option>").attr('value', filter.grandparentFieldName));
                                        $newFilter.find('.grandparentfieldoptions .combobox').val(filter.grandparentFieldName);
                                        updateFilter($newFilter, $subloader, filter.operator, filter.value, filter.value2);
                                    }
                                );
                            });
                    
                            updateCrossFilter($newCrossFilter, $loader);
                        }
                    );
	            });
            }
            else
            {
            	//this is a new query so use default values
            	$('#savedqueryeditor input.name').val('New Saved Query');
            	$('#savedqueryeditor .fieldfilters .section-button.add').click();
            }
        });
        
        function disableFilter($filter)
        {
            $filter.find('td.indexlabel').text('').append($('img.loader.template').clone().show());
            return $filter;
        }
        function enableFilter($filter)
        {
            $filter.find('td.indexlabel').empty().text($filter.attr('data-index'));
            return $filter;
        }
        function updateFilter($updatedFilter, $loaderToReplace, operator, value, value2)
        {
            disableFilter($updatedFilter);

            $.ajax({
                url: "/apex/QueryBuilderAPI?securityToken={!securityToken}&action=getFilter&baseObject=::baseObject::&fieldName=::fieldName::&parentFieldName=::parentFieldName::&grandparentFieldName=::grandparentFieldName::&core.apexpages.devmode.url=0"
                    	.replace('::baseObject::', $updatedFilter.attr('data-baseobject').split('~~')[0])
                    	.replace('::fieldName::', $updatedFilter.find('.fieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.fieldoptions .combobox').val())
                    	.replace('::parentFieldName::', $updatedFilter.find('.parentfieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.parentfieldoptions .combobox').val())
                    	.replace('::grandparentFieldName::', $updatedFilter.find('.grandparentfieldoptions .combobox').val() == null ? '' : $updatedFilter.find('.grandparentfieldoptions .combobox').val()),
                type: 'POST',
                dataType: 'JSON',
                success: function (response)
                {
                    //update type information
                    $updatedFilter.attr('data-basetype', response.baseType).attr('data-fieldtype', response.fieldType);
                
                    //field options
                    var $fieldSelect = $updatedFilter.find('.fieldoptions .combobox').empty();
                    for (var i in response.fieldOptions)
                    {
                        $fieldSelect.append(
                            $("<option></option>")
                                .attr('value', response.fieldOptions[i].value)
                                .text(response.fieldOptions[i].label)
                        );
                    }
                    $fieldSelect.val(response.fieldName);
                    $updatedFilter.find('.fieldoptions .ui-combobox > input').val($fieldSelect.find('option:selected').text());
                
                    //refresh parent field options if there are any
                    if (response.parentFieldOptions != null && response.parentFieldOptions.length > 0)
                    {
                        $parentFieldSelect = $updatedFilter.find('.parentfieldoptions .combobox').empty();
                        for (var i in response.parentFieldOptions)
                        {
                            $parentFieldSelect.append(
                                $("<option></option>")
                                    .attr('value', response.parentFieldOptions[i].value)
                                    .text(response.parentFieldOptions[i].label)
                            );
                        }
                        $parentFieldSelect.val(response.parentFieldName);
                        $updatedFilter.find('.parentfieldoptions .ui-combobox > input').val($parentFieldSelect.find('option:selected').text());
                        $updatedFilter.find('.parentfieldoptions').show();
                    }
                    else
                    {
                        $updatedFilter.find('.parentfieldoptions').hide().find('.combobox').empty().val('');
                    }
                    
                    //refresh grandparent field options if there are any
                    if (response.grandparentFieldOptions != null && response.grandparentFieldOptions.length > 0)
                    {
                        $grandparentFieldSelect = $updatedFilter.find('.grandparentfieldoptions .combobox').empty();
                        for (var i in response.grandparentFieldOptions)
                        {
                            $grandparentFieldSelect.append(
                                $("<option></option>")
                                    .attr('value', response.grandparentFieldOptions[i].value)
                                    .text(response.grandparentFieldOptions[i].label)
                            );
                        }
                        $grandparentFieldSelect.val(response.grandparentFieldName);
                        $updatedFilter.find('.grandparentfieldoptions .ui-combobox > input').val($grandparentFieldSelect.find('option:selected').text());
                        $updatedFilter.find('.grandparentfieldoptions').show();
                    }
                    else
                    {
                        $updatedFilter.find('.grandparentfieldoptions').hide().find('.combobox').empty().val('');
                    }
                
                    //refresh operator options
                    $operatorOptions = $updatedFilter.find('.operator .combobox').empty();
                    for (var i in response.operatorOptions)
                    {
                    	if (response.operatorOptions[i] != 'in' && response.operatorOptions[i] != 'not in')	//temporary to keep beta operators off of this page
                    	{
	                        $operatorOptions.append(
	                            $("<option></option")
	                                .attr('value', response.operatorOptions[i])
	                                .text(response.operatorOptions[i])
	                        );
	                    }
                    }
                    $operatorOptions.combobox();
                    $updatedFilter.find('.operator input').val($operatorOptions.find('option:selected').change().text());
                    
                    //if we were passed an operator, populate
                    if (operator)
                    {
                        $operatorOptions.find('option[value="'+operator+'"]').attr('selected', 'selected');
                        $updatedFilter.find('.operator input').val($operatorOptions.find('option:selected').change().text());
                    }
                    
                    //change value input to match the new field type
                    $updatedFilter.find('.value .STRING input:text').removeAttr('class').val('');
                    if (response.baseType == 'STRING')
                    {
                        $updatedFilter.find('.value .STRING input').addClass(response.fieldType);
                    }
                    $updatedFilter.find('.value > div').hide().filter('.' + response.baseType).show();
                    
                    if (response.fieldType == 'PICKLIST' || response.fieldType == 'MULTIPICKLIST')
                    {
                        var $picklistOptions = $updatedFilter.find('.value .PICKLIST .multiselect').empty();
                        for (var i in response.picklistOptions)
                        {
                            $("<option></option>")
                                .attr('value', response.picklistOptions[i].value)
                                .text(response.picklistOptions[i].label)
                                .appendTo($picklistOptions);
                        }
                        $picklistOptions.multiselect('refresh').multiselect('uncheckAll');
                    }
                    
                    enableFilter($updatedFilter);
                    
                    //if we were passed a loader then replace it with this filter
                    if ($loaderToReplace)
                    {
                        $loaderToReplace.slideUp(
                            200,
                            function ()
                            {
                                $(this).replaceWith($updatedFilter);
                                $updatedFilter.attr('data-basetype', response.baseType).attr('data-fieldtype', response.fieldType).slideDown(500);
                                    
                                //assign unique names to the boolean radio buttons
                                $updatedFilter.find('.value .BOOLEAN input').attr('name', 'bool_' + globalIndex++);
                                
                                $updatedFilter.find('.combobox').combobox();
                                $updatedFilter.find('.multiselect').multiselect({
                                    noneSelectedText: 'Click here to select options',
                                    selectedList: 2
                                }).multiselectfilter().multiselect('uncheckAll');
                                buildDatePickers($updatedFilter.find('input.datejs'));
                                
                                refreshIndices();
                                
                                //if we were passed a value then use it to populate the currently displayed value input
                                if (value)
                                {
                                    switch (response.baseType)
                                    {
                                        case 'STRING':
                                            if (value != 'NULL')
                                            {
                                                $updatedFilter.find('.value > div.STRING > input').val(value);
                                            }
                                            if (value2 && value2 != 'NULL')
                                            {
                                                $updatedFilter.find('.value > div.STRING .range input').val(value2);
                                            }
                                            break;
                                        case 'PICKLIST':
                                            if (value != '')
                                            {
                                                var selectedOptions = value.split('~~');
                                                for (var s in selectedOptions)
                                                {
                                                    $updatedFilter.find('.value .PICKLIST .multiselect').multiselect("widget").find('input[value="'+selectedOptions[s]+'"]').click();// option[value='+selectedOptions[s]+']').attr('selected', 'selected');
                                                }
                                            }
                                            break;
                                        case 'BOOLEAN':
                                            if (value != 'NULL')
                                            {
                                                $updatedFilter.find('.value > div.BOOLEAN input[value='+value+']').attr('checked', 'checked');
                                            }
                                            break;
                                        case 'DATE':
                                            if (value != 'NULL')
                                            {
                                                $updatedFilter.find('.value > div.DATE > input.datejs').val(valueToDateString(value, $updatedFilter.attr('data-fieldtype')));
                                            }
                                            if (value2 != 'NULL')
                                            {
                                                $updatedFilter.find('.value > div.DATE .range > input.datejs').val(valueToDateString(value2, $updatedFilter.attr('data-fieldtype')));
                                            }
                                            break;
                                    }
                                }
                                
                                //for some reason, operator changes aren't being caught during the population process for these filters (maybe because they're hidden?).  just refire the change event now
                                $operatorOptions.find('option:selected').change();
                            }
                        );
                    }
                },
                error: function (request, error, exception)
                {
                	//show error
                	$('#savedqueryeditor .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
                }
            });
        }
        function updateCrossFilter($updatedCrossFilter, $loaderToReplace)
        {
            disableFilter($updatedCrossFilter);
                
            $.ajax({
                url: "/apex/QueryBuilderAPI?securityToken={!securityToken}&action=getCrossFilter&baseObject=::baseObject::&fieldName=::fieldName::&crossObjectName=::crossObjectName::&crossFieldName=::crossFieldName::&core.apexpages.devmode.url=0"
                    .replace('::baseObject::', $updatedCrossFilter.attr('data-baseobject'))
                    .replace('::fieldName::', $updatedCrossFilter.find('.fieldoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.fieldoptions .combobox').val())
                    .replace('::crossObjectName::', $updatedCrossFilter.find('.crossobjectoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.crossobjectoptions .combobox').val())
                    .replace('::crossFieldName::', $updatedCrossFilter.find('.crossfieldoptions .combobox').val() == null ? '' : $updatedCrossFilter.find('.crossfieldoptions .combobox').val()),
                type: 'POST',
                dataType: 'JSON',
                success: function (response)
                {
                    //field options
                    $newFieldOptions = $updatedCrossFilter.find('.crossfilter-fields .fieldoptions .combobox').empty();
                    for (var i in response.fieldOptions)
                    {
                        $newFieldOptions.append(
                            $("<option></option>")
                                .attr('value', response.fieldOptions[i].value)
                                .text(response.fieldOptions[i].label)
                        );
                    }
                    $newFieldOptions.val(response.fieldName);
                    $updatedCrossFilter.find('.crossfilter-fields .fieldoptions .ui-combobox > input').val($newFieldOptions.find('option:selected').text());
                    
                    //only update operator options if we don't have any because cross filter operator options are not affected by any changes
                    $operatorOptions = $updatedCrossFilter.find('.crossfilter-fields .operator .combobox');
                    if ($operatorOptions.children().length == 0)
                    {
                        for (var i in response.operatorOptions)
                        {
                            $operatorOptions.append(
                                $("<option></option")
                                    .attr('value', response.operatorOptions[i].value)
                                    .text(response.operatorOptions[i].label)
                            );
                        }
                    }
                    
                    //cross object options
                    $crossObjectOptions = $updatedCrossFilter.find('.crossfilter-fields .crossobjectoptions .combobox').empty();
                    for (var i in response.crossObjectOptions)
                    {
                        $crossObjectOptions.append(
                            $("<option></option")
                                .attr('value', response.crossObjectOptions[i].value)
                                .text(response.crossObjectOptions[i].label)
                        );
                    }
                    $crossObjectOptions.val(response.crossObjectName);
                    $updatedCrossFilter.find('.crossfilter-fields .crossobjectoptions .ui-combobox > input').val($crossObjectOptions.find('option:selected').text());
                                                                
                    //need to update cross field options
                    $crossFieldOptions = $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .combobox').empty();
                    for (var i in response.crossFieldOptions)
                    {
                        $crossFieldOptions.append(
                            $("<option></option")
                                .attr('value', response.crossFieldOptions[i].value)
                                .text(response.crossFieldOptions[i].label)
                        );
                    }
                    $crossFieldOptions.val(response.crossFieldName);
                    $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .ui-combobox > input')
                        .val($crossFieldOptions.find('option:selected').text())
                        .removeClass('invalid');
                    
                    if (response.crossFieldOptions.length == 0)
                    {
                        $updatedCrossFilter.find('.crossfilter-fields .crossfieldoptions .ui-combobox > input').addClass('invalid');
                    }
                    
                    enableFilter($updatedCrossFilter);
                    
                    if ($loaderToReplace)
                    {
                        $loaderToReplace.slideUp(
                            200,
                            function ()
                            {
                                jQuery(this).replaceWith($updatedCrossFilter);
                                $updatedCrossFilter.slideDown(500);
                                
                                $updatedCrossFilter.find('.crossfilter-fields .combobox').combobox();
                                buildDatePickers($updatedCrossFilter.find('.crossfilter-fields input.datejs'));
                            }
                        );
                    }
                },
                error: function (request, error, exception)
                {
                	//show error
                	$('#savedqueryeditor .buttons .msgs').html('<b>Save Error</b>: Please try again').show();
                }
            });
        }
        
        function buildQuery()
        {
        	var componentIndex = 0;
        
            var queryObj = {
            	id					: query.id,
                name                : $('#savedqueryeditor .name').val(),
                folderId			: query.folderId,
                folderType			: query.folderType,
                baseObject          : query.baseObject,
                baseObjectId		: query.baseObjectId,
                filterByOwner       : 'All',
                selectedQueue       : $('#savedqueryeditor .filterbyowner select[id$=queueselect]').val(),
                useFilterLogic      : $('#savedqueryeditor .filterlogiclink').text() == 'Add' ? false : true,
                filterLogicString   : $('#savedqueryeditor .filterlogic').val(),
                activitySubfilters	: [],
                filters             : [],
                crossFilters        : [],
                columns             : []
            };
            
            //filter by owner settings
            var filterByOwnerValue = $('#savedqueryeditor .filterbyowner input:radio[name=filterByOwner]:checked').val();
            if (filterByOwnerValue == 'TRUE')
            {
            	queryObj.filterByOwner = 'My:' + $('filterbyowner-owner').val() + ':' + $('.filterbyowner-ownerfield').val();
            }
            
            //add activity filtering options
            queryObj.filterByActivity = {
            	task: $('#savedqueryeditor .filterbyactivity .activityfilter-task').val(),
            	event: $('#savedqueryeditor .filterbyactivity .activityfilter-event').val(),
            	operator: $('#savedqueryeditor .filterbyactivity .activityfilter-operator').val()
            }; 
            
            //loop through and add activity subfilters
            var activitySubfilterSelectors = [];
            if (queryObj.filterByActivity.task != 'all') { activitySubfilterSelectors.push('#savedqueryeditor .filterbyactivity .activitysubfilters-wrapper[data-type="task"] .subfilters > .filter'); }
            if (queryObj.filterByActivity.event != 'all') { activitySubfilterSelectors.push('#savedqueryeditor .filterbyactivity .activitysubfilters-wrapper[data-type="event"] .subfilters > .filter'); }
            if (activitySubfilterSelectors.length > 0) {
            	$(activitySubfilterSelectors.join(',')).each(function () {
            		queryObj.activitySubfilters.push({
	                	index					: componentIndex++,
	                    baseObject              : $(this).attr('data-baseobject'),
	                    fieldName               : $(this).find('.fieldoptions .combobox').val(),
	                    parentFieldName         : $(this).find('.parentfieldoptions .combobox').val(),
	                    grandparentFieldName    : $(this).find('.grandparentfieldoptions .combobox').val(),
	                    fieldType               : $(this).attr('data-fieldtype'),
	                    operator                : $(this).find('.operator .combobox').val(),
	                    value                   : extractValue1($(this)),
	                    value2                  : extractValue2($(this))
	                });
            	});
            }
            
            //loop through and add filters
            $('.fieldfilters .filter').each(function ()
            {
                queryObj.filters.push({
                	index					: componentIndex++,
                    baseObject              : $(this).attr('data-baseobject'),
                    indexLabel              : $(this).find('.indexlabel').text(),
                    fieldName               : $(this).find('.fieldoptions .combobox').val(),
                    parentFieldName         : $(this).find('.parentfieldoptions .combobox').val(),
                    grandparentFieldName    : $(this).find('.grandparentfieldoptions .combobox').val(),
                    fieldType               : $(this).attr('data-fieldtype'),
                    operator                : $(this).find('.operator .combobox').val(),
                    value                   : extractValue1($(this)),
                    value2                  : extractValue2($(this))
                });
            });
            
            //loop through and add cross filters
            $('.crossfilters .crossfilter').each(function ()
            {
                var crossFilter = {
                	index				: componentIndex++,
                    baseObject          : $(this).attr('data-baseobject'),
                    indexLabel          : 0,
                    fieldName           : $(this).find('.fieldoptions .combobox').val(),
                    crossObjectName     : $(this).find('.crossobjectoptions .combobox').val(),
                    crossFieldName      : $(this).find('.crossfieldoptions .combobox').val(),
                    operator            : $(this).find('.operator .combobox').val(),
                    filters             : []
                };
                
                //loop through and add subfilters
                $(this).find('.subfilters > .filter').each(function ()
                {
                    crossFilter.filters.push({
                    	index					: componentIndex++,
                        baseObject              : $(this).attr('data-baseobject').split('~~')[0],
                        indexLabel              : $(this).find('.indexlabel').text(),
                        fieldName               : $(this).find('.fieldoptions .combobox').val(),
                        parentFieldName         : $(this).find('.parentfieldoptions .combobox').val(),
                        grandparentFieldName    : $(this).find('.grandparentfieldoptions .combobox').val(),
                        fieldType               : $(this).attr('data-fieldtype'),
                        operator                : $(this).find('.operator .combobox').val(),
                        value                   : extractValue1($(this)),
                        value2                  : extractValue2($(this))
                    });
                });

                queryObj.crossFilters.push(crossFilter);
            });
            
            //loop through and add columns
            $('#querycolumns > li').each(function () {
                queryObj.columns.push({
                    fieldName       : $(this).attr('data-fieldname'),
                    fieldType       : $(this).attr('rel'),
                    isDefaultSort   : $(this).find('.sortcolumnindicator').length > 0
                });
            });
            
            //add tooltip settings
            $('#savedqueryeditor .tooltip').each(function () {
            	queryObj[$(this).attr('data-tooltip')] = $(this).val() == '--None--' ? null : $(this).val();
            });
            
            //add color settings
            queryObj.colorAssignmentType = $('#savedqueryeditor .color-assignmenttype').val();
            queryObj.iconColor	= $('.Static .markertype-color').css('display') == 'none' 
            	? 'image:' + $('.Static .markertype-image').val()
            	: $('.Static .markertype-color').val()
            queryObj.picklistField	= $('#savedqueryeditor .color-picklistfield').val() == '--Select a Field--' ? '' : $('#savedqueryeditor .color-picklistfield').val();
            queryObj.colorAssignment = $.map(
            	$('#savedqueryeditor .color-picklistvalues .picklistvalue'), 
            	function (picklistEl, index) {
            		return $(picklistEl).find('.markertype-color').css('display') == 'none'
            			? $(picklistEl).find('.picklistname').text() + '~' + 'image:' + $(picklistEl).find('.markertype-image').val()
            			: $(picklistEl).find('.picklistname').text() + '~' + $(picklistEl).find('.markertype-color').val();
            	}
            ).join('~~');
            
            return queryObj;
        }
        function extractValue1($filter)
        {
            switch ($filter.attr('data-basetype'))
            {
                case 'STRING':
                    return $filter.find('.value .STRING > input').val();
                    break;
                case 'PICKLIST':
                    var selectedOptions = [];
                    $filter.find('.value .PICKLIST select.multiselect').multiselect('widget').find('input[type="checkbox"]:checked').each(function () { selectedOptions.push($(this).attr('value'))});
                    //$filter.find('.value .PICKLIST select.multiselect > option:checked').each(function () { selectedOptions.push($(this).val()); } );
                    return selectedOptions.join('~~');
                    break;
                case 'BOOLEAN':
                    return $filter.find('.value .BOOLEAN input:radio:checked').val() == undefined ? 'NULL' : $filter.find('.value .BOOLEAN input:radio:checked').val();
                    break;
                case 'DATE':
                    var stringVal = $filter.find('.value .DATE > input.datejs').val();
                    
                    //check if the value is a date literal
                    for (var i in dateLiterals)
                    {
                    	//check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                        if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
                        {
                            //this is a date literal, so the text itself is our value
                            return dateLiterals[i].value;
                        }
                    }
                    
                    //check if the value is a dynamic date literal
                    try {
                    	var stringParts = stringVal.split(' ');
                    	if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                    		if (!isNaN(parseInt(stringParts[1]))) {
                    			if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                    				return stringParts[0] + '_N_' + stringParts[2] + ':' + parseInt(stringParts[1]); 
                    			}
                    			else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
                    				if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
                    					return stringParts[0] + '_N_FISCAL_' + stringParts[3] + ':' + parseInt(stringParts[1]);
                    				}
                    			}
                    		}
                    	}
                    }
                    catch (err) { }
                    
                    //if we made it this far, we aren't dealing with a date literal so parse the date
                    try
                    {
                        if ($filter.attr('data-fieldtype') == 'DATE')
                        {
                            return Date.parse(stringVal).toString('yyyy-MM-dd');
                        }
                        else
                        {
                            return Date.parse(stringVal).toString('yyyy-MM-ddT00:00:00Z');
                        }
                    }
                    catch (err)
                    {
                        return 'NULL';
                    }
                    break;
                default:
                    return '';
            }
        }
        function extractValue2($filter)
        {
            switch ($filter.attr('data-basetype'))
            {
                case 'STRING':
                    return $filter.find('.value .STRING .range input').val();
                    break;
                case 'DATE':
                    var stringVal = $filter.find('.value .DATE .range input.datejs').val();
                
                    //check if the value is a date literal
                    for (var i in dateLiterals)
                    {
                    	//check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                        if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
                        {
                            //this is a date literal, so the text itself is our value
                            return dateLiterals[i].value;
                        }
                    }
                    
                    //check if the value is a dynamic date literal
                    try {
                    	var stringParts = stringVal.split(' ');
                    	if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
                    		if (!isNaN(parseInt(stringParts[1]))) {
                    			if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
                    				return stringParts[0] + '_N_' + stringParts[2] + ':' + parseInt(stringParts[1]); 
                    			}
                    			else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
                    				if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
                    					return stringParts[0] + '_N_FISCAL_' + stringParts[3] + ':' + parseInt(stringParts[1]);
                    				}
                    			}
                    		}
                    	}
                    }
                    catch (err) { }
                    
                    //if we made it this far, we aren't dealing with a date literal so parse the date
                    try
                    {
                        if ($filter.attr('data-fieldtype') == 'DATE')
                        {
                            return Date.parse(stringVal).toString('yyyy-MM-dd');
                        }
                        else
                        {
                            return Date.parse(stringVal).toString('yyyy-MM-ddT23:59:59Z');
                        }
                    }
                    catch (err)
                    {
                        return 'NULL';
                    }
                    break;
                default:
                    return '';
            }
        }
        function valueToDateString(value, fieldType)
        {
            //check if the value is a date literal
            for (var i in dateLiterals)
            {
                if (dateLiterals[i].value == value && value != 'DYNAMIC')
                {
                    //this is a date literal, so the text itself is our value
                    return dateLiterals[i].label;
                }
            }
            
            //check if the value is a dynamic date literal
            try {
            	var stringParts = value.split(':');
            	if (stringParts.length == 2 && !isNaN(parseInt(stringParts[1]))) {
            		var literalParts = stringParts[0].split('_');
	            	if (literalParts[0] == 'NEXT' || literalParts[0] == 'LAST') {
	            		if (literalParts[1] == 'N') {
	            			if (literalParts.length == 3 && $.inArray(literalParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
	            				return literalParts[0] + ' ' + parseInt(stringParts[1]) + ' ' + literalParts[2]; 
	            			}
	            			else if (literalParts.length == 4 && literalParts[2] == 'FISCAL') {
	            				if (literalParts[3] == 'QUARTERS' || literalParts[3] == 'YEARS') {
	            					return literalParts[0] + ' ' + parseInt(stringParts[1]) + ' FISCAL ' + literalParts[3];
	            				}
	            			}
	            		}
	            	}
	            }
            }
            catch (err) { }
                
            //if we made it this far, we aren't dealing with a date literal so parse the date
            try
            {
                if (fieldType == 'DATE')
                {
                    return Date.parse(value).toString('MM/dd/yyyy');
                }
                else
                {
                    return Date.parse(value.replace('T', ' ').replace('Z', '')).toString('MM/dd/yyyy');
                }
            }
            catch (err) {}

            return '';
        }
        
        var dateLiterals = [
            { value:"YESTERDAY", label:"YESTERDAY" },
            { value:"TODAY", label:"TODAY" },
            { value:"TOMORROW", label:"TOMORROW" },
            { value:"LAST_WEEK", label:"LAST WEEK" },
            { value:"THIS_WEEK", label:"THIS WEEK" },
            { value:"NEXT_WEEK", label:"NEXT WEEK" },
            { value:"LAST_MONTH", label:"LAST MONTH" },
            { value:"THIS_MONTH", label:"THIS MONTH" },
            { value:"NEXT_MONTH", label:"NEXT MONTH" },
            { value:"DYNAMIC", label:"LAST N DAYS" },
            { value:"DYNAMIC", label:"NEXT N DAYS" },
            { value:"THIS_QUARTER", label:"THIS QUARTER" },
            { value:"LAST_QUARTER", label:"LAST QUARTER" },
            { value:"NEXT_QUARTER", label:"NEXT QUARTER" },
            { value:"DYNAMIC", label:"LAST N QUARTERS" },
            { value:"DYNAMIC", label:"NEXT N QUARTERS" },
            { value:"THIS_YEAR", label:"THIS YEAR" },
            { value:"LAST_YEAR", label:"LAST YEAR" },
            { value:"NEXT_YEAR", label:"NEXT YEAR" },
            { value:"DYNAMIC", label:"LAST N YEARS" },
            { value:"DYNAMIC", label:"NEXT N YEARS" },
            { value:"THIS_FISCAL_QUARTER", label:"THIS FISCAL QUARTER" },
            { value:"LAST_FISCAL_QUARTER", label:"LAST FISCAL QUARTER" },
            { value:"NEXT_FISCAL_QUARTER", label:"NEXT FISCAL QUARTER" },
            { value:"DYNAMIC", label:"LAST N FISCAL QUARTERS" },
            { value:"DYNAMIC", label:"NEXT N FISCAL QUARTERS" },
            { value:"THIS_FISCAL_YEAR", label:"THIS FISCAL YEAR" },
            { value:"LAST_FISCAL_YEAR", label:"LAST FISCAL YEAR" },
            { value:"NEXT_FISCAL_YEAR", label:"NEXT FISCAL YEAR" },
            { value:"DYNAMIC", label:"LAST N FISCAL YEARS" },
            { value:"DYNAMIC", label:"NEXT N FISCAL YEARS" }
        ];
        function buildDatePickers ($elements)
        {
            $elements
                .datepicker({
                    showOn: "button",
                    buttonImage: "{!URLFOR($Resource.QueryEditor, 'images/icons/16_calendar.png')}",
                    buttonImageOnly: true,
                    constrainInput: false,
                    onSelect: function () {
                        //parse this new date
                        parseDateInput($(this));
                    }
                })
                .autocomplete({
                    minLength: 0,
                    source: dateLiterals,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function( event, ui ) {
                        parseDateInput($(this).val( ui.item.label ));    
                        return false;
                    }
                })
                .blur(function () {
                	$(this).val(parseDateInput($(this)));
                });
        }
        function parseDateInput ($dateInput)
        {
        	var stringVal = $dateInput.val();
        
        	//check if the value is a date literal
            for (var i in dateLiterals)
            {
            	//check if the label matches and the value is not blank (blank value denotes a dynamic date literal and cannot be matched directly)
                if (dateLiterals[i].label == stringVal && dateLiterals[i].value != 'DYNAMIC')
                {
                    //this is a date literal, so the text itself is our value
                    $dateInput.removeClass('invalid').prev().val('');
                    return stringVal;
                }
            }
            
            //check if the value is a dynamic date literal
            try {
            	var stringParts = stringVal.split(' ');
            	if (stringParts[0] == 'NEXT' || stringParts[0] == 'LAST') {
            		if (!isNaN(parseInt(stringParts[1]))) {
            			if (stringParts.length == 3 && $.inArray(stringParts[2], ['DAYS', 'QUARTERS', 'YEARS']) != -1) {
            				$dateInput.removeClass('invalid').prev().val('');
            				return stringVal;
            			}
            			else if (stringParts.length == 4 && stringParts[2] == 'FISCAL') {
            				if (stringParts[3] == 'QUARTERS' || stringParts[3] == 'YEARS') {
            					$dateInput.removeClass('invalid').prev().val('');
            					return stringVal;
            				}
            			}
            		}
            	}
            }
            catch (err) { }
                    
            var parsedDate = Date.parse($dateInput.val());
            if ($dateInput.val() == '')
            {
                $dateInput.removeClass('invalid').prev().val('NULL');
                return '';
            }
            else if (parsedDate == null)
            {
                $dateInput.addClass('invalid').prev().val('NULL');
                return $dateInput.val();
            }
            else
            {
                if ($dateInput.attr('data-type') == 'DATE')
                {
                    $dateInput.removeClass('invalid').prev().val(
                        parsedDate.toString('yyyy-MM-dd')
                    );
                }
                else
                {
                    if ($dateInput.is('.enddate'))
                    {
                        $dateInput.removeClass('invalid').prev().val(
                            parsedDate.toString('yyyy-MM-ddT23:59:59Z')
                        );
                    }
                    else
                    {
                        $dateInput.removeClass('invalid').prev().val(
                            parsedDate.toString('yyyy-MM-ddT00:00:00Z')
                        );
                    }
                }
                return parsedDate.toString('MM/dd/yyyy');
            }
        }
        function refreshIndices()
        {
            $('.fieldfilters .listbox > .filter').each(function (index, element)
            {
                $(this).attr('data-index', index + 1).find('.indexlabel').text(index + 1);
            });
        }
        function randomHexColorCode()
        {
        	var hexList = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
        	var hexCode = '#';
        	for (var i = 0; i < 6; i++)
        	{
        		hexCode += hexList[Math.floor(Math.random() * 16)];
        	}
        	return hexCode;
        }
    </script>
    
    <div class='modal-layer'></div>
    
    <apex:form >
    	<apex:inputHidden id="serializedQuery" value="{!serializedQuery}" />
    	<apex:inputHidden id="serializedFilterByOwnerOptions" value="{!serializedFilterByOwnerOptions}" />
    
    	<!-- Error State -->
    	<div id='savedqueryeditor-error'>
    	
    		<!-- Title -->
    		<h2>Error</h2>
    		<h3>An error occurred while loading this query.  Please close this window and try again.  If the problem continues, contact support.</h3>
    	
    		<!-- Message -->
    		<div></div>
    		
    		<!-- Buttons -->
	        <div class='buttons'>
	        	<input type='button' class='closebtn btn btn-white' value='Close' />​
	        </div>
	        
    	</div>
    
    	<!-- Non-Error State -->
	    <div id='savedqueryeditor'>
	        <!-- Title -->
	        <h2>Create/Edit Saved Query</h2>
	        
	        <!-- Basic Information -->
	        <div class='gray box'>
	            <table class='form'>
	                <tr>
	                    <td>Name</td>
	                    <td><input type='text' class='name' style='width: 200px;' /></td>
	                </tr>
	                <tr>
	                    <td>Base Object</td>
	                    <td><span class='baseobject-name'></span></td>
	                </tr>
	            </table>
	        </div>
	        
	        <!-- Tabs -->
	        <div class='tabs'>
	            <ul>
	                <li><a href="#tab-filters">Filters</a></li>
	                <li><a href="#tab-tooltips">Tooltips</a></li>
	                <li><a href="#tab-markers">Markers</a></li>
	            </ul>
	            
	            <!-- Filters Tab -->
	            <div id='tab-filters'>
	                <!-- Filter By Owner -->
	                <div class='gray box section filterbyowner'>
	                    <div class='section-header'>Filter By Owner</div>
	                    
	                    <div class='section-body box'>
	                    	<ul>
	                            <li><input type='radio' name='filterByOwner' value='FALSE' checked="checked"/> All {!query.baseObjectPlural}</li>
	                            <li><input type='radio' name='filterByOwner' value='TRUE' /> 
	                            	My {!query.baseObjectPlural}
	                            	<div class='filterbyowner-ownerfield-wrapper' style='padding-left: 25px; display: none;'>
                                		<select class='filterbyowner-owner'>
                                			<option value='UserId'>Current User Id</option>
                                			<option value='DirectReportIds'>Current User Or Direct Report</option>
                                			<option value='SubordinateIds'>Current User Or Subordinate</option>
                                		</select>
                                		<span style='font-size: 10px; font-style: italic;'> = </span>
                                		<select class='filterbyowner-ownerfield'><option value='Loading...'></option></select>
                                	</div>
	                            </li>
	                            <li class='queue' style='display: none;'>
	                                <input type='radio' name='filterByOwner' value='QUEUE' /> Queue 
	                                <apex:selectList id="queueselect" size="1">
	                                    <apex:selectOptions value="{!query.queueOptions}" />
	                                </apex:selectList>
	                            </li>
	                        </ul>
	                    </div>
	                </div>
	                
	                <!-- Filter By Activity -->
	                <div class='gray box section filterbyactivity'>
	                    <div class='section-header'>Filter By Activity</div>
	                    
	                    <div class='section-body box'>
	                    
	                    	<!-- Tasks -->
	                    	<div class='activityfilter-type-wrapper'>
	                    	
		                    	<!-- Task Options -->
		                    	<div class='activityfilter-wrapper' data-type='task'>
		                    		Show {!query.baseObjectPlural}
			                    	<select class='activityfilter-task combobox'>
			                    		<option value='all'>with or without</option>
			                    		<option value='with'>with</option>
			                    		<option value='without'>without</option>
			                    	</select>
			                    	Tasks
			                    </div>
			                    
			                    <!-- Task Subfilters -->
			                    <div class='activitysubfilters-wrapper' data-type='task' style='display: none; padding-left: 25px;'>
			                    	<div class='subfilters'></div>
			                    	<div><span class='link blue addfilter'>Add Filter</span></div>
			                    </div>
			                    
			                </div>
		                    
		                    <!-- Operator -->
		                    <select class='activityfilter-operator combobox'>
		                    	<option value='AND'>AND</option>
		                    	<option value='OR'>OR</option>
		                    </select>
		                    
		                    <!-- Events -->
		                    <div class='activityfilter-type-wrapper'>
		                    
			                    <!-- Event Options -->
			                    <div class='activityfilter-wrapper' data-type='event'>
			                    	Show {!query.baseObjectPlural}
			                    	<select class='activityfilter-event combobox'>
			                    		<option value='all'>with or without</option>
			                    		<option value='with'>with</option>
			                    		<option value='without'>without</option>
			                    	</select>
			                    	Events
			                    </div>
			                    
			                    <!-- Event Subfilters -->
			                    <div class='activitysubfilters-wrapper' data-type='event' style='display: none; padding-left: 25px;'>
			                    	<div class='subfilters'></div>
			                    	<div><span class='link blue addfilter'>Add Filter</span></div>
			                    </div>
			                    
			                </div>
		                    
	                    </div>
	                </div>
	                
	                <!-- Field Filters -->
	                <div class='gray box section fieldfilters'>
	                    <div class='section-header'>Field Filters</div>
	                    
	                    <div class='section-buttons'>
	                        <div class='section-button add'></div>
	                    </div>
	                    
	                    <div class='section-body listbox'>
	                    </div>
	                    
	                    <div class='section-footer'>
	                    	<div style='margin: 10px 30px 0 10px; padding: 5px; border-top: 1px solid silver;'>
		                        <b>Filter Logic </b> 
		                        <input type='text' class='filterlogic' style='display: none;' /> 
		                        <span class='filterlogiclink small link'>Add</span>
	                        </div>
	                    </div>
	                </div>
	                
	                <!-- Cross Filters -->
	                <div class='gray box section crossfilters'>
	                    <div class='section-header'>Cross Object Filters</div>
	                    
	                    <div class='section-buttons'>
	                        <div class='section-button add'></div>
	                    </div>
	                    
	                    <div class='section-body listbox'>
	                    </div>
	                </div>
	            </div>
	            
	            <!-- Tooltips Tab -->
	            <div id='tab-tooltips'>
	            	<table style="width:100%;" cellpadding="5">
		                <tr>
		                    <td style="vertical-align:top;">
		                        <table cellpadding="5" cellspacing="0">
		                            <tr>
		                                <td style="white-space: nowrap"><b>Tooltip 1</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip1' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 2</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip2' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 3</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip3' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 4</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip4' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 5</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip5' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 6</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip6' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                            <tr>
		                                <td><b>Tooltip 7</b></td>
		                                <td>
		                                    <select class='tooltip' data-tooltip='tooltip7' data-blankvalue='--None--' disabled='disabled'><option value=''>Loading...</option></select>
		                                </td>
		                            </tr>
		                        </table>
		                    </td>
		                    <td style="vertical-align:top;text-align:right;">
		                        <img align="right" src="{!URLFOR($Resource.MapAnything, 'images/ToolTipsHelpImage.png')}"/>
		                    </td>
		                
		                </tr>
		            </table>
	            </div>
	            
	            <!-- Markers Tab -->
	            <div id='tab-markers'>
	            	<table cellpadding="2" cellspacing="0" class='color-options'>
		                <tr>
		                    <td><b>Assignment Type</b></td>
		                    <td>
		                    	<select class='color-assignmenttype'>
		                    		<option value='Static'>Static</option>
		                    		<option value='Dynamic, Field'>Dynamic, Field</option>
		                    	</select>
		                    </td>
		                </tr>
		                <tr class='Static toggle'>
		                	<td style='vertical-align: top;'><b>Icon</b></td>
		                	<td>
		                		<div class='markertype-wrapper'>
		                			<input type='text' class='color markertype-color' value='#00FF00' />
		                			<select class='markertype-image' style='display: none;' disabled='disabled'><option value=''>Loading...</option></select>
		                			
		                			<div class='markertype-selector'>
		                				<img class='markertype-selector-color' src="{!URLFOR($Resource.QueryEditor, 'images/icons/color-16.png')}" />
		                				<img class='markertype-selector-image' src="{!URLFOR($Resource.QueryEditor, 'images/icons/iconfolder-16.png')}" />
		                			</div>
		                		</div>
		                		<div style='font-size: 8px; margin-top: 10px;'>**To add additional image markers, upload them to the <a href='/{!documentsFolderId}' target='_blank'>MapAnything Documents</a> folder</div>
		                	</td>
		                </tr>
		                <tr class='Dynamic toggle' style='display: none;'>
		                	<td style='vertical-align: top;'><b>Picklist Field</b></td>
		                	<td>
		                		<select class='color-picklistfield' data-blankvalue='--Select a Field--' disabled='disabled'><option value=''>Loading...</option></select>
		                		<div class='color-picklistvalues' style='display: none; max-height: 300px; overflow-y: auto; overflow-x: hidden; padding-right: 40px;'>
		                			<table>
		                				<tr class='header'>
		                					<th>Picklist Value</th>
		                					<th>Icon (<span class='link small color-dynamicallyassign'>Dynamically Assign</span>)</th>
		                				</tr>
		                			</table>
		                		</div>
		                		<div style='font-size: 8px; margin-top: 10px;'>**To add additional image markers, upload them to the <a href='/{!documentsFolderId}' target='_blank'>MapAnything Documents</a> folder</div>
		                	</td>
		                </tr>
		            </table>
	            </div>
	        </div>
	        
	        <!-- Buttons -->
	        <div class='buttons'>
	        	<input type='button' class='savebtn btn btn-blue' value='Save' />
	        	<input type='button' class='closebtn btn btn-white' value='Close' />​
	        	<span class='msgs' style='color: red; font-size: 10px; display: none;'></span>
	        </div>
	    </div>
	    
	    <!-- Templates -->
	    <div id='savedqueryeditor-templates'>
	    	<!-- ajax load image template -->
        	<img class='loader template' src="{!URLFOR($Resource.QueryEditor, 'images/icons/ajax-loader.gif')}" style='display: none;' />
        
	        <!-- ajax load template -->
	        <div class="ajaxload template" style="display: none;">
	            <table>
	                <tr>
	                    <td colspan="5"><img src="{!URLFOR($Resource.QueryEditor, 'images/icons/ajax-loader.gif')}" /></td>
	                </tr>
	            </table>
	        </div>
	        
	        <!-- filter template -->
	        <div class="filter template" style="display: none;">
	            <table>
	                <tr>            
	                    <!-- Filter Index -->
	                    <td class='indexlabel'></td>
	                
	                    <!-- Field Selector -->
	                    <td class="fieldlabel">
	                    
	                        <!-- Selector for Field filters -->
	                        <div class='fieldoptions'>
	                            <select class="combobox"></select>
	                        </div>
	                        
	                        <div class='parentfieldoptions' style='display: none;'>
	                            <select class="combobox"></select>
	                        </div>
	                        
	                        <div class='grandparentfieldoptions' style='display: none;'>
	                            <select class="combobox"></select>
	                        </div>
	                        
	                    </td>
	                    
	                    <!-- Operator Selector -->
	                    <td class="operator">
	                        <select class="combobox"></select>                              
	                    </td>
	            
	                    <!-- Value Input -->
	                    <td class="value">
	                        <!-- render a text box for STRING filters -->
	                        <div class='STRING' style='display: none;'>
	                            <input type='text'/>
	                            
	                            <div class='range' style='display: none;'>
	                                <span>to</span> 
	                                <input type='text'/>
	                            </div>
	                        </div>
	                        
	                        <!-- render a checkbox list for PICKLIST filters -->
	                        <div class='PICKLIST' style='display: none;'>
	                            <select class='multiselect' multiple='multiple' style='display: none;'></select>
	                        </div>
	                        
	                        <!-- render a radio list for BOOLEAN filters -->
	                        <div class='BOOLEAN' style='display: none;'>
	                            <input type='radio' value="TRUE" /> True
	                            <input type='radio' value="FALSE" /> False
	                        </div>
	                        
	                        <!-- render a special text box that uses date.js for date parsing for DATE filters -->
	                        <div class='DATE' style='display: none;'>
	                            <input type='text' class='datejs startdate' data-type="DATE"/>
	                            <img src="{!URLFOR($Resource.QueryEditor, 'images/icons/16_lookup.png')}" class="dateliteralpicker" />
	                            
	                            <div class='range' style='display: none;'>
	                                <span>to</span> 
	                                <input type='text' class='datejs enddate' data-type="DATE"/>
	                                <img src="{!URLFOR($Resource.QueryEditor, 'images/icons/16_lookup.png')}" class="dateliteralpicker" />
	                            </div>
	                            <div class='nextlast' style='display: none;'>
	                            	<select class='n-type'>
	                            		<option value='DAYS'>Days</option>
	                            		<option value='QUARTERS'>Quarters</option>
	                            		<option value='YEARS'>Years</option>
	                            		<option value='FISCAL_QUARTERS'>Fiscal Quarters</option>
	                            		<option value='FISCAL_YEARS'>Fiscal Years</option>
	                            	</select>
	                            </div>
	                        </div>
	                    </td>
	            
	                    <!-- Action Links -->
	                    <td class="actions" style='width: 50px;'>
	                        <div>
	                            <span class='link deletelink'>Delete</span> 
	                        </div>
	                    </td>
	                </tr>
	            </table>
	        </div>
	        
	        <!-- cross filter template -->
	        <div class='crossfilter template' style='display: none;'>
	            <table class='crossfilter-fields'>
	                <tr>
	                                
	                    <!-- Filter Index -->
	                    <td class='indexlabel'>AND</td>
	                
	                    <!-- Field Selector -->
	                    <td class="fieldlabel">
	                        <!-- Selector for Cross Filters -->
	                        <table>
	                            <tr>
	                                <td>
	                                    <!-- Display Base Object -->
	                                    <span class='baseobject'></span>
	                                </td>
	                                <td>
	                                    <span class="advanced" style="font-weight: bold; font-size: 18px; display: none;">.</span>
	                                </td>
	                                <td>
	                                    <!-- Base object field selection for advanced queries -->
	                                    <div class="advanced fieldoptions" style='display: none;'>
	                                        <select class='combobox'></select>
	                                    </div>
	                                </td>
	                            </tr>
	                        </table>
	                    </td>
	                    
	                    <!-- Operator Selector -->
	                    <td class="operator">
	                        <select class='combobox'>
	                        	<option value='with'>with</option>
	                        	<option value='without'>without</option>
	                        </select>                              
	                    </td>
	            
	                    <!-- Value Input -->
	                    <td class="value">
	            
	                        <!-- render a select list of child objects for CROSS filters -->
	                        <table>
	                            <tr>
	                                <td>
	                                    <div class='crossobjectoptions'>
	                                        <select class='combobox'></select>
	                                    </div>
	                                </td>
	                                <td>
	                                    <span class='advanced' style="font-weight: bold; font-size: 18px; display: none;">.</span>
	                                </td>
	                                <td>
	                                    <!-- select list of field options for the selected child object (this is for advanced queries) -->
	                                    <div class='advanced crossfieldoptions' style='display: none;'>
	                                        <select class='combobox'></select>
	                                    </div>
	                                </td>
	                            </tr>
	                        </table>
	                    </td>
	                 
	                    <!-- Action Links -->
	                    <td class="crossfilteractions" style='width: 50px;'>
	                        <div>
	                            <!-- <span class='link'>Show Advanced</span> |  --><span class='link deletelink'>Delete</span>
	                        </div>
	                    </td>
	                </tr>
	            </table>
	            
	            <div style='padding-left: 30px;'>
	                <div class='subfilters'></div>
	                <div class='addfilter'><span class='link'>Add filter</span></div>
	            </div>
	        </div>
	        
	        <!-- Activity Filter Template -->
	        <div class='activityfilter template'>
	        	<table>
	        		<tr>
	        			<td>AND</td>
	        			<td>
					        <select class='field combobox'>
				           		<option value='CreatedDate' class='DATE'>Created Date</option>
				           		<option value='ActivityDate' class='DATE'>Due Date / Event Date</option>
				           		<option value='Subject' class='STRING'>Subject</option>
				           		<option value='Status' class='STRING'>Status (tasks only)</option>
				           	</select>
				        </td>
				        <td class='operatorwrapper'>
				           	<select class='operator combobox'></select>
				        </td>
				        <td class='value'>
				        	<div class='STRING' style='display: none;'>
				        		<input type='text' />
				        	</div>
				        	
				        	<div class='DATE' style='display: none;'>
				        		<input type='text' class='datejs startdate' data-type="DATE"/>
	                            <img src="{!URLFOR($Resource.QueryEditor, 'images/icons/16_lookup.png')}" class="dateliteralpicker" />
				        	</div>
				        </td>
				        <td class='activitysubfilteractions' style='min-width: 50px;'>
				        	<div>
				        		<span class='link blue delete'>Delete</span>
				        	</div>
				        </td>
	           		</tr>
	           	</table>
	        </div>
        
	        <!-- Column Template -->
	        <li class='column template'>
	            <span></span>
	            <img class='deletebtn' src="{!URLFOR($Resource.QueryEditor, 'images/icons/badge-circle-cross-16.png')}" />
	        </li>
	        
	        <!-- Picklist Value Template -->
	        <table>
	        	<tr class='picklistvalue template'>
	        		<td class='picklistname'>::PicklistName::</td>
	        		<td style='white-space: nowrap;'>
	        			<div class='markertype-wrapper'>
                			<input type='text' class='color markertype-color' value='#00FF00' />
                			<select class='markertype-image' style='display: none;' disabled='disabled'><option value=''>Loading...</option></select>
                			
                			<div class='markertype-selector'>
                				<img class='markertype-selector-color' src="{!URLFOR($Resource.QueryEditor, 'images/icons/color-16.png')}" />
                				<img class='markertype-selector-image' src="{!URLFOR($Resource.QueryEditor, 'images/icons/iconfolder-16.png')}" />
                			</div>
                		</div>
	        		</td>
	        	</tr>
	        </table>
	    </div>
	</apex:form>
</apex:page>